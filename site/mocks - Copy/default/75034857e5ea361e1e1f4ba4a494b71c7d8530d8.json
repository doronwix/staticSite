{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/managers/ChartZoomSettingsManager.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'managers/ChartZoomSettingsManager',\r\n    [\r\n        'require',\r\n        'handlers/general',\r\n        'Q',\r\n        'managers/ChartSettingManager'\r\n    ],\r\n    function (require) {\r\n        var Q = require('Q'),\r\n            general = require('handlers/general'),\r\n            chartSettingManager = require('managers/ChartSettingManager'),\r\n            enumSources = {\r\n                user: 'user',\r\n                history: 'history',\r\n                rt: 'rt',\r\n                restorezoom: 'restorezoom',\r\n                zoomfullrange: 'zoomfullrange'\r\n            };\r\n\r\n        var ChartZoomSettingsManager = function ChartZoomSettingsManagerClass(_profileIdx) {\r\n            var defaultSettingsIdx = -1,\r\n                profileIdx = _profileIdx,\r\n                objChart,\r\n                onActionRunHandler,\r\n                lastZoomAction,\r\n                isZoomRestored = Q.defer();\r\n\r\n            function dispose() {\r\n                if (onActionRunHandler && objChart && objChart.events) {\r\n                    objChart.events.actions.onActionRun = onActionRunHandler;\r\n                }\r\n\r\n                if (objChart && objChart.chart) {\r\n                    objChart.chart.OnZoomChangeCallback = null;\r\n                }\r\n\r\n                objChart = null;\r\n            }\r\n\r\n            function onActionRunWrapper(actionname) {\r\n                switch (actionname) {\r\n                    case \"zoom_default\":\r\n                        var timeScale = objChart.chart.TimeScale,\r\n                            settings = getSettings();\r\n\r\n                        delete settings[timeScale];\r\n                        updateSettings(settings);\r\n                        break;\r\n\r\n                    case \"zoom_left\":\r\n                    case \"zoom_in\":\r\n                    case \"zoom_out\":\r\n                    case \"zoom_all\":\r\n                    case \"zoom_right\":\r\n                        lastZoomAction = actionname;\r\n                        break;\r\n                }\r\n\r\n                if (general.isFunctionType(onActionRunHandler)) {\r\n                    onActionRunHandler.apply(this, arguments);\r\n                }\r\n            }\r\n\r\n            function start(initializedChartObject) {\r\n                if (!initializedChartObject || !general.isDefinedType(initializedChartObject.ExtraData.additionalStartArgs.containerSuffix)) {\r\n                    throw new Error(\"Argument exception: initializedChartObject is not valid.\");\r\n                }\r\n\r\n                objChart = initializedChartObject;\r\n\r\n                if (!general.isNumberType(profileIdx)) {\r\n                    profileIdx = objChart.ExtraData.additionalStartArgs.containerSuffix || defaultSettingsIdx;\r\n                }\r\n\r\n                objChart.chart.OnZoomChangeCallback = onZoomChangeCallback;\r\n\r\n                if (general.isFunctionType(objChart.events.actions.onActionRun)) {\r\n                    onActionRunHandler = objChart.events.actions.onActionRun;\r\n                }\r\n\r\n                objChart.events.actions.onActionRun = onActionRunWrapper;\r\n            }\r\n\r\n            function getSettings() {\r\n                var chartsZoomSettings = chartSettingManager.Chart().chartsZoomSettings || (chartSettingManager.Chart().chartsZoomSettings = {}),\r\n                    zoomProfile = chartsZoomSettings[profileIdx] || (chartsZoomSettings[profileIdx] = {});\r\n\r\n                return zoomProfile;\r\n            }\r\n\r\n            function updateSettings(zoomData) {\r\n                chartSettingManager.Chart().chartsZoomSettings = chartSettingManager.Chart().chartsZoomSettings || {};\r\n                chartSettingManager.Chart().chartsZoomSettings[profileIdx] = zoomData;\r\n\r\n                chartSettingManager.SaveChart();\r\n            }\r\n\r\n            function onZoomChangeCallback(objCurZoom) {\r\n                if (!objChart || !objChart.chart) {\r\n                    //objChart can't be null (if it is > is an orphaned call)\r\n                    return;\r\n                }\r\n\r\n                var settings = getSettings();\r\n\r\n                var future = objCurZoom.future,\r\n                    zoomSize = objCurZoom.zoomSize,\r\n                    timeScale = objCurZoom.timescale,\r\n                    source = objCurZoom.source, //Can be \"user\", \"history\", \"rt\", \"restorezoom\" or \"zoomfullrange\"\r\n                    bufferSize = objCurZoom.bufferSize;\r\n\r\n                if (source == enumSources.restorezoom) {\r\n                    delete settings[timeScale];\r\n                    updateSettings(settings);\r\n\r\n                    //By default show on 1Tick 95% of real data + 5% of future data\r\n                    if (timeScale == eChartTimeFramesIds.tick) {\r\n                        objChart.chart.SetZoom(bufferSize * 0.05, bufferSize * 1.05, true);\r\n                    }\r\n                    else {\r\n                        //For other scales show \r\n                        objChart.chart.SetZoom(bufferSize * 0.6, bufferSize + 2, true);\r\n                    }\r\n                }\r\n\r\n                //Caused by user changing the zoom manually and/or using zoom buttons from zooms toolbar\r\n                if (source == enumSources.user || source == enumSources.zoomfullrange || lastZoomAction) {\r\n                    lastZoomAction = \"\";\r\n\r\n                    //Save changes to local dictionary only if there are visible future bars and they don't occupy more than 80% of the viewport.\r\n                    if (future / zoomSize > 0.01 && future / zoomSize <= 0.5) {\r\n                        settings[timeScale] = {\r\n                            future: objCurZoom.future,\r\n                            visibleCandles: objCurZoom.end - objCurZoom.start + 1\r\n                        };\r\n\r\n                        updateSettings(settings);\r\n\r\n                        return resetZoom(objCurZoom);\r\n                    }\r\n\r\n                    if (future / zoomSize > 0.5) {\r\n                        delete settings[timeScale];\r\n                        updateSettings(settings);\r\n                    }\r\n                }\r\n\r\n                if (source == enumSources.history) {\r\n                    // Chart got history data. Need to reload saving from dictionary\r\n                    var objLoadedZoom = settings[timeScale];\r\n\r\n                    if (objLoadedZoom && !objLoadedZoom.visibleCandles) {\r\n                        objLoadedZoom.visibleCandles = objLoadedZoom.end - objLoadedZoom.start + 1;\r\n                    }\r\n\r\n                    if (objLoadedZoom) {\r\n                        if (isZoomRestored.promise.inspect().state === \"pending\") {\r\n                            isZoomRestored.resolve();\r\n                        }\r\n\r\n                        if (bufferSize + objLoadedZoom.future < objLoadedZoom.visibleCandles) {\r\n                            return resetZoom(objCurZoom);\r\n                        } else {\r\n                            var startCandle = bufferSize + objLoadedZoom.future - objLoadedZoom.visibleCandles,\r\n                                endCandle = bufferSize + objLoadedZoom.future;\r\n\r\n                            objCurZoom.start = startCandle;\r\n                            objCurZoom.end = endCandle;\r\n                            objCurZoom.zoomSize = endCandle - startCandle + 1;\r\n                            objCurZoom.future = objLoadedZoom.future;\r\n                        }\r\n\r\n                        return objCurZoom;\r\n                    } else {\r\n                        return resetZoom(objCurZoom);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function resetZoom(currentZoom) {\r\n                if (isZoomRestored.promise.inspect().state === \"pending\") {\r\n                    isZoomRestored.resolve();\r\n                }\r\n\r\n                var startCandlePercent = currentZoom.timeScale == eChartTimeFramesIds.tick ? 0.05 : 0.6,\r\n                    endCandlePercent = 1.05,\r\n                    startCandle = parseInt(currentZoom.bufferSize * startCandlePercent),\r\n                    endCandle = parseInt(currentZoom.bufferSize * endCandlePercent);\r\n\r\n                currentZoom.start = startCandle;\r\n                currentZoom.end = endCandle;\r\n                currentZoom.zoomSize = endCandle - startCandle + 1;\r\n                currentZoom.future = endCandle - currentZoom.bufferSize + 1;\r\n\r\n                return currentZoom;\r\n            }\r\n\r\n            return {\r\n                Dispose: dispose,\r\n                Start: start,\r\n                IsZoomRestored: isZoomRestored.promise\r\n            };\r\n        };\r\n\r\n        return ChartZoomSettingsManager;\r\n    }\r\n);",
  "isBase64": false
}