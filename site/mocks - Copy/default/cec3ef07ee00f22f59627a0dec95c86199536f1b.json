{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/AmountSpinnerFieldViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/AmountSpinnerFieldViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'Dictionary'\r\n    ],\r\n    function (require) {\r\n        var ko = require('knockout'),\r\n            Dictionary = require('Dictionary');\r\n\r\n        function AmountSpinnerFieldViewModel(params) {\r\n            var stepSubscriber,\r\n                valueSubscriber,\r\n                optionsSubscriber,\r\n                tooltipSubscriber,\r\n                isValidSubscriber,\r\n                tooltipClosedSubscriber,\r\n                forceNonFractionalValueSubscriber;\r\n\r\n            var step = ko.observable(1),\r\n                format = ko.pureComputed(function() {\r\n                    var numberOfDecimalDigits = (step().toString().split(\".\")[1] || \"\").length;\r\n\r\n                    return numberOfDecimalDigits;\r\n                }),\r\n                minValue = ko.observable(),\r\n                maxValue = ko.observable(),\r\n                showAmountTooltip = ko.observable(false),\r\n                isSelectedAmountValid = ko.observable(true);\r\n\r\n            function extendObservables() {\r\n                // Tooltip validation\r\n                params.value.extend({\r\n                    tooltipValidation: {\r\n                        message: Dictionary.GetItem(\"txtRateValidationTooltip\",null,\"\"),\r\n                        notify: 'always',\r\n                        showTooltip: function () {\r\n                            return  showAmountTooltip() }\r\n                    }\r\n                });\r\n\r\n                setRanges(false);\r\n            }\r\n\r\n\r\n            function setRanges(reset) {\r\n                var nonFractionalValue = params.forceNonFractionalValue()\r\n                if (reset) {\r\n                    stepSubscriber.dispose();\r\n                    params.value.extend({ toNumericLength: false });\r\n                    params.value.extend({ incremental: false });\r\n                }\r\n\r\n                params.value.extend({\r\n                    toNumericLength: {\r\n                        ranges: [\r\n                            { from: 0, to: 10, decimalDigits: (nonFractionalValue ? 0 : 1) },\r\n                            { from: 10, to: Number.MAX_SAFE_INTEGER, decimalDigits: 0 }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                // make it incremental\r\n                params.value.extend({\r\n                    incremental: {\r\n                        ranges: [\r\n                            { from: 0, to: 10, step: (nonFractionalValue ? 1 : 0.1) },\r\n                            { from: 10, to: 100, step: 1 },\r\n                            { from: 100, to: 1000, step: 10 },\r\n                            { from: 1000, to: 10000, step: 100 },\r\n                            { from: 10000, to: 100000, step: 1000 },\r\n                            { from: 100000, to: 1000000, step: 10000 },\r\n                            { from: 1000000, to: 10000000, step: 100000 },\r\n                            { from: 10000000, to: 100000000, step: 1000000 },\r\n                            { from: 100000000, to: 1000000000, step: 10000000 },\r\n                            { from: 1000000000, to: 10000000000, step: 100000000 },\r\n                            { from: 10000000000, to: 100000000000, step: 1000000000 }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                step(params.value.step());\r\n\r\n                stepSubscriber = params.value.step.subscribe(function (value) {\r\n                    step(value);\r\n                });\r\n            }\r\n\r\n            function buildValidation(minMaxValues) {\r\n                minMaxValues = minMaxValues || [];\r\n\r\n                minValue(minMaxValues[0] || 0);\r\n                maxValue(minMaxValues[1] || 10000000000);\r\n            }\r\n\r\n            function setSubscribers() {\r\n                optionsSubscriber = params.options.subscribe(function (values) {\r\n                    var actualValues = values.map(function (item) {\r\n                        return item.value;\r\n                    });\r\n                    \r\n                    buildValidation(actualValues);\r\n                }, null, 'arrayChange');\r\n\r\n                tooltipClosedSubscriber = params.value.tooltipClosed.subscribe(function (isClosed) {\r\n                    if (isClosed) {\r\n                        showAmountTooltip(false);\r\n                    }\r\n                });\r\n\r\n                valueSubscriber = params.value.subscribe(function () {\r\n                    showAmountTooltip(false);\r\n                });\r\n\r\n                tooltipSubscriber = ko.postbox.subscribe('deal-slip-show-validation-tooltips', function () {\r\n                    params.value.resetTooltip();\r\n                    showAmountTooltip(true);\r\n                });\r\n\r\n                isValidSubscriber = params.value.isValid.subscribe(function (isValid) {\r\n                    isSelectedAmountValid(isValid);\r\n                });\r\n\r\n                forceNonFractionalValueSubscriber = params.forceNonFractionalValue.subscribe(function () {\r\n                    setRanges(true);\r\n                });\r\n            }\r\n\r\n            function dispose() {\r\n                format.dispose();\r\n                stepSubscriber.dispose();\r\n                tooltipClosedSubscriber.dispose();\r\n                valueSubscriber.dispose();\r\n                tooltipSubscriber.dispose();\r\n                isValidSubscriber.dispose();\r\n                params.value.extend({ incremental: false });\r\n                params.value.extend({ tooltipValidation: false });\r\n                params.value.extend({ toDealAmount: false });\r\n\r\n                optionsSubscriber.dispose();\r\n                forceNonFractionalValueSubscriber.dispose();\r\n            }\r\n\r\n            extendObservables();\r\n            buildValidation(ko.utils.unwrapObservable(params.options));\r\n            setSubscribers();\r\n\r\n            return {\r\n                id: params.id,\r\n                name: params.name,\r\n                label: params.label || null,\r\n                value: params.value,\r\n                isSelectedAmountValid: isSelectedAmountValid,\r\n                min: minValue,\r\n                max: maxValue,\r\n                step: step,\r\n                format: format,\r\n                dispose: dispose\r\n                \r\n            };\r\n        }\r\n\r\n        return AmountSpinnerFieldViewModel;\r\n    }\r\n);",
  "isBase64": false
}