{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/devices/web/uilayer/viewmodels/TileLayoutViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'deviceviewmodels/TileLayoutViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'managers/historymanager',\r\n        'helpers/KoComponentViewModel',\r\n        'devicemanagers/TileSettingsManager',\r\n        'managers/ChartLayoutSettings',\r\n        'StateObject!AccountHub',\r\n        'JSONHelper'\r\n    ],\r\n    function () {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            koComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            historyManager = require('managers/historymanager'),\r\n            tileSettingsManager = require('devicemanagers/TileSettingsManager'),\r\n            chartLayoutSettings = require('managers/ChartLayoutSettings'),\r\n            JSONHelper = require('JSONHelper'),\r\n            stateObjectAccountHub = require('StateObject!AccountHub');\r\n\r\n        var TileLayoutViewModel = general.extendClass(koComponentViewModel, function (params) {\r\n            var self = this,\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = this.Data, // inherited from KoComponentViewModel\r\n                options = general.extendType({}, params),\r\n                defaultLayout = options.selectedLayout || eTileLayout.FourSplit;\r\n\r\n            //-------------------------------------------------------\r\n            function init(settings) {\r\n                parent.init.call(self, settings); // inherited from KoComponentViewModel\r\n\r\n                tileSettingsManager.Init({ initialLayout: defaultLayout });\r\n\r\n                setProperties();\r\n                setObservables();\r\n                setComputables();\r\n                setSubscribers();\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setProperties() {\r\n                data.layouts = options.layouts || [1];\r\n                data.templates = (options.templates || [])\r\n                    .slice(0, Math.max.apply(null, data.layouts))\r\n                    .map(function (name) { return { name: name } });\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setObservables() {\r\n                data.selectedLayout = ko.observable(tileSettingsManager.GetLayout());\r\n                data.isFullScreen = ko.observable(false);\r\n                data.isLayoutSelectorExpanded = ko.observable(false);\r\n                data.activeTileId = ko.observable(getActiveTileIdFromSettings());\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setComputables() {\r\n                data.isSingleMode = ko.pureComputed(function() { return data.selectedLayout() === eTileLayout.Single; });\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setSubscribers() {\r\n                self.subscribeTo(data.selectedLayout, function (newLayoutId) {\r\n                    tileSettingsManager.UpdateLayout(newLayoutId);\r\n\r\n                    if (!options.activeChangedHandler) {\r\n                        return;\r\n                    }\r\n\r\n                    if (data.activeTileId() >= newLayoutId && newLayoutId > 1) {\r\n                        data.activeTileId(0);\r\n                    } else {\r\n                        options.activeChangedHandler(data.activeTileId(), newLayoutId);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(data.activeTileId, function (newTile) {\r\n                    if (!options.activeChangedHandler) {\r\n                        return;\r\n                    }\r\n\r\n                    options.activeChangedHandler(newTile, data.selectedLayout());\r\n                });\r\n\r\n                self.subscribeTo(data.isFullScreen, function (value) {\r\n                    stateObjectAccountHub.update(\"displayNone\", value);\r\n                })\r\n\r\n                historyManager.OnStateChanged.Add(onHistoryStateChanged);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function onHistoryStateChanged(state) {\r\n                if (state.type === eHistoryStateType.ExitFullscren ||\r\n                    (state.type === eHistoryStateType.CloseDialog && state.popupId == 'ChartPageFullScreen')) {\r\n                    data.isFullScreen(false);\r\n                }\r\n\r\n                if (state.type === eHistoryStateType.EnterFullscren) {\r\n                    data.isFullScreen(true);\r\n                }\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function getActiveTileIdFromSettings() {\r\n                var tileId = tileSettingsManager.GetActiveTileId();\r\n\r\n                if (tileId >= defaultLayout) {\r\n                    tileId = defaultLayout - 1;\r\n\r\n                    overWriteActiveTileSettings(tileId);\r\n                    tileSettingsManager.UpdateActiveTileId(tileId);\r\n                    data.selectedLayout(defaultLayout);\r\n                }\r\n\r\n                return tileId;\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function overWriteActiveTileSettings(newActiveTileId) {\r\n                var oldActiveTileId = tileSettingsManager.GetActiveTileId();\r\n\r\n                var oldActiveTileSettings = chartLayoutSettings.GetSettings(oldActiveTileId);\r\n                oldActiveTileSettings.isActive = false;\r\n                chartLayoutSettings.UpdateSettings(oldActiveTileId, oldActiveTileSettings);\r\n\r\n                var newActiveTileSettings = cloneObject(oldActiveTileSettings);\r\n                newActiveTileSettings.isActive = true;\r\n                chartLayoutSettings.UpdateSettings(newActiveTileId, newActiveTileSettings);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function cloneObject(obj) {\r\n                obj = JSON.stringify(obj);\r\n                return JSONHelper.STR2JSON(\"TileLayoutViewModel:cloneObject\", obj);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setActiveTile(tileId) {\r\n                if (data.activeTileId() == tileId) {\r\n                    return;\r\n                }\r\n\r\n                data.activeTileId(-1);\r\n\r\n                setTimeout(function(tileIdValue, dataRef, tileSettingsManagerRef) {\r\n                    dataRef.activeTileId(tileIdValue);\r\n                    tileSettingsManagerRef.UpdateActiveTileId(tileIdValue);\r\n                }, 10, tileId, data, tileSettingsManager);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function toggleLayoutSelector() {\r\n                data.isLayoutSelectorExpanded(!data.isLayoutSelectorExpanded());\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function toggleFullScreen() {\r\n                if (!data.isFullScreen()) {\r\n                    historyManager.PushPopupState(ePopupType.Dialog, options.fullscreenPageId);\r\n                } else {\r\n                    historyManager.Back();\r\n                }\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function selectLayout(index) {\r\n                data.selectedLayout(index);\r\n                data.isLayoutSelectorExpanded(false);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function dispose() {\r\n                historyManager.OnStateChanged.Remove(onHistoryStateChanged);\r\n\r\n                parent.dispose.call(self);          // inherited from KoComponentViewModel\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                SelectLayout: selectLayout,\r\n                SetActiveTile: setActiveTile,\r\n                ToggleFullScreen: toggleFullScreen,\r\n                ToggleLayoutSelector: toggleLayoutSelector\r\n            }\r\n        });\r\n\r\n        function createViewModel(params) {\r\n            var viewModel = new TileLayoutViewModel(params);\r\n\r\n            viewModel.init();\r\n\r\n            return viewModel;\r\n        }\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            }\r\n        };\r\n    }\r\n);",
  "isBase64": false
}