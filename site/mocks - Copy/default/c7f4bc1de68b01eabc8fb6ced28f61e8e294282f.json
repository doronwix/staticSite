{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/FxNet/LogicLayer/Deal/NewDealValidator.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'FxNet/LogicLayer/Deal/NewDealValidator',\r\n    [\r\n        'require',\r\n        'Dictionary',\r\n        'initdatamanagers/InstrumentsManager',\r\n        'enums/alertenums',\r\n        'devicemanagers/AlertsManager',\r\n        'cachemanagers/QuotesManager',\r\n        'devicemanagers/StatesManager',\r\n    ],\r\n    function NewDealValidator(require) {\r\n        var dictionary = require('Dictionary'),\r\n            instrumentsManager = require('initdatamanagers/InstrumentsManager'),\r\n            alertTypes = require('enums/alertenums'),\r\n            alertsManager = require('devicemanagers/AlertsManager'),\r\n            quotesManager = require('cachemanagers/QuotesManager'),\r\n            statesManager = require('devicemanagers/StatesManager');\r\n            \r\n        var _baseOrder;\r\n\r\n        var init = function(baseOrder) {\r\n            _baseOrder = baseOrder;\r\n        };\r\n\r\n        var validate = function(instrumentId, dependentValidationErr) {\r\n            var instrument = instrumentsManager.GetInstrument(instrumentId),\r\n                tradingPermission = _baseOrder.CheckTradingAgreement(instrument),\r\n                alertBody;\r\n\r\n            if (statesManager.States.fxDenied() == true) {\r\n                _baseOrder.ValidateOnlineTradingUser();\r\n                return false;\r\n            }\r\n\r\n            if (tradingPermission !== eTradingAgreement.NotNeeded) {\r\n                alertBody = String.format(dictionary.GetItem(\"rcFuturesRedirect\"), instrument.ccyPair);\r\n                alertsManager.UpdateAlert(alertTypes.ServerResponseAlert, null, alertBody, '');\r\n                alertsManager.PopAlert(alertTypes.ServerResponseAlert);\r\n\r\n                return false;\r\n            }\r\n\r\n            //-------------------------------------------\r\n\r\n            var quote = quotesManager.Quotes.GetItem(instrument.id);\r\n\r\n            if (quote && !quote.isActive()) {\r\n                alertBody = String.format(dictionary.GetItem(\"InstrumentInactive\"), instrument.ccyPair);\r\n                alertsManager.UpdateAlert(alertTypes.ServerResponseAlert, null, alertBody, '');\r\n                alertsManager.PopAlert(alertTypes.ServerResponseAlert);\r\n\r\n                return false;\r\n            }\r\n\r\n            //------------------------------------------------\r\n\r\n            var clErr = dependentValidationErr || \"\";\r\n\r\n            if (clErr.length > 0) {\r\n                alertBody = clErr;\r\n                alertsManager.UpdateAlert(alertTypes.ServerResponseAlert, null, alertBody, '');\r\n                alertsManager.PopAlert(alertTypes.ServerResponseAlert);\r\n\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        return {\r\n            Init: init,\r\n            Validate: validate\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}