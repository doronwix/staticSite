{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/devices/web/uilayer/viewmodels/OpenedDealRowViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "define(\r\n    'deviceviewmodels/OpenedDealRowViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'Dictionary',\r\n        'helpers/KoComponentViewModel',\r\n        'initdatamanagers/Customer',\r\n        'initdatamanagers/InstrumentsManager',\r\n        'cachemanagers/dealsmanager',\r\n        'cachemanagers/QuotesManager',\r\n        'viewmodels/QuotesSubscriber',\r\n        'handlers/AmountConverter',\r\n        'viewmodels/dialogs/DialogViewModel',\r\n        'managers/PrintExportManager',\r\n        'StateObject!OpenedDeals'\r\n    ],\r\n    function (require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            dictionary = require('Dictionary'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            customer = require('initdatamanagers/Customer'),\r\n            instrumentsManager = require('initdatamanagers/InstrumentsManager'),\r\n            dealsManager = require('cachemanagers/dealsmanager'),\r\n            quotesManager = require('cachemanagers/QuotesManager'),\r\n            QuotesSubscriber = require('viewmodels/QuotesSubscriber'),\r\n            AmountConverter = require('handlers/AmountConverter'),\r\n            DialogViewModel = require('viewmodels/dialogs/DialogViewModel'),\r\n            printExportManager = require('managers/PrintExportManager'),\r\n            stateObject = require('StateObject!OpenedDeals');\r\n\r\n\r\n        var OpenedDealRowViewModel = general.extendClass(KoComponentViewModel, function OpenedDealRowViewModelClass(params) {\r\n            var self = this,\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = parent.Data,\r\n                subscribers = [],\r\n                quotesVM = new QuotesSubscriber(),\r\n                selection = stateObject.get('selection'),\r\n                availableSelection = stateObject.get('availableSelection'),\r\n                _deal = dealsManager.Deals.Container[params.orderID];\r\n\r\n            function init(settings) {\r\n                parent.init.call(self, settings);\r\n    \r\n                setRowData();\r\n                registerToDispatcher();\r\n                setSubscribers();\r\n            }\r\n\r\n            function setRowData() {\r\n                data.orderID = _deal.orderID;\r\n                data.positionNumber = _deal.positionNumber;\r\n                data.instrumentID = _deal.instrumentID;\r\n                data.orderDir = _deal.orderDir;\r\n                data.exeTime = _deal.exeTime;\r\n                data.dealAmount = _deal.orderDir == eOrderDir.Sell ? _deal.sellAmount : _deal.buyAmount;\r\n                data.dealType = _deal.dealType;\r\n\r\n                data.buyAmount = _deal.buyAmount;\r\n                data.buySymbolID = _deal.buySymbolID;\r\n                data.sellAmount = _deal.sellAmount;\r\n                data.sellSymbolID = _deal.sellSymbolID;\r\n\r\n                data.orderRate = _deal.orderRate;\r\n\r\n                data.typeSL = dictionary.GetItem(\"limtype1_short\");\r\n                data.typeTP = dictionary.GetItem(\"limtype2_short\");\r\n                data.isStock = instrumentsManager.IsInstrumentStock(_deal.instrumentID);\r\n                data.valueDate = getValueDate(_deal);\r\n                if (!data.valueDate.isValueDateEmpty && general.isFunctionType(params.UpdateVdColumnVisibility)) {\r\n                    params.UpdateVdColumnVisibility(true);\r\n                }\r\n\r\n                setObservables();\r\n                setComputables();\r\n\r\n                updateQuoteValue();\r\n            }\r\n\r\n            function setObservables() {\r\n                data.isChecked = ko.observable(selection.indexOf(data.orderID) !== -1);\r\n                data.quoteIsActive = ko.observable(false);\r\n                // data.OnCloseDealEnable = ko.observable(true);\r\n                // data.ThisDealSwipe = ko.observable(true);\r\n                data.hasAdditionalPL = ko.observable(Number(_deal.additionalPL) !== 0);\r\n\r\n                data.slRate = ko.observable(_deal.slRate == 0 ? cEmptyRate : _deal.slRate);\r\n                data.tpRate = ko.observable(_deal.tpRate == 0 ? cEmptyRate : _deal.tpRate);\r\n\r\n                data.prevSpotRate = ko.observable(_deal.spotRate);\r\n                data.spotRate = ko.observable(_deal.spotRate);\r\n                data.fwPips = ko.observable(_deal.fwPips);\r\n                data.prevClosingRate = ko.observable(_deal.closingRate);\r\n                data.closingRate = ko.observable(_deal.closingRate);\r\n\r\n                data.plSign = ko.observable(Math.floor(general.toNumeric(_deal.pl)).sign());\r\n\r\n                data.pl = ko.observable(Number.toStr(_deal.pl));\r\n                data.commission = ko.observable(Number.toStr(_deal.commission));\r\n                data.spreadDiscount = ko.observable(Number.toStr(_deal.spreadDiscount));\r\n                data.spreadDiscountConverted = ko.observable( Number.toStr(_deal.spreadDiscount));\r\n\r\n                data.lastUpdate = ko.observable(quotesVM.GetQuote(_deal.instrumentID).dataTime());\r\n            }\r\n  \r\n            function setComputables() {\r\n                data.closeDealRate = ko.computed(function () {\r\n                    return data.closingRate() ?\r\n                        data.closingRate().substring(0, data.closingRate().length - 2) : '0.';\r\n                });\r\n            \r\n                data.closeDealRatePips = ko.computed(function () {\r\n                    return data.closingRate() ?\r\n                        data.closingRate().substring(data.closingRate().length - 2, data.closingRate().length) : '00';\r\n                });\r\n\r\n                data.grosspl = ko.computed(function () {\r\n                    if (params.QuoteForAccountCcyToUsdCcy() &&\r\n                        customer.prop.selectedCcyId() !== customer.prop.baseCcyId()) {\r\n                        var spreadDiscount = AmountConverter.Convert(\r\n                                general.toNumeric(data.spreadDiscount()),\r\n                                params.QuoteForAccountCcyToUsdCcy()\r\n                            );\r\n\r\n                        data.spreadDiscountConverted(!general.isStringType(spreadDiscount) ?\r\n                            Number.toStr(spreadDiscount.toFixed(2)) : spreadDiscount);\r\n                    }\r\n\r\n                    var discount = general.toNumeric(data.spreadDiscountConverted()) === 0 ?\r\n                        general.toNumeric(data.commission()) : -general.toNumeric(data.spreadDiscountConverted());\r\n\r\n                    var grossPl = general.toNumeric(data.pl()) + discount;\r\n        \r\n                    return grossPl.toFixed(2);\r\n                });\r\n\r\n                data.adj = ko.computed(function () {\r\n                    if (customer.prop.dealPermit == eDealPermit.Islamic) {\r\n                        return false;\r\n                    }\r\n\r\n                    if (_deal.valueDate.length === 0) {\r\n                        return true;\r\n                    }\r\n\r\n                    return _deal.positionNumber != _deal.orderID;\r\n                });\r\n            }\r\n\r\n            function registerToDispatcher() {\r\n                dealsManager.OnDealsChange.Add(onDealsChange);\r\n                dealsManager.OnDealsPLChange.Add(onDealsPLChange);\r\n                quotesManager.OnChange.Add(updateQuoteValue);\r\n            }\r\n\r\n            function setSubscribers() {\r\n                self.subscribeTo(data.isChecked, function (checked) {\r\n                    if (!data.quoteIsActive()) {\r\n                        return;\r\n                    }\r\n                    if (checked) {\r\n                        if (selection.indexOf(data.orderID) === -1) {\r\n                            selection.push(data.orderID);\r\n                        }\r\n                    } else {\r\n                        selection.remove(data.orderID);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(selection, function (selectionArr) {\r\n                    data.isChecked(selectionArr.indexOf(data.orderID) !== -1);\r\n                });\r\n            }\r\n\r\n            function onDealsChange(items) {\r\n                if (!general.isNullOrUndefined(items) &&\r\n                    (items.editedItems.indexOf(data.orderID) !== -1)) {\r\n                    updateData(dealsManager.Deals.Container[data.orderID]);\r\n                }\r\n            }\r\n\r\n            function onDealsPLChange(changes) {\r\n                var deal = changes.dealsObj[data.orderID];\r\n\r\n                if (deal) {\r\n                    updateData(deal);\r\n                }\r\n            }\r\n\r\n            function updateData(deal) {\r\n                data.prevSpotRate(data.spotRate());\r\n                data.spotRate(deal.spotRate);\r\n                data.fwPips(deal.fwPips);\r\n                data.prevClosingRate(data.closingRate());\r\n                data.closingRate(deal.closingRate);\r\n                data.pl(deal.pl);\r\n                data.plSign(Math.floor(general.toNumeric(deal.pl)).sign());\r\n                data.lastUpdate(quotesVM.GetQuote(deal.instrumentID).dataTime());\r\n                data.commission(deal.commission);\r\n                data.slRate(deal.slRate == 0 ? cEmptyRate : deal.slRate);\r\n                data.tpRate(deal.tpRate == 0 ? cEmptyRate : deal.tpRate);\r\n                data.hasAdditionalPL(Number(_deal.additionalPL) !== 0);\r\n            }\r\n\r\n            function updateQuoteValue() {\r\n                var quote = quotesManager.Quotes.GetItem(data.instrumentID),\r\n                    deal = dealsManager.Deals.Container[data.orderID];\r\n\r\n                if (quote && deal) {\r\n                    data.quoteIsActive(quote.isActive());\r\n                    if ((availableSelection.indexOf(data.orderID) === -1) && quote.isActive()) {\r\n                        availableSelection.push(data.orderID);\r\n                    }\r\n\r\n                    if (!quote.isActive() && availableSelection.indexOf(data.orderID) !== -1) {\r\n                        availableSelection.remove(data.orderID);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function getValueDate(deal) {\r\n                var instrument = instrumentsManager.GetInstrument(deal.instrumentID);\r\n                \r\n                if (instrument.isShare ){\r\n                    var corporateActionDate = instrument.getCorporateActionDate();\r\n                    if (corporateActionDate)\r\n                        if (deal.valueDate)\r\n                            return {\r\n                                isValueDateEmpty: false,\r\n                                date: general.str2Date(deal.valueDate, 'd/m/y H:M') < general.str2Date(corporateActionDate, 'd/m/y H:M') ? deal.valueDate : corporateActionDate };\r\n                        else\r\n                            return {\r\n                                isValueDateEmpty: true,\r\n                                date: corporateActionDate };\r\n                }\r\n            \r\n                if (deal.valueDate) {\r\n                    return {\r\n                        isValueDateEmpty: false,\r\n                        date: deal.valueDate\r\n                    };\r\n                } else {\r\n                    return {\r\n                        isValueDateEmpty: true,\r\n                        date: null\r\n                    };\r\n                }\r\n            }\r\n\r\n            function closeDeal() {\r\n                if (!data.quoteIsActive() ||\r\n                    $statesManager.States.IsMarketClosed() ||\r\n                    !window.componentsLoaded() ||\r\n                    printExportManager.IsWorkingNow()) {\r\n                    return;\r\n                }\r\n                var revisedSlip = customer.HasAbTestConfig(eAbTestProps.dealSlipsRevised),\r\n                    dialogClass = 'deal-slip' + (revisedSlip ? ' revised-slip' : ' closeDeal'),\r\n                    dialogTitle = !revisedSlip ? (Dictionary.GetItem('CloseDealRequest', 'dialogsTitles', ' ') + ':') : '';\r\n\r\n                DialogViewModel.open(eDialog.CloseDeal,\r\n                    {\r\n                        title: dialogTitle,\r\n                        customTitle: 'CloseDealPosNum',\r\n                        width: 555,\r\n                        persistent: false,\r\n                        dialogClass: dialogClass\r\n                    },\r\n                    eViewTypes.vCloseDeal,\r\n                    {\r\n                        orderId: data.orderID,\r\n                        isStartNavigator: false\r\n                    }\r\n                );\r\n            }\r\n\r\n            function getSlTpDialogTitle(limitType, revisedDealSlip) {\r\n                if (revisedDealSlip) {\r\n                    return  '';\r\n                }\r\n\r\n                var contentKey = limitType === eLimitType.StopLoss ?\r\n                    (!general.isNumber(data.slRate()) || data.slRate() == 0 ? 'AddStopLossTitle' : 'UpdateRemoveStopLossTitle') :\r\n                    (!general.isNumber(data.tpRate()) || data.tpRate() == 0 ? 'AddTakeProfitTitle' : 'UpdateRemoveTakeProfitTitle');\r\n                \r\n                return dictionary.GetItem(contentKey, 'dialogsTitles');\r\n            }\r\n\r\n            function openSlTpDialog(limitType) {\r\n                var revisedSlip = customer.HasAbTestConfig(eAbTestProps.dealSlipsRevised),\r\n                    dialogClass = 'deal-slip' + (revisedSlip ? ' revised-slip' : ' editLimits'),\r\n                    dialogTitle = getSlTpDialogTitle(limitType, revisedSlip);\r\n\r\n                DialogViewModel.open(eDialog.EditClosingLimit,\r\n                    {\r\n                        title: dialogTitle,\r\n                        customTitle: 'EditClosingLimitHeader',\r\n                        width: 700,\r\n                        persistent: false,\r\n                        dialogClass: dialogClass\r\n                    }, eViewTypes.vEditClosingLimit,\r\n                    {\r\n                        orderId: data.orderID,\r\n                        limitType: limitType,\r\n                        isStartNavigator: false\r\n                    });\r\n            }\r\n\r\n            function dispose() {\r\n                subscribers.forEach(function (subscriber) {\r\n                    subscriber.dispose();\r\n                });\r\n\r\n                parent.dispose.call(self);\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Data: data,\r\n                CloseDeal: closeDeal,\r\n                openSlTpDialog: openSlTpDialog\r\n            };\r\n        });\r\n\r\n        var createViewModel = function (params) {\r\n            var viewModel = new OpenedDealRowViewModel(params);\r\n\r\n            viewModel.init();\r\n\r\n            return viewModel;\r\n        };\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            }\r\n        };\r\n    }\r\n);",
  "isBase64": false
}