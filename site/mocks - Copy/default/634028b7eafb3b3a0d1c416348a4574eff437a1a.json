{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/Deals/BaseMarketInfoToolViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/Deals/BaseMarketInfoToolViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'initdatamanagers/InstrumentsManager',\r\n        'initdatamanagers/Customer',\r\n        'managers/CustomerProfileManager',\r\n        'dataaccess/dalInstruments',\r\n        'dataaccess/dalCustomerProfile',\r\n        'FxNet/LogicLayer/Deal/SentimentsConnManager',\r\n        'StateObject!Transaction',\r\n        'StateObject!SentimentsConnManager'\r\n    ],\r\n    function BaseMarketInfoToolDef(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            instrumentsManager = require('initdatamanagers/InstrumentsManager'),\r\n            customer = require('initdatamanagers/Customer'),\r\n            customerProfileManager = require('managers/CustomerProfileManager'),\r\n            dalInstruments = require('dataaccess/dalInstruments'),\r\n            dalCustomerProfile = require('dataaccess/dalCustomerProfile'),\r\n            SentimentsConnManager = require('FxNet/LogicLayer/Deal/SentimentsConnManager'),\r\n            stateObject = require('StateObject!Transaction'),\r\n            SentimentsConnManagerStateObject = require('StateObject!SentimentsConnManager');\r\n\r\n        var BaseMarketInfoToolViewModel = general.extendClass(KoComponentViewModel, function BaseMarketInfoToolClass() {\r\n            var self = this,\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = this.Data, // inherited from KoComponentViewModel\r\n                newDealData = stateObject.getAll(),\r\n                fakeMessageTimer = 0;\r\n\r\n            function init(settings) {\r\n                parent.init.call(self, settings);   // inherited from KoComponentViewModel\r\n\r\n                setObservables();\r\n                setComputables();\r\n                setSubscribers();\r\n\r\n                var currentInstrumentId = ko.utils.unwrapObservable(newDealData.selectedInstrument);\r\n\r\n                SentimentsConnManager.SetMessageReceivedCallback(onMessageReceived);\r\n\r\n                setTimeout(subscribeToTradingService.bind(self, currentInstrumentId));\r\n            }\r\n\r\n            function onMessageReceived(eventMessage) {\r\n                // cancel any fake message\r\n                if (fakeMessageTimer) {\r\n                    clearTimeout(fakeMessageTimer);\r\n                    fakeMessageTimer = 0;\r\n                }\r\n\r\n                var risePercent,\r\n                    fallPercent;\r\n\r\n                if (eventMessage && !general.isNullOrUndefined(eventMessage.PercentLong)) {\r\n                    risePercent = general.toNumeric(eventMessage.PercentLong);\r\n                    fallPercent = 100 - risePercent;\r\n                    data.risePercent(risePercent / 100);\r\n                    data.fallPercent(fallPercent / 100);\r\n                    data.riseValue(Math.round(risePercent));\r\n                    data.fallValue(Math.round(fallPercent));\r\n                    data.hasData(true);\r\n                }\r\n                else {\r\n                    data.hasData(false);\r\n                }\r\n            }\r\n\r\n            function viewSentimentsButtonHandler() {\r\n                var profileCustomer = customerProfileManager.ProfileCustomer();\r\n\r\n                profileCustomer.viewSentimentsDisclaimerClicked = new Date().toUTCString();\r\n                dalCustomerProfile.SaveSentimentsToProfileWebMobile({ ViewSentimentsDisclaimerClicked: new Date().toUTCString() });\r\n            }\r\n\r\n            function sendFakeMessage() {\r\n                if (fakeMessageTimer) {\r\n                    clearTimeout(fakeMessageTimer);\r\n                    fakeMessageTimer = 0;\r\n                }\r\n\r\n                fakeMessageTimer = setTimeout(onMessageReceived, 400); // in case no message is received, show 50/50 after 250ms\r\n            }\r\n\r\n            function subscribeToTradingService(instrumentId) {\r\n                if (instrumentId) {\r\n                    sendFakeMessage();\r\n                    SentimentsConnManager.Subscribe(customer.prop.brokerID, instrumentId);\r\n                }\r\n            }\r\n\r\n            function unsubscribeFromTradingService(instrumentId) {\r\n                if (instrumentId) {\r\n                    SentimentsConnManager.Unsubscribe(customer.prop.brokerID, instrumentId);\r\n                }\r\n            }\r\n\r\n            function setObservables() {\r\n                data.hasData = ko.observable(false);\r\n                data.risePercent = ko.observable(\"\");\r\n                data.fallPercent = ko.observable(\"\");\r\n                data.riseValue = ko.observable(\"\");\r\n                data.fallValue = ko.observable(\"\");\r\n                data.overnightFinancingTimeGMT = ko.observable(\"\");\r\n                data.OfCalculationTimeGMT = ko.observable();\r\n                data.displayTradingSentimentsFirstView = ko.observable(general.isEmptyType(customerProfileManager.ProfileCustomer().viewSentimentsDisclaimerClicked));\r\n            }\r\n\r\n            function setSubscribers() {\r\n                self.subscribeTo(newDealData.selectedInstrument, function (previousInstrumentId) {\r\n                    if (previousInstrumentId) {\r\n                        unsubscribeFromTradingService(previousInstrumentId);\r\n                    }\r\n                }, null, \"beforeChange\");\r\n\r\n                self.subscribeTo(newDealData.selectedInstrument, function (instrumentId) {\r\n                    subscribeToTradingService(instrumentId);\r\n                });\r\n            }\r\n\r\n            function setComputables() {\r\n                data.displayTradingSentiments = self.createComputed(function () {\r\n                    return data.hasData() && SentimentsConnManagerStateObject.get('IsServiceAvailable');\r\n                });\r\n\r\n                data.change = self.createComputed(function () {\r\n                    var currentSell = newDealData.bid(),\r\n                        previousCloseSell = newDealData.close();\r\n\r\n                    return Format.toRate(currentSell - previousCloseSell, true, newDealData.selectedInstrument());\r\n                });\r\n\r\n                data.OfCalculationTimeGMT = self.createComputed(function () {\r\n                    var instrument = instrumentsManager.GetInstrument(newDealData.selectedInstrument()),\r\n                        scheduleGroupGMTCloseTime,\r\n                        GMTCloseTime;\r\n\r\n                    dalInstruments.GetScheduleGroup(instrument.id).then(function (result) {\r\n                        scheduleGroupGMTCloseTime = result[0].GMTCloseTime;\r\n                        GMTCloseTime = scheduleGroupGMTCloseTime.split(\" \")[1];\r\n                        data.overnightFinancingTimeGMT(GMTCloseTime);\r\n                    }).done();\r\n                }, self, false);\r\n            }\r\n\r\n            function dispose() {\r\n                unsubscribeFromTradingService(newDealData.selectedInstrument());\r\n                parent.dispose.call(self);\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                NewDealData: newDealData,\r\n                ViewSentimentsButtonHandler: viewSentimentsButtonHandler\r\n            };\r\n        });\r\n\r\n        return BaseMarketInfoToolViewModel;\r\n    }\r\n);",
  "isBase64": false
}