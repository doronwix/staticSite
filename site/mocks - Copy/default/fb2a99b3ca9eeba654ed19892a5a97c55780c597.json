{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/logiclayer/userflows/UserFlowBroker1.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿/* globals eUploadDocumentType, eUploadDocumentStatus , eUserFlowSteps, eUserStatus, eStepStatus*/\r\ndefine('userflow/UserFlowBroker1',\r\n    [\r\n        'require',\r\n        'devicemanagers/StatesManager',\r\n        'initdatamanagers/Customer',\r\n        'modules/UserFlowCommon',\r\n        'StateObject!userFlow',\r\n    ],\r\n    function (require) {\r\n        var StatesManager = require('devicemanagers/StatesManager'),\r\n            customer = require('initdatamanagers/Customer'),\r\n            commonFlow = require('modules/UserFlowCommon');\r\n\r\n        var tradingBonusFolder = 166,\r\n            maxDaysCounter = 30,\r\n            extendedMaxDaysCounter = 60;\r\n\r\n        var SMState = StatesManager.States,\r\n            userFlowStepsStatuses,\r\n            userStatus,\r\n            userMessage,\r\n            currentStep,\r\n            ctaText,\r\n            cta,\r\n            activationRequired = false,\r\n            isCDDRestricted = false,\r\n            isCtaButtonEnabled = true,\r\n            remainingDaysUpdateMsg = 'daysCounterMsg';\r\n\r\n        function computeFlow() {\r\n            if (!commonFlow.isReady()) {\r\n                return commonFlow.EMPTY_USER_FLOW;\r\n            }\r\n\r\n            var daysCounter = -1,\r\n                generalInfoComplete,\r\n                accountFundedOrRestricted,\r\n                AMLStatus = SMState.AmlStatus(),\r\n                CDDStatus = SMState.CddStatus(),\r\n                DOCPoid = SMState.docProofOfID(),\r\n                DOCPores = SMState.docProofOfResidence(),\r\n                DOCWaiting = DOCPoid === eUploadDocumentStatus.AwaitingDocument || DOCPores === eUploadDocumentStatus.AwaitingDocument,\r\n                DOCNotIncomplete = DOCPoid !== eUploadDocumentStatus.Incomplete && DOCPores !== eUploadDocumentStatus.Incomplete,\r\n                CANTrade = AMLStatus !== eAMLStatus.Restricted && !commonFlow.isFraud() && commonFlow.isOnlineTrading(),\r\n                CANDeposit = !commonFlow.isMinDepositGroupBlocked() && !commonFlow.isFraud(),\r\n                DIDDeposit = SMState.IsActive() && SMState.Folder() !== tradingBonusFolder,\r\n                NeedCDD = SMState.CddStatus() === eCDDStatus.NotComplete,\r\n                specificStatus = {\r\n                    generalInfo: CDDStatus === eCDDStatus.Complete ? eStepStatus.Complete : eStepStatus.Available,\r\n                    fundAccount: CDDStatus === eCDDStatus.Complete && DIDDeposit ? eStepStatus.Complete : eStepStatus.Available\r\n                },\r\n                cddRenewalCountdown = SMState.CDDRenewalCountdown(),\r\n                UploadDocumentsAfterFirstDepositCountdown = SMState.UploadDocumentsAfterFirstDepositCountdown(),\r\n                countdownCta,\r\n                isCddCounterVisible;\r\n\r\n            isCDDRestricted = SMState.IsCDDRestricted();\r\n\r\n            function restrictedDocumentsCheck() {\r\n                if (DOCWaiting && DOCNotIncomplete) {\r\n                    userMessage = 'restricted_uploadDocuments';\r\n                    userFlowStepsStatuses[eUserFlowSteps.ProofOfIdentity] = eStepStatus.Available;\r\n                    ctaText = 'uploadDocuments';\r\n                    cta = eCta.UploadDocuments;\r\n                }\r\n            }\r\n\r\n            function restrictedAccountFlow() {\r\n                currentStep = eUserFlowSteps.None;\r\n                userStatus = eUserStatus.Restricted;\r\n                userMessage = 'contactUs';\r\n                cta = eCta.ContactUs;\r\n                ctaText = 'contactUs';\r\n\r\n                userFlowStepsStatuses = [\r\n                    eStepStatus.Complete, specificStatus.generalInfo, eStepStatus.Hidden,\r\n                    eStepStatus.Available, specificStatus.fundAccount, eStepStatus.Restricted\r\n                ];\r\n                restrictedDocumentsCheck();\r\n            }\r\n\r\n            if (customer.prop.isSeamless) {\r\n                userStatus = eUserStatus.NotActivated;\r\n                userMessage = 'registerToStartTarde';\r\n                currentStep = eUserFlowSteps.OpenedAnAccount;\r\n                cta = eCta.Seamless;\r\n                ctaText = 'registerNow';\r\n                userFlowStepsStatuses = [\r\n                    eStepStatus.Seamless, eStepStatus.NotActive, eStepStatus.Hidden,\r\n                    eStepStatus.NotActive, eStepStatus.NotActive, eStepStatus.NotActive\r\n                ];\r\n            }\r\n            else if (CANDeposit) {\r\n                if (DIDDeposit) {\r\n                    if (NeedCDD) {\r\n                        currentStep = eUserFlowSteps.GeneralInforamtionQuestionnaire;\r\n                        userStatus = eUserStatus.NotActivated;\r\n                        userMessage = 'completeQuestionnaire';\r\n                        ctaText = 'goToQuestionnaire';\r\n                        cta = eCta.ClientQuestionnaire;\r\n\r\n                        userFlowStepsStatuses = [\r\n                            eStepStatus.Complete, eStepStatus.Available, eStepStatus.Hidden,\r\n                            eStepStatus.NotActive, eStepStatus.Complete, eStepStatus.NotActive\r\n                        ];\r\n\r\n                        if (AMLStatus === eAMLStatus.Unverified) { // NOT ACTIVATED 4\r\n                            userMessage = 'toDealCompleteQuestionnaire';\r\n                        }\r\n\r\n                        if (isCDDRestricted) {\r\n                            isCtaButtonEnabled = false;\r\n                        }\r\n                    }\r\n                    else if (CANTrade) {\r\n                        currentStep = eUserFlowSteps.None;\r\n                        userStatus = eUserStatus.ActiveLimited;\r\n                        userMessage = 'trading_fixDocuments';\r\n                        ctaText = 'contactUs';\r\n                        cta = eCta.ContactUs;\r\n\r\n                        userFlowStepsStatuses = [\r\n                            eStepStatus.Complete, eStepStatus.Complete, eStepStatus.Hidden,\r\n                            eStepStatus.Available, eStepStatus.Complete, eStepStatus.Complete\r\n                        ];\r\n\r\n                        if (AMLStatus === eAMLStatus.Approved) { //L7\r\n                            userStatus = eUserStatus.Active;\r\n                            userMessage = 'enjoyTrading';\r\n                            ctaText = '';\r\n                            cta = eCta.None;\r\n                            userFlowStepsStatuses[eUserFlowSteps.ProofOfIdentity] = eStepStatus.Complete;\r\n\r\n                            if (cddRenewalCountdown >= 0 && cddRenewalCountdown <= extendedMaxDaysCounter) {\r\n                                userStatus = eUserStatus.ActiveLimited;\r\n                                userMessage = 'questionaire_require_update';\r\n                                ctaText = 'goToQuestionnaire';\r\n                                cta = eCta.ClientQuestionnaire;\r\n                                remainingDaysUpdateMsg = 'daysCounterCDDMsg';\r\n                                isCddCounterVisible = true;\r\n                                daysCounter = cddRenewalCountdown;\r\n                                countdownCta = eCta.ClientQuestionnaire;\r\n                            }\r\n                        }\r\n                        else if (DOCPoid !== eUploadDocumentStatus.Incomplete &&\r\n                            DOCPores !== eUploadDocumentStatus.Incomplete &&\r\n                            (DOCPoid === eUploadDocumentStatus.AwaitingDocument ||\r\n                                DOCPores === eUploadDocumentStatus.AwaitingDocument)) {\r\n                            userMessage = 'trading_fixRestrictions';\r\n                            ctaText = 'uploadDocuments';\r\n                            cta = eCta.UploadDocuments;\r\n                        }\r\n                    }\r\n                    else {\r\n                        restrictedAccountFlow(); //L12 L13\r\n                    }\r\n                }\r\n                else if (CANTrade) { // NOT ACTIVATED (1) OR READY TO TRADE\r\n                    userStatus = NeedCDD ? eUserStatus.NotActivated : eUserStatus.ReadyToTrade;\r\n                    userMessage = 'simplyFund';\r\n                    currentStep = eUserFlowSteps.FundYourAccount;\r\n                    cta = eCta.Deposit;\r\n                    ctaText = \"fundTxt\";\r\n\r\n                    userFlowStepsStatuses = [\r\n                        eStepStatus.Complete, eStepStatus.NotActive, eStepStatus.Hidden,\r\n                        eStepStatus.NotActive, eStepStatus.Available, eStepStatus.NotActive\r\n                    ];\r\n                }\r\n                else {\r\n                    restrictedAccountFlow(); //L12 L13\r\n                }\r\n            }\r\n            else {\r\n                if (CANTrade) { //L11 RESTRICTED\r\n                    currentStep = eUserFlowSteps.None;\r\n                    userStatus = eUserStatus.Restricted;\r\n                    userMessage = 'contactUs';\r\n                    cta = eCta.ContactUs;\r\n                    ctaText = 'contactUs';\r\n\r\n                    userFlowStepsStatuses = [\r\n                        eStepStatus.Complete, specificStatus.generalInfo, eStepStatus.Hidden,\r\n                        eStepStatus.NotActive, eStepStatus.Restricted, eStepStatus.NotActive\r\n                    ];\r\n\r\n                    restrictedDocumentsCheck();\r\n                }\r\n                else { //L15 LOCKED\r\n                    currentStep = eUserFlowSteps.None;\r\n                    userStatus = eUserStatus.Locked;\r\n                    userMessage = 'contactComplianceActivation';\r\n                    cta = eCta.ContactUs;\r\n                    ctaText = 'contactUs';\r\n\r\n                    userFlowStepsStatuses = [\r\n                        eStepStatus.Complete, specificStatus.generalInfo, eStepStatus.Hidden,\r\n                        eStepStatus.Available, specificStatus.fundAccount, eStepStatus.Restricted\r\n                    ];\r\n\r\n                    if (DOCWaiting && DOCNotIncomplete) {//L14\r\n                        userFlowStepsStatuses[eUserFlowSteps.ProofOfIdentity] = eStepStatus.Available;\r\n                    }\r\n                }\r\n            }\r\n\r\n            generalInfoComplete = userFlowStepsStatuses[eUserFlowSteps.GeneralInforamtionQuestionnaire] === eStepStatus.Complete;\r\n            accountFundedOrRestricted = [eStepStatus.Complete, eStepStatus.Restricted].contains(userFlowStepsStatuses[eUserFlowSteps.FundYourAccount]);\r\n\r\n            if (generalInfoComplete && accountFundedOrRestricted && AMLStatus === eAMLStatus.Approved) {\r\n                userFlowStepsStatuses[eUserFlowSteps.ProofOfIdentity] = eStepStatus.Complete;\r\n            }\r\n\r\n            if (!SMState.IsCddOrKycRequired()) {\r\n                userFlowStepsStatuses[eUserFlowSteps.GeneralInforamtionQuestionnaire] = eStepStatus.Hidden;\r\n            }\r\n\r\n            userFlowStepsStatuses[eUserFlowSteps.TradingKnowledgeQuiz] = eStepStatus.Hidden;\r\n            activationRequired = !(SMState.IsActive() || customer.prop.customerType === eCustomerType.TradingBonus) && !customer.prop.isDemo;\r\n\r\n            var isUploadDocsCountdownVisible = userStatus !== eUserStatus.Locked &&\r\n                SMState.AmlStatus() === eAMLStatus.Pending &&\r\n                UploadDocumentsAfterFirstDepositCountdown &&\r\n                UploadDocumentsAfterFirstDepositCountdown > -1;\r\n\r\n            if (!isCddCounterVisible && isUploadDocsCountdownVisible) {\r\n                daysCounter = UploadDocumentsAfterFirstDepositCountdown;\r\n                countdownCta = eCta.UploadDocuments;\r\n            }\r\n\r\n            return {\r\n                documentProofOfResidenceStatus: SMState.docProofOfResidence(),\r\n                documentProofOfIDStatus: SMState.docProofOfID(),\r\n                currentStep: currentStep,\r\n                userStatus: userStatus,\r\n                userMessage: userMessage,\r\n                daysCounter: daysCounter,\r\n                maxDaysCounter: maxDaysCounter,\r\n                ctaText: ctaText,\r\n                cta: cta,\r\n                userFlowStepsStatuses: userFlowStepsStatuses,\r\n                activationRequired: activationRequired,\r\n                isCDDRestricted: isCDDRestricted,\r\n                isCtaButtonEnabled: isCtaButtonEnabled,\r\n                remainingDaysUpdateMsg: remainingDaysUpdateMsg,\r\n                countdownCta: countdownCta\r\n            };\r\n        }\r\n\r\n        return computeFlow;\r\n    }\r\n);\r\n",
  "isBase64": false
}