{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/modules/NewPriceAlertModule.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\"modules/NewPriceAlertModule\", [\r\n\t\"require\",\r\n\t\"knockout\",\r\n\t\"handlers/general\",\r\n\t\"Q\",\r\n\t\"dataaccess/dalorder\",\r\n\t\"devicemanagers/ViewModelsManager\",\r\n\t\"initdatamanagers/Customer\",\r\n\t\"managers/CustomerProfileManager\",\r\n\t\"modules/permissionsmodule\",\r\n\t\"initdatamanagers/InstrumentsManager\",\r\n\t\"devicemanagers/StatesManager\",\r\n\t\"viewmodels/Limits/AmountFieldsWrapper\",\r\n\t\"viewmodels/Limits/LimitBaseViewModel\",\r\n\t\"StateObject!Transaction\",\r\n\t\"handlers/limit\",\r\n\t\"modules/environmentData\",\r\n], function NewPriceAlerModuletDefault(require) {\r\n\tvar ko = require(\"knockout\"),\r\n\t\tgeneral = require(\"handlers/general\"),\r\n\t\tQ = require(\"Q\"),\r\n\t\tdalOrders = require(\"dataaccess/dalorder\"),\r\n\t\tcustomer = require(\"initdatamanagers/Customer\"),\r\n\t\tcustomerProfileManager = require(\"managers/CustomerProfileManager\"),\r\n\t\tpermissionsModule = require(\"modules/permissionsmodule\"),\r\n\t\tinstrumentsManager = require(\"initdatamanagers/InstrumentsManager\"),\r\n\t\tstatesManager = require(\"devicemanagers/StatesManager\"),\r\n\t\tLimitBaseViewModel = require(\"viewmodels/Limits/LimitBaseViewModel\"),\r\n\t\tstateObject = require(\"StateObject!Transaction\"),\r\n\t\tLimitValuesCalculator = require(\"calculators/LimitValuesCalculator\"),\r\n\t\tlimit = require(\"handlers/limit\"),\r\n\t\tenvironmentData = require(\"modules/environmentData\").get();\r\n\r\n\tvar NewPriceAlertModule = general.extendClass(LimitBaseViewModel, function NewPriceAlertModuleClass() {\r\n\t\tvar self = this,\r\n\t\t\tparent = this.parent,\r\n\t\t\tdata = this.Data,\r\n\t\t\tbaseOrder = parent.BaseOrder,\r\n\t\t\tselectedInstrumentWrapper,\r\n\t\t\tlastSubmit = 0;\r\n\r\n\t\tfunction init(customSettings) {\r\n\t\t\tif (!stateObject.containsKey(\"stateObjectIsReadyDefer\")) {\r\n\t\t\t\tstateObject.set(\"stateObjectIsReadyDefer\", Q.defer());\r\n\t\t\t}\r\n\r\n\t\t\tsetObservables();\r\n\t\t\tparent.init.call(self, customSettings);\r\n\t\t\tsetValidators();\r\n\t\t\tsetComputables();\r\n\t\t\tsetSubscribers();\r\n\t\t\tparent.registerToDispatcher();\r\n\t\t\tstateObject.get(\"stateObjectIsReadyDefer\").resolve();\r\n\t\t\tdata.showTools(false);\r\n\t\t\tdata.orderDir(eOrderDir.Buy);\r\n\t\t}\r\n\r\n\t\tfunction setObservables() {\r\n\t\t\tdata.showLimits = ko\r\n\t\t\t\t.observable(customerProfileManager.ProfileCustomer().newLimitOrders === 1)\r\n\t\t\t\t.extend({ notify: \"always\" });\r\n\t\t\tdata.showLimitsSlideCompleted = ko.observable(false);\r\n\t\t\tdata.toggleLimitsSection = function () {\r\n\t\t\t\tvar currentValue = !!data.showLimits();\r\n\r\n\t\t\t\tdata.showLimits(!currentValue);\r\n\t\t\t};\r\n\t\t\tdata.priceAlertExist = ko.observable(false);\r\n\t\t\tdata.priceAlertExceedAmount = ko.observable(false);\r\n\t\t\tdata.percentageFromMarketRate = ko.observable();\r\n\t\t}\r\n\r\n\t\tfunction setComputables() {\r\n\t\t\tself.parent.subscribeTo(data.openLimit, self.updateDistances);\r\n\r\n\t\t\tdata.showForexNonIslamicDealInfo = self.createComputed(function () {\r\n\t\t\t\treturn data.isForex() && customer.prop.dealPermit !== eDealPermit.Islamic;\r\n\t\t\t});\r\n\r\n\t\t\tdata.OrderButtonEnabled = self.createComputed(function () {\r\n\t\t\t\tvar isValidInstrument = data.selectedInstrument.isValid(),\r\n\t\t\t\t\tviewModelReady = data.hasInstrument() && data.quotesAvailable(),\r\n\t\t\t\t\tisActiveQuote = data.isActiveQuote(),\r\n\t\t\t\t\tisBrokerAllowLimitsOnNoRates = customer.prop.brokerAllowLimitsOnNoRates,\r\n\t\t\t\t\tisOrderDirSelected = data.isShowBuyBox() || data.isShowSellBox(),\r\n\t\t\t\t\thasDealMinMaxAmounts = data.dealMinMaxAmounts().length > 0;\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t\tdata.openLimit.isValid() &&\r\n\t\t\t\t\t!data.isProcessing() &&\r\n\t\t\t\t\t(isBrokerAllowLimitsOnNoRates || isActiveQuote) &&\r\n\t\t\t\t\tisOrderDirSelected &&\r\n\t\t\t\t\tisValidInstrument &&\r\n\t\t\t\t\tviewModelReady &&\r\n\t\t\t\t\thasDealMinMaxAmounts\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\t\tselectedInstrumentWrapper = self.createComputed(function () {\r\n\t\t\t\treturn data.selectedInstrument();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction setSubscribers() {\r\n\t\t\tself.subscribeAndNotify(selectedInstrumentWrapper, function (instrumentId) {\r\n\t\t\t\tvar instrument = instrumentsManager.GetInstrument(instrumentId);\r\n\r\n\t\t\t\tif (instrument) {\r\n\t\t\t\t\tparent.setLimitTabsFromClientProfile();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction setValidators() {\r\n\t\t\tdata.selectedInstrument.extend({ validatable: false });\r\n\t\t\tdata.selectedInstrument.extend({\r\n\t\t\t\tvalidation: {\r\n\t\t\t\t\tvalidator: function (selectedInstrument) {\r\n\t\t\t\t\t\tvar isQuoteActive = data.isActiveQuote();\r\n\t\t\t\t\t\tvar isAllowLimits =\r\n\t\t\t\t\t\t\tcustomer.prop.brokerAllowLimitsOnNoRates ||\r\n\t\t\t\t\t\t\t(!statesManager.GetStates().IsMarketClosed() && isQuoteActive);\r\n\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\tgeneral.isEmptyValue(selectedInstrument) ||\r\n\t\t\t\t\t\t\tgeneral.isEmptyValue(isQuoteActive) ||\r\n\t\t\t\t\t\t\tisAllowLimits\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmessage: Dictionary.GetItem(\"InstrumentInactive\"),\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\tdata.selectedInstrument.extend({\r\n\t\t\t\ttooltipValidation: {\r\n\t\t\t\t\tnotify: \"always\",\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t//override\r\n\t\tvar baseUpdateDistance = parent.updateDistances;\r\n\r\n\t\tparent.updateDistances = self.updateDistances = function () {\r\n\t\t\tbaseUpdateDistance();\r\n\t\t\tif (data.openLimit()) {\r\n\t\t\t\tif (data.orderDir() === eOrderDir.Sell) {\r\n\t\t\t\t\tdata.percentageFromMarketRate(\r\n\t\t\t\t\t\tFormat.toPercent(\r\n\t\t\t\t\t\t\tLimitValuesCalculator.CalculatePercentFromRate(data.openLimit(), data.activeQuote.ask)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t} else if (data.orderDir() === eOrderDir.Buy) {\r\n\t\t\t\t\tdata.percentageFromMarketRate(\r\n\t\t\t\t\t\tFormat.toPercent(\r\n\t\t\t\t\t\t\tLimitValuesCalculator.CalculatePercentFromRate(data.openLimit(), data.activeQuote.bid)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdata.percentageFromMarketRate(\"\");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdata.percentageFromMarketRate(\"\");\r\n\t\t\t}\r\n\r\n\t\t\tif (lastSubmit != data.orderDir() + data.openLimit()) {\r\n\t\t\t\tdata.priceAlertExist(false);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfunction orderButtonHandler() {\r\n\t\t\tif (!data.OrderButtonEnabled()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (\r\n\t\t\t\t!permissionsModule.CheckActionAllowed(\"newLimit\", true, {\r\n\t\t\t\t\tregister:\r\n\t\t\t\t\t\tregisterParams.traderInstrumentId +\r\n\t\t\t\t\t\tdata.selectedInstrument() +\r\n\t\t\t\t\t\tregisterParams.traderOrderDir +\r\n\t\t\t\t\t\t(data.orderDir() === 0 ? \"Sell\" : \"Buy\"),\r\n\t\t\t\t})\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (statesManager.GetStates().fxDenied() == true) {\r\n\t\t\t\tbaseOrder.ValidateOnlineTradingUser();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (baseOrder.LimitValidateQuote(data.selectedInstrument())) {\r\n\t\t\t\tvar newLimit = new limit();\r\n\r\n\t\t\t\tparent.fillData(newLimit);\r\n\t\t\t\tnewLimit.mode = eLimitMode.PriceAlert;\r\n\t\t\t\tnewLimit.amount = 0;\r\n\r\n\t\t\t\tdata.isProcessing(true);\r\n\t\t\t\tdata.hasInstrument(false);\r\n\t\t\t\tdalOrders.AddLimit(newLimit, onPriceAlertCreate);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction onPriceAlertCreate(result, callerId, instrumentid, requestData) {\r\n\t\t\tdata.hasInstrument(true);\r\n\t\t\tdata.isProcessing(false);\r\n\r\n\t\t\tlastSubmit = data.orderDir() + data.openLimit();\r\n\r\n\t\t\tswitch (result[0].msgKey) {\r\n\t\t\t\tcase \"OrderError20\":\r\n\t\t\t\t\tko.postbox.publish(\"price-alert-error\", {\r\n\t\t\t\t\t\tmessage: environmentData.maxPriceAlertsCount + \" price alert limit reached\",\r\n\t\t\t\t\t});\r\n\t\t\t\t\tresult[0].result = eResult.Success;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"OrderError21\":\r\n\t\t\t\t\tko.postbox.publish(\"price-alert-error\", { message: \"price alert exist\" });\r\n\t\t\t\t\tdata.priceAlertExist(true);\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tcase \"OrderError22\":\r\n\t\t\t\t\tko.postbox.publish(\"price-alert-error\", { message: \"general server error\" });\r\n\t\t\t\t\tresult[0].result = eResult.Success;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"SuccessPriceAlertAdd\":\r\n\t\t\t\t\tko.postbox.publish(\"price-alert-create\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tvar instrument = instrumentsManager.GetInstrument(instrumentid);\r\n\r\n\t\t\tbaseOrder.OnActionReturn(result, callerId, instrument, {\r\n\t\t\t\tredirectToView: eForms.PriceAlerts,\r\n\t\t\t\trequestData: requestData,\r\n\t\t\t\tbackFormTarget: eForms.Quotes,\r\n\t\t\t});\r\n\r\n\t\t\tif (instrument) {\r\n\t\t\t\tinstrumentsManager.SetInstrumentDealAmount(instrumentid, instrument.defaultDealSize);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction resetChartProperties() {\r\n\t\t\tif (!stateObject.containsKey(\"openLimit\")) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tstateObject.get(\"openLimit\")(\"\");\r\n\t\t\tstateObject.unset(\"openLimit\");\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\t\t\tresetChartProperties();\r\n\r\n\t\t\tparent.dispose.call(self);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tinit: init,\r\n\t\t\tdispose: dispose,\r\n\t\t\tData: data,\r\n\t\t\tBaseOrder: baseOrder,\r\n\t\t\tOrderButtonHandler: orderButtonHandler,\r\n\t\t};\r\n\t});\r\n\r\n\treturn {\r\n\t\tViewModel: NewPriceAlertModule\r\n\t};\r\n});\r\n",
  "isBase64": false
}