{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/managers/ChartStudySettings.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'managers/ChartStudySettings',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'managers/ChartSettingManager'\r\n    ],\r\n    function ChartStudySettings(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            chartSettingManager = require('managers/ChartSettingManager'),\r\n            comparesFavorites = ko.observable([]),\r\n            indicatorsFavorites = ko.observable([]),\r\n            eChartFavorites = {\r\n                compares: 'chartComparesFavorites',\r\n                indicators: 'chartIndicatorsFavorites'\r\n            },\r\n            disposables = [];\r\n\r\n        //-------------------------------------------------------\r\n        function init() {\r\n            setObservables();\r\n            setSubscribers();\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function setObservables() {\r\n            disposables.push(comparesFavorites);\r\n            disposables.push(indicatorsFavorites);\r\n\r\n            comparesFavorites(getComparesFavorites());\r\n            indicatorsFavorites(getIndicatorsFavorites());\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function setSubscribers() {\r\n            disposables.push(comparesFavorites.subscribe(updateComparesFavorites));\r\n            disposables.push(indicatorsFavorites.subscribe(updateIndicatorFavorites));\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function getComparesFavorites() {\r\n            return getFavorites(eChartFavorites.compares);\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function getIndicatorsFavorites() {\r\n            return getFavorites(eChartFavorites.indicators);\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function getFavorites(favoriteName) {\r\n            var favorites;\r\n\r\n            if (chartSettingManager.Chart().chartFavorites) {\r\n                favorites = chartSettingManager.Chart().chartFavorites[favoriteName];\r\n            }\r\n\r\n            return favorites || [];\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function updateComparesFavorites(favorites) {\r\n            updateFavorites(eChartFavorites.compares, favorites);\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function updateIndicatorFavorites(favorites) {\r\n            updateFavorites(eChartFavorites.indicators, favorites);\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function updateFavorites(favoriteName, favorites) {\r\n            if (general.isNullOrUndefined(chartSettingManager.Chart().chartFavorites)) {\r\n                chartSettingManager.Chart().chartFavorites = {};\r\n            }\r\n\r\n            chartSettingManager.Chart().chartFavorites[favoriteName] = favorites;\r\n\r\n            chartSettingManager.SaveChart();\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function getSettings() {\r\n            return chartSettingManager.Chart().chartIndicatorsSettings;\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function setSettings(indicatorSettings) {\r\n            chartSettingManager.Chart().chartIndicatorsSettings = indicatorSettings;\r\n\r\n            chartSettingManager.SaveChart();\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function dispose() {\r\n            var disposableObject;\r\n\r\n            for (var i = 0, j = disposables.length; i < j; i++) {\r\n                disposableObject = disposables[i];\r\n\r\n                if (disposableObject &&general.isFunctionType(disposableObject.dispose)) {\r\n                    disposableObject.dispose();\r\n                }\r\n            }\r\n\r\n            disposables.length = 0;\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        return {\r\n            Init: init,\r\n            Dispose: dispose,\r\n            ComparesFavorites: comparesFavorites,\r\n            IndicatorsFavorites: indicatorsFavorites,\r\n            GetSettings: getSettings,\r\n            SetSettings: setSettings\r\n        };\r\n    }\r\n);",
  "isBase64": false
}