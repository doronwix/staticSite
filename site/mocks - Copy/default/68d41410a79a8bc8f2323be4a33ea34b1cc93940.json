{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/modules/WithdrawalCommon.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'modules/WithdrawalCommon',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'configuration/initconfiguration',\r\n        'devicemanagers/ViewModelsManager',\r\n        'initdatamanagers/SymbolsManager',\r\n        'modules/BuilderForInBetweenQuote',\r\n        'handlers/AmountConverter',\r\n        'Dictionary',\r\n        'Q',\r\n        'managers/historymanager',\r\n        'JSONHelper'\r\n    ],\r\n    function WithDrawalCommonDef(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            initConfiguration = require('configuration/initconfiguration'),\r\n            viewModelsManager = require('devicemanagers/ViewModelsManager'),\r\n            symbolsManager = require('initdatamanagers/SymbolsManager'),\r\n            BuilderForInBetweenQuote = require('modules/BuilderForInBetweenQuote'),\r\n            AmountConverter = require('handlers/AmountConverter'),\r\n            Dictionary = require('Dictionary'),\r\n            JSONHelper = require('JSONHelper'),\r\n            HistoryManager = require('managers/historymanager'),\r\n            Q = require('Q');\r\n\r\n        var WithDrawalCommon = function WithDrawalCommonClass() {\r\n            var settings = initConfiguration.WithdrawalConfiguration;\r\n\r\n            function goBack() {\r\n                HistoryManager.Back();\r\n            }\r\n\r\n            function isBackOffice() {\r\n                return !general.isEmptyValue(settings.isBackOffice) ? settings.isBackOffice : false;\r\n            }\r\n\r\n            function goToDefaultPage() {\r\n                viewModelsManager.VManager.SwitchViewVisible(settings.stepLoadFailRedirectView, {})\r\n            }\r\n\r\n            function getSymbolIdOrDefault(symboldId, currencies) {\r\n                if (currencies.length > 0) {\r\n                    var currencyAvailable = currencies.find(function (ccy) { return ccy.SymbolID === parseInt(symboldId); });\r\n                    return !general.isEmptyValue(currencyAvailable) ? symboldId : currencies[0].SymbolID;\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            function getCurrenciesFromWrapper(currenciesWrapper) {\r\n                return ko.utils.arrayMap(currenciesWrapper, function (wrap) { return { SymbolID: wrap.Value, SymbolName: symbolsManager.GetTranslatedSymbolById(wrap.Value) } });\r\n            }\r\n\r\n            function getConvertedAmmount(amount, maxAmount, defaultCurrencyId, selectedCurrencyId) {\r\n                var q = Q.defer(),\r\n                    convertToDefaultCurrency = BuilderForInBetweenQuote\r\n                        .GetInBetweenQuote(selectedCurrencyId, defaultCurrencyId)\r\n                        .then(function (response) {\r\n                            return AmountConverter.Convert(amount, response, true);\r\n                        }),\r\n                    convertToSelectedCurrency = BuilderForInBetweenQuote\r\n                        .GetInBetweenQuote(defaultCurrencyId, selectedCurrencyId)\r\n                        .then(function (response) {\r\n                            return AmountConverter.Convert(maxAmount, response, true);\r\n                        });\r\n\r\n\r\n                Q.all([convertToDefaultCurrency, convertToSelectedCurrency])\r\n                    .then(function (result) {\r\n                        var convertedAmount = result[0],\r\n                            convertedMaxAmount = result[1];\r\n\r\n                        return q.resolve({\r\n                            amount: convertedAmount,\r\n                            maxAmount: convertedMaxAmount\r\n                        });\r\n                    }, function () {\r\n                        ErrorManager.onError(\"WithdrawalCommon/CurrencyConversionFailed\", \"\", eErrorSeverity.medium);\r\n\r\n                        return q.reject(null)\r\n                    });\r\n\r\n                return q.promise;\r\n            }\r\n\r\n            function parseWSaveResponse(responseText, symbolId, saveWithdrawal) {\r\n                var response = JSONHelper.STR2JSON(\"WithdrawalViewModel/onLoadComplete\", responseText, eErrorSeverity.medium) ||\r\n                    { ResponseReturnType: null, ResponseLimit: 0 },\r\n                    fail = false,\r\n                    success = false,\r\n                    trackingEvent = null,\r\n                    alertType = AlertTypes.GeneralOkAlert,\r\n                    alertProps = {},\r\n                    alertTitle = null,\r\n                    alertContent = null,\r\n                    maxWAmount = response.hasOwnProperty('ResponseLimit') && !general.isEmptyValue(response.ResponseLimit) ?\r\n                        Number.fromStr(response.ResponseLimit.toString()) : 0;\r\n\r\n                maxWAmount = general.isNumberType(maxWAmount) && maxWAmount > 0 ? maxWAmount : 0;\r\n\r\n                switch (response.ResponseReturnType) {\r\n                    case SaveWithdrawalResponseReturnType.TradingBonusTakeoutRequired:\r\n                    case SaveWithdrawalResponseReturnType.TradingBonusTakeoutRequiredRich:\r\n                        var responseLimit = response.ResponseLimit.split(','),\r\n                            tradingBonusRequiredEquityPercent = responseLimit[1],\r\n                            maxWithdrawalWithoutBonusTakeout = responseLimit[2],\r\n                            newTradingBonus = responseLimit[3],\r\n                            currency = responseLimit[4],\r\n                            bodyText = Dictionary.GetItem(response.ResponseReturnType === SaveWithdrawalResponseReturnType.TradingBonusTakeoutRequired ?\r\n                                'MSG_WITHD_TB_TAKEOUT_MSG' : 'MSG_WITHD_TB_TAKEOUT_MSG_CASE2');\r\n\r\n                        alertType = AlertTypes.GeneralOkCancelAlert;\r\n                        alertProps = {\r\n                            okButtonCallback: function () { saveWithdrawal(true); },  // OK click handler for the second withdrawal request\r\n                            okButtonCaption: Dictionary.GetItem('proceed'),\r\n                            cancelButtonCaption: Dictionary.GetItem('cancel')\r\n                        };\r\n\r\n                        alertTitle = Dictionary.GetItem(\"MSG_WITHD_TB_TAKEOUT_MSG_TITLE\");\r\n                        alertContent = String.format(bodyText, currency, maxWithdrawalWithoutBonusTakeout, tradingBonusRequiredEquityPercent, newTradingBonus);\r\n                        break;\r\n\r\n                    case SaveWithdrawalResponseReturnType.Succeded:\r\n                        success = true;\r\n                        alertProps = { redirectToView: settings.withdrawalRequestSuccessRedirectToView, redirectToViewArgs: { showMenuButton: true, iD: response.WithdrawalID } };\r\n                        alertContent = String.format(Dictionary.GetItem(\"withdrawalSucceeded\"), response.WithdrawalID);\r\n                        trackingEvent = { type: 'trading-event', value: 'withdrawal-success' };\r\n                        break;\r\n\r\n                    case SaveWithdrawalResponseReturnType.NotPossible:\r\n                        fail = true;\r\n                        alertContent = Dictionary.GetItem('withdNotPossible');\r\n                        trackingEvent = { type: 'withdrawal-error', value: 'withdNotPossible' };\r\n                        break;\r\n\r\n                    case SaveWithdrawalResponseReturnType.EquityLimit:\r\n                        fail = true;\r\n                        alertContent = Dictionary.GetItem('withdEquityLimit');\r\n                        trackingEvent = { type: 'withdrawal-error', value: 'withdEquityLimit' };\r\n                        break;\r\n\r\n                    case SaveWithdrawalResponseReturnType.AmountLimit:\r\n                        fail = true;\r\n                        alertContent = Dictionary.GetItem('withdAmountLimit') + \" \" +\r\n                            maxWAmount.toString() + \" \" + symbolsManager.GetTranslatedSymbolById(symbolId);\r\n                        trackingEvent = { type: 'withdrawal-error', value: 'withdAmountLimit' };\r\n                        break;\r\n\r\n                    default:\r\n                        alertContent = Dictionary.GetItem('withdrawalFailed');\r\n                        trackingEvent = { type: 'withdrawal-error', value: 'withdrawalFailed' };\r\n                }\r\n\r\n                return {\r\n                    success: success,\r\n                    fail: fail,\r\n                    trackingEvent: trackingEvent,\r\n                    maxWAmount: maxWAmount,\r\n                    alertDetails: {\r\n                        type: alertType,\r\n                        props: alertProps,\r\n                        title: alertTitle,\r\n                        content: alertContent\r\n                    }\r\n                };\r\n            }\r\n\r\n            return {\r\n                isBackOffice: isBackOffice,\r\n                goToDefaultPage: goToDefaultPage,\r\n                getConvertedAmmount: getConvertedAmmount,\r\n                getSymbolIdOrDefault: getSymbolIdOrDefault,\r\n                getCurrenciesFromWrapper: getCurrenciesFromWrapper,\r\n                parseWSaveResponse: parseWSaveResponse,\r\n                goBack: goBack\r\n            };\r\n        };\r\n\r\n        return new WithDrawalCommon();\r\n    }\r\n);\r\n",
  "isBase64": false
}