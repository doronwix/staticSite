{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/FxNet/UILayer/Managers/InterWindowsCommunicator.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    \"FxNet/UILayer/Managers/InterWindowsCommunicator\",\r\n    [\r\n        \"require\",\r\n        'handlers/general',\r\n        \"JSONHelper\",\r\n        'dataaccess/dalCommon'\r\n    ],\r\n    function(require) {\r\n        var JSONHelper = require(\"JSONHelper\"),\r\n            general = require('handlers/general'),\r\n            dalCommon = require('dataaccess/dalCommon');\r\n\r\n        function InterWindowsCommunicator(source, sourceId) {\r\n            var allowedSourceOfMessages;\r\n            var messageHandler;\r\n\r\n            function receiveMessage(event) {\r\n                if (!allowedSourceOfMessages || !messageHandler) {\r\n                    return;\r\n                }\r\n\r\n                if (event.origin.replace(/\\/$/, \"\") !== allowedSourceOfMessages.replace(/\\/$/, \"\")) {\r\n                    return;\r\n                }\r\n\r\n                if (general.isStringType(event.data) && !JSONHelper.IsValid(event.data)) {\r\n                    return;\r\n                }\r\n\r\n                var message = JSONHelper.STR2JSON(\"InterWindowsCommunication/receiveMessage\", event.data, eErrorSeverity.medium);\r\n                if (general.isNullOrUndefined(message) || (sourceId && (!message.id || message.id !== sourceId))) {\r\n                    return;\r\n                }\r\n                \r\n                if (!messageHandler.hasOwnProperty(message.msg)) {\r\n                    dalCommon.WriteInfoLog(message.msg, \"[Not a function] Message object: \" + objectToString(message) + \",\\nEvent object:\" + objectToString(event) + \",\\nEvent origin:\" + objectToString(event.origin) + \",\\nEvent data:\" + objectToString(event.data));\r\n                } else {\r\n                    messageHandler[message.msg](message.value);\r\n                }\r\n            }\r\n\r\n            function logHandlerRegistration(sourceOfMessages, handler) {\r\n                var handlerMembers = \"\";\r\n\r\n                for (var member in handler) {\r\n                    if (handler.hasOwnProperty(member)) {\r\n                        handlerMembers += \"\\t\" + member + \"\\n\";\r\n                    }\r\n                }\r\n\r\n                dalCommon.WriteInfoLog(\"RegisterHandler\", \"Registered handler for source: \" + sourceOfMessages + \"\\nHandler members:\\n\" + handlerMembers.slice(0, -1));\r\n            }\r\n\r\n            function objectToString(object) {\r\n\r\n                var objectMembers = object.toString() + \"\\n\";\r\n\r\n                for (var member in object) {\r\n                    if (object.hasOwnProperty(member)) {\r\n                        objectMembers += \"\\t\" + member + \"\\n\";\r\n                    }\r\n                }\r\n\r\n                return objectMembers;\r\n            }\r\n\r\n            function registerMessageHandler(sourceOfMessages, handler) {\r\n                logHandlerRegistration(sourceOfMessages, handler);\r\n\r\n                allowedSourceOfMessages = sourceOfMessages;\r\n                messageHandler = handler;\r\n\r\n                if (source.addEventListener) {\r\n                    source.addEventListener(\"message\", receiveMessage, false);\r\n                } else {\r\n                    source.attachEvent(\"onmessage\", receiveMessage);\r\n                }\r\n            }\r\n\r\n            function unregisterMessageHandler() {\r\n                if (source.removeEventListener) {\r\n                    source.removeEventListener(\"message\", receiveMessage);\r\n                } else {\r\n                    source.detachEvent(\"onmessage\", receiveMessage);\r\n                }\r\n            }\r\n\r\n            function postMessage(destination, action, targetOrigin) {\r\n                if (isDestinationLoaded(destination, targetOrigin)) {\r\n                    destination.postMessage(JSON.stringify(action), targetOrigin);\r\n                }\r\n            }\r\n\r\n            function isDestinationLoaded(destination, targetOrigin) {\r\n                if (!destination || !destination.postMessage) {\r\n                    return false;\r\n                }\r\n\r\n                var loaded = false;\r\n\r\n                try {\r\n                    if (destination.location && destination.location.href.indexOf(targetOrigin) >= 0) {\r\n                        loaded = true;\r\n                    }\r\n                } catch (ex) {\r\n                    loaded = true;\r\n                }\r\n\r\n                return loaded;\r\n            }\r\n\r\n            return {\r\n                registerMessageHandler: registerMessageHandler,\r\n                unregisterMessageHandler: unregisterMessageHandler,\r\n                postMessage: postMessage\r\n            };\r\n        }\r\n\r\n        return InterWindowsCommunicator;\r\n    }\r\n);",
  "isBase64": false
}