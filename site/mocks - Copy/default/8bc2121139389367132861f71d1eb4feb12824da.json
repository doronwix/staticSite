{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/devices/web/uilayer/viewmodels/Signals/SignalsToolViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'deviceviewmodels/Signals/SignalsToolViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'viewmodels/BaseSignalsViewModel',\r\n        'managers/CustomerProfileManager',\r\n        'LoadDictionaryContent!deals_DealSignalsTool',\r\n        'StateObject!Transaction',\r\n        'initdatamanagers/InstrumentsManager',\r\n        'dataaccess/dalTradingSignals'\r\n    ],\r\n    function (require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'), \r\n            BaseSignalsViewModel = require('viewmodels/BaseSignalsViewModel'),\r\n            CustomerProfileManager = require('managers/CustomerProfileManager'),\r\n            stateObject = require('StateObject!Transaction'),\r\n            instrumentsManager = require('initdatamanagers/InstrumentsManager'),\r\n            dalTradingSignals = require('dataaccess/dalTradingSignals');\r\n\r\n        var WebSignalsToolViewModel = general.extendClass(BaseSignalsViewModel, function (filterData) {\r\n            var self = this,\r\n                parent = this.parent,\r\n                data = this.parent.Data,\r\n                handlers = this.Handlers,\r\n                stateObjectSubscriptions = [];\r\n\r\n            function init(settings) {\r\n                parent.init.call(self, settings);\r\n\r\n                setObservables();\r\n                setSubscribers();\r\n                setHandlers();\r\n\r\n                getSignal();\r\n            }\r\n\r\n            function setObservables() {\r\n                if (!stateObject.containsKey(eStateObjectTopics.SignalChartToggle)) {\r\n                    var profileCustomer = CustomerProfileManager.ProfileCustomer();\r\n                    stateObject.set(eStateObjectTopics.SignalChartToggle, Boolean(profileCustomer.showSignalsCharts));\r\n                }\r\n\r\n                data.showSignals = ko.observable(stateObject.get(eStateObjectTopics.SignalChartToggle)).extend({ notify: \"always\" });\r\n                data.currentSignal = ko.observable(null);\r\n            }\r\n\r\n            function setSubscribers() {\r\n                stateObjectSubscriptions.push({\r\n                    unsubscribe: stateObject.subscribe(eStateObjectTopics.SignalChartToggle, data.showSignals)\r\n                });\r\n\r\n                self.subscribeTo(filterData.instrumentId, function () {\r\n                    getSignal();\r\n                });\r\n\r\n                self.subscribeTo(data.hasAgreedDisclaimer, function (agreed) {\r\n                    if (agreed) {\r\n                        getSignal();\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(data.showSignals, function(showSignals) {\r\n                    var profileCustomer = CustomerProfileManager.ProfileCustomer();\r\n                    profileCustomer.showSignalsCharts = Number(showSignals);\r\n                    CustomerProfileManager.ProfileCustomer(profileCustomer);\r\n                });\r\n            }\r\n\r\n            function setHandlers() {\r\n                handlers.toggleSignalsClick = function toggleSignalsClick() {\r\n                    var currentValue = !!stateObject.get(eStateObjectTopics.SignalChartToggle);\r\n                    stateObject.update(eStateObjectTopics.SignalChartToggle, !currentValue);\r\n                }\r\n            }\r\n\r\n            function getSignal() {\r\n                if (data.hasAgreedDisclaimer() && filterData.instrumentId) {\r\n                    var result,\r\n                        instrument = instrumentsManager.GetInstrument(filterData.instrumentId());\r\n                    if (instrument.hasSignal) {\r\n                        data.fetchingData(true);\r\n                        dalTradingSignals.getLatestTradingSignal({ symbol: instrument.signalName })\r\n                            .then(function (responseText) {\r\n                                result = JSONHelper.STR2JSON(\"getLatestTradingSignal/onLoadComplete\", responseText);\r\n                                setSignal(result);\r\n                            }).done();\r\n                    } else {\r\n                        data.signalsAreAvailable(false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setSignal(signalResponse) {\r\n                if (signalResponse.status == eResult.Success && signalResponse.resultStatus == 0 &&\r\n                    signalResponse.result.length) {\r\n                    data.currentSignal(parent.toSignalObject(signalResponse.result[0]));\r\n                }\r\n                data.signalsAreAvailable(signalResponse.status == eResult.Success && signalResponse.resultStatus == 0);\r\n                data.fetchingData(false);\r\n            }\r\n\r\n            function dispose() {\r\n                handlers.toggleSignalsClick = null;\r\n\r\n                while (stateObjectSubscriptions.length > 0) {\r\n                    stateObjectSubscriptions.pop()\r\n                        .unsubscribe();\r\n                }\r\n\r\n                parent.dispose.call(self);\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Data: data,\r\n                Handlers: handlers,\r\n                PermissionsModule: parent.permissionsModule\r\n            };\r\n        });\r\n\r\n        function createViewModel(params) {\r\n            params = params || {};\r\n\r\n            var viewModel = new WebSignalsToolViewModel(params.filterData || {});\r\n            viewModel.init();\r\n\r\n            return viewModel;\r\n        }\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            }\r\n        };\r\n    }\r\n);",
  "isBase64": false
}