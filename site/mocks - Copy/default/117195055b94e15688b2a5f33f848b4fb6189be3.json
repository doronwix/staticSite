{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/devices/web/uilayer/viewmodels/ChartViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿/* globals eChartInstanceType, eChartRateType */\r\ndefine(\r\n    'deviceviewmodels/ChartViewModel',\r\n    [\r\n        'require',\r\n        'helpers/ObservableCustomExtender',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'managers/AdvinionChart/DealSlipChart',\r\n        'StateObject!Transaction',\r\n        'managers/ChartLayoutSettings',\r\n        'configuration/initconfiguration'\r\n    ],\r\n    function ChartDef(require) {\r\n        var ko = require('helpers/ObservableCustomExtender'),\r\n            general = require('handlers/general'),\r\n            koComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            dealSlipChart = require('managers/AdvinionChart/DealSlipChart'),\r\n            stateObject = require('StateObject!Transaction'),\r\n            chartLayoutSettings = require('managers/ChartLayoutSettings'),\r\n            defaultChartConfiguration = require('configuration/initconfiguration').DefaultChartConfiguration;\r\n\r\n        function setChartObservables() {\r\n            var defered = Q.defer(),\r\n                deferedState = stateObject.set('stateObjectIsReadyDefer', defered);\r\n\r\n            if (deferedState !== defered) {\r\n                defered.reject();\r\n                defered = null;\r\n            }\r\n\r\n            stateObject.set('selectedInstrument', ko.observable());\r\n            stateObject.set('orderDir', ko.observable());\r\n            stateObject.set('openLimit', ko.observable(\"\").extend({ dirty: false, rate: true }));\r\n            stateObject.set('stopLossRate', ko.observable());\r\n            stateObject.set('takeProfitRate', ko.observable());\r\n            stateObject.set('switchToRate', general.emptyFn);\r\n            stateObject.set('chart', defaultChartConfiguration);\r\n        }\r\n\r\n        var ChartViewModel = general.extendClass(koComponentViewModel, function ChartClass(params) {\r\n            var self = this,\r\n                chart = new dealSlipChart(),\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = parent.Data, // inherited from KoComponentViewModel\r\n                currentDealData = {},\r\n                lastDealDataSnapShot = {},\r\n                startSettings,\r\n                disposables = [];\r\n\r\n            //-------------------------------------------------------\r\n            function init(settings) {\r\n                parent.init.call(self, settings);   // inherited from KoComponentViewModel\r\n\r\n                chartLayoutSettings.Init();\r\n\r\n                setValues();\r\n                setDefaultObservables();\r\n                setChartObservables();\r\n\r\n                startSettings = getAdditionalSettings();\r\n                chart.init.call(self, startSettings);\r\n\r\n                stateObject.update('skipReset', true);\r\n\r\n                setSubscribers();\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setValues() {\r\n                data.chartId = params.index;\r\n                data.isActive = params.isActive;\r\n                data.isFullScreen = params.isFullScreen;\r\n                data.isSingleMode = params.isSingleMode;\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setDefaultObservables() {\r\n                var chartSettings = getChartSetingsForCustomer();\r\n\r\n                data.isChartReady = ko.observable(false);\r\n                data.isLoadingData = ko.observable(false);\r\n                data.currentInstrumentId = ko.observable(chartSettings.instrumentId);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function onStateObjectReady() {\r\n                currentDealData = stateObject.getAll();\r\n                self.subscribeAndNotify(currentDealData.transactionType, subscribeToCurrentDeal);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function onPromiseRejected() {\r\n                //used on rejected promise on fail when don't want to do nothing\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setSubscribers() {\r\n                var subscriber = self.subscribeTo(data.isLoadingData, function setIsChartReady(isLoadingData) {\r\n                    if (isLoadingData) {\r\n                        return;\r\n                    }\r\n\r\n                    data.isChartReady(true);\r\n                    subscriber.dispose();\r\n                });\r\n\r\n                self.subscribeTo(data.isActive, function switchActiveChartSubscriptions(isActive) {\r\n                    if (isActive) {\r\n                        var stateObjectDealData = stateObject.getAll();\r\n                        stateObjectDealData.selectedInstrument(data.currentInstrumentId());\r\n                    }\r\n\r\n                    subscribeToCurrentDeal();\r\n                });\r\n\r\n                self.subscribeTo(data.isFullScreen, setMode);\r\n                self.subscribeTo(data.isSingleMode, setMode);\r\n\r\n                self.subscribeTo(data.currentInstrumentId, function setCurrentInstrument(instrumentId) {\r\n                    var stateObjectDealData = stateObject.getAll();\r\n                    stateObjectDealData.selectedInstrument(instrumentId);\r\n                    stateObjectDealData.orderDir(eOrderDir.None);\r\n                    stateObjectDealData.stopLossRate('');\r\n                    stateObjectDealData.takeProfitRate('');\r\n\r\n                    chart.ChangeSymbol(data.currentInstrumentId(), eOrderDir.None);\r\n                });\r\n\r\n                currentDealData.stateObjectIsReadyDefer\r\n                    .promise\r\n                    .then(onStateObjectReady)\r\n                    .fail(onPromiseRejected)\r\n                    .done();\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setMode() {\r\n                chart.ChangeMode(data.isFullScreen() || data.isSingleMode());\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function subscribeToCurrentDeal() {\r\n                for (var i = 0; i < disposables.length; i++) {\r\n                    disposables[i].dispose();\r\n                }\r\n\r\n                disposables.length = 0;\r\n\r\n                clearChartLines();\r\n\r\n                if (!data.isActive()) {\r\n                    return;\r\n                }\r\n\r\n                currentDealData = stateObject.getAll();\r\n                currentDealData.selectedInstrument(data.currentInstrumentId());\r\n\r\n                disposables.push(currentDealData.selectedInstrument.subscribe(data.currentInstrumentId));\r\n\r\n                if (currentDealData.orderDir && ko.isObservable(currentDealData.orderDir)) {\r\n                    currentDealData.orderDir(general.isDefinedType(lastDealDataSnapShot.orderDir) ? lastDealDataSnapShot.orderDir : eOrderDir.None);\r\n\r\n                    disposables.push(currentDealData.orderDir.subscribe(function (newOrderDir) {\r\n                        if (general.isFunctionType(currentDealData.switchToRate)) {\r\n                            currentDealData.switchToRate();\r\n                        }\r\n\r\n                        if (ko.isObservable(currentDealData.stopLossRate) && currentDealData.stopLossRate()) {\r\n                            currentDealData.stopLossRate(\"\");\r\n                        }\r\n\r\n                        if (ko.isObservable(currentDealData.takeProfitRate) && currentDealData.takeProfitRate()) {\r\n                            currentDealData.takeProfitRate(\"\");\r\n                        }\r\n\r\n                        lastDealDataSnapShot.orderDir = newOrderDir;\r\n                        chart.ChangeSymbol(data.currentInstrumentId(), newOrderDir);\r\n                    }));\r\n                }\r\n\r\n                if (currentDealData.openLimit && ko.isObservable(currentDealData.openLimit)) {\r\n                    if (lastDealDataSnapShot.openLimit != currentDealData.openLimit()) {\r\n                        currentDealData.openLimit(lastDealDataSnapShot.openLimit || '');\r\n                    }\r\n\r\n                    disposables.push(currentDealData.openLimit.subscribe(function (openLimitRate) {\r\n                        lastDealDataSnapShot.openLimit = openLimitRate;\r\n                        chart.DrawPriceLine(eChartPriceLineType.LimitLevel, openLimitRate, currentDealData.chart.keys.limitLevel);\r\n                    }));\r\n                }\r\n\r\n                if (currentDealData.stopLossRate && ko.isObservable(currentDealData.stopLossRate)) {\r\n                    currentDealData.stopLossRate(lastDealDataSnapShot.stopLossRate || '');\r\n\r\n                    disposables.push(currentDealData.stopLossRate.subscribe(function (stopLossRate) {\r\n                        lastDealDataSnapShot.stopLossRate = stopLossRate;\r\n                        chart.DrawPriceLine(eChartPriceLineType.StopLoss, stopLossRate, currentDealData.chart.keys.stopLoss);\r\n                    }));\r\n                }\r\n\r\n                if (currentDealData.takeProfitRate && ko.isObservable(currentDealData.takeProfitRate)) {\r\n                    currentDealData.takeProfitRate(lastDealDataSnapShot.takeProfitRate || '');\r\n\r\n                    disposables.push(currentDealData.takeProfitRate.subscribe(function (takeProfitRate) {\r\n                        lastDealDataSnapShot.takeProfitRate = takeProfitRate;\r\n                        chart.DrawPriceLine(eChartPriceLineType.TakeProfit, takeProfitRate, currentDealData.chart.keys.takeProfit);\r\n                    }));\r\n                }\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function clearChartLines() {\r\n                lastDealDataSnapShot = {};\r\n                chart.DeletePriceLine(eChartPriceLineType.LimitLevel);\r\n                chart.DeletePriceLine(eChartPriceLineType.StopLoss);\r\n                chart.DeletePriceLine(eChartPriceLineType.TakeProfit);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function getChartSetingsForCustomer() {\r\n                return chartLayoutSettings.GetSettings(data.chartId);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function getOrderDir() {\r\n                currentDealData = stateObject.getAll();\r\n\r\n                var orderDirValue = ko.utils.unwrapObservable(currentDealData.orderDir),\r\n                    orderDir = orderDirValue === eOrderDir.None ? eOrderDir.Buy : orderDirValue;\r\n\r\n                if (currentDealData.chart.direction === eChartDirection.Opposite) {\r\n                    orderDir = eOrderDir.Buy - orderDir;\r\n                }\r\n\r\n                return orderDir;\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function onPriceUpdated(priceLineType, newRate) {\r\n                var stateData = stateObject.getAll();\r\n\r\n                if (stateData.switchToRate && general.isFunctionType(stateData.switchToRate)) {\r\n                    stateData.switchToRate();\r\n                }\r\n\r\n                switch (priceLineType) {\r\n                    case eChartPriceLineType.LimitLevel:\r\n                        if (stateData.openLimit && ko.isObservable(stateData.openLimit)) {\r\n                            stateData.openLimit(newRate);\r\n                        }\r\n                        break;\r\n\r\n                    case eChartPriceLineType.StopLoss:\r\n                        if (stateData.stopLossRate && ko.isObservable(stateData.stopLossRate)) {\r\n                            stateData.stopLossRate(newRate);\r\n                        }\r\n                        break;\r\n\r\n                    case eChartPriceLineType.TakeProfit:\r\n                        if (stateData.takeProfitRate && ko.isObservable(stateData.takeProfitRate)) {\r\n                            stateData.takeProfitRate(newRate);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function getAdditionalSettings() {\r\n                var instrumentId = getChartSetingsForCustomer().instrumentId;\r\n\r\n                currentDealData = stateObject.getAll();\r\n\r\n                return {\r\n                    additionalStartArgs: {\r\n                        instrumentId: instrumentId,\r\n                        orderDir: getOrderDir(),\r\n                        currentRateKey: currentDealData.chart.keys.currentRate,\r\n                        instanceType: eChartInstanceType.newDealSlip,\r\n                        containerSuffix: data.chartId,\r\n                        isLoadingData: data.isLoadingData,\r\n                        toggleDealSlipViewCallback: general.emptyFn,\r\n                        isExpandedMode: data.isSingleMode(),\r\n                        isFullScreen: data.isFullScreen(),\r\n                        tracking: {\r\n                            eventName: 'chart-interaction'\r\n                        },\r\n                        onPriceLineDragged: onPriceUpdated,\r\n                        allowDragLine: currentDealData.chart.allowDragLine\r\n                    }\r\n                };\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function dispose() {\r\n                for (var i = 0; i < disposables.length; i++) {\r\n                    disposables[i].dispose();\r\n                }\r\n\r\n                disposables.length = 0;\r\n\r\n                chart.dispose();\r\n                parent.dispose.call(self);          // inherited from KoComponentViewModel\r\n\r\n                if (stateObject.containsKey('skipReset')) {\r\n                    stateObject.unset('skipReset');\r\n                }\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Data: data,\r\n                ChartData: chart.Data\r\n            };\r\n        });\r\n\r\n        function createViewModel(params) {\r\n            var viewModel = new ChartViewModel(params);\r\n            viewModel.init();\r\n\r\n            return viewModel;\r\n        }\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            }\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}