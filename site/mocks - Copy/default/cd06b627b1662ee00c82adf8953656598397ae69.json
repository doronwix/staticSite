{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/UploadDocumentsViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/UploadDocumentsViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'JSONHelper',\r\n        'dataaccess/dalCompliance',\r\n        'viewmodels/UploadDocumentsComponentViewModel',\r\n        'modules/permissionsmodule',\r\n        'enums/alertenums',\r\n        'devicemanagers/AlertsManager',\r\n        'devicecustommodules/DepositConfirmationActions',\r\n        'StateObject!UploadDocuments',\r\n        'StateObject!userFlow',\r\n        'initdatamanagers/Customer'\r\n    ],\r\n    function UploadDocumentsDef(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            JSONHelper = require('JSONHelper'),\r\n            dalCompliance = require('dataaccess/dalCompliance'),\r\n            UploadDocumentsComponentViewModel = require('viewmodels/UploadDocumentsComponentViewModel'),\r\n            permissionsModule = require('modules/permissionsmodule'),\r\n            AlertTypes = require('enums/alertenums'),\r\n            AlertsManager = require('devicemanagers/AlertsManager'),\r\n            DepositConfirmationActions = require('devicecustommodules/DepositConfirmationActions'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            stateObject = require('StateObject!UploadDocuments'),\r\n            soUserFlow = require('StateObject!userFlow');\r\n\r\n        var UploadDocumentsViewModel = general.extendClass(KoComponentViewModel,\r\n            function UploadDocumentsClass() {\r\n                var self = this,\r\n                    parent = this.parent, // inherited from KoComponentViewModel\r\n                    data = this.Data, // inherited from KoComponentViewModel\r\n                    index = 0,\r\n                    docsHash = new THashTable(),\r\n                    soUnsubscribe;\r\n\r\n                function init() {\r\n                    parent.init.call(self); // inherited from KoComponentViewModel\r\n\r\n                    setIsLoading();\r\n                    data.isPermitted = permissionsModule.CheckPermissions('uploadDocuments');\r\n\r\n                    setObservables();\r\n                    setSubscribers();\r\n                    getData();\r\n                }\r\n\r\n                function setObservables() {\r\n                    data.documentsData = ko.observable(docsHash);\r\n                    data.notApprovedCreditCards = ko.observable([]);\r\n                    data.ccTooltipVisible = ko.observable(false);\r\n                    data.isEmailClicked = ko.observable(false);\r\n                    setPoiDocumentsStatus(soUserFlow.get(eStateObjectTopics.UserFlowChanged));\r\n                }\r\n\r\n                function setSubscribers() {\r\n                    soUnsubscribe = soUserFlow.subscribe(eStateObjectTopics.UserFlowChanged, function (model) {\r\n                        setPoiDocumentsStatus(model);\r\n                    });\r\n                }\r\n\r\n                function setPoiDocumentsStatus(model) {\r\n                    if (!data.hasOwnProperty('poiDocumentsRequired')) {\r\n                        data.poiDocumentsRequired = ko.observable(false);\r\n                    }\r\n\r\n                    if (!model || model.userStatus === eUserStatus.NA) {\r\n                        return;\r\n                    }\r\n\r\n                    data.poiDocumentsRequired(model.daysCounter > 0);\r\n                }\r\n\r\n                function setIsLoading() {\r\n                    stateObject.set('isLoaded', null);\r\n                    stateObject.update('isLoaded', false);\r\n                }\r\n\r\n                function setIsLoaded() {\r\n                    stateObject.set('uploadTypes', Object.keys(data.documentsData().Container))\r\n                    stateObject.update('isLoaded', true);\r\n                }\r\n\r\n                function getData() {\r\n                    dalCompliance\r\n                        .getUploadDocumentsData()\r\n                        .then(processUploadDocumentsData)\r\n                        .then(setIsLoaded);\r\n                }\r\n\r\n                function processUploadDocumentsData(docsData) {\r\n                    var docs = JSONHelper.STR2JSON('UploadDocumentsViewModel/getUploadDocumentsData', docsData, eErrorSeverity.medium);\r\n\r\n                    if (!docs) {\r\n                        return;\r\n                    }\r\n\r\n                    if (docs.Data) {\r\n                        processDocuments(docs.Data);\r\n                    }\r\n\r\n                    if (docs.NotApprovedCreditCards) {\r\n                        data.notApprovedCreditCards(docs.NotApprovedCreditCards);\r\n                    }\r\n                }\r\n\r\n                function processDocuments(docData) {\r\n                    docsHash = data.documentsData();\r\n                    docData.forEach(processDocument);\r\n\r\n                    var otherDoc = docsHash.GetItem(eUploadDocumentType.OtherDocuments);\r\n                    docsHash.OverrideItem(eUploadDocumentType.OtherDocuments, otherDoc);\r\n\r\n                    index = 0;\r\n                    data.documentsData(docsHash);\r\n                }\r\n\r\n                function processDocument(docDataFromServer, i) {\r\n                    var acceptedDocumentTypes = [\r\n                        eUploadDocumentType.ProofOfID,\r\n                        eUploadDocumentType.ProofOfResidence,\r\n                        eUploadDocumentType.CreditCardCopy,\r\n                        eUploadDocumentType.DepositConfirmation,\r\n                        eUploadDocumentType.WithdrawalPendingRequest,\r\n                        eUploadDocumentType.TaxCard,\r\n                        eUploadDocumentType.OtherDocuments\r\n                    ];\r\n\r\n                    if (!acceptedDocumentTypes.contains(docDataFromServer.DocumentTypeID)) {\r\n                        return;\r\n                    }\r\n\r\n                    docDataFromServer.IsVisible = true;\r\n                    docDataFromServer.uploadVm = UploadDocumentsComponentViewModel.viewModel.createViewModel({\r\n                        recordType: docDataFromServer.DocumentTypeID,\r\n                        documentTypeName: docDataFromServer.Category,\r\n                        autoUpload: true,\r\n                        id: 'upload',\r\n                        hashTag: i + 1,\r\n                        uploadResponseCallback:\r\n                            docDataFromServer.DocumentTypeID === eUploadDocumentType.DepositConfirmation\r\n                                ? DepositConfirmationActions.CloseConfirmation\r\n                                :general.emptyFn\r\n                    });\r\n\r\n                    docDataFromServer.dispose = docDataFromServer.uploadVm.dispose;\r\n                    docsHash.OverrideItem(docDataFromServer.DocumentTypeID, docDataFromServer);\r\n                }\r\n\r\n                function showCCTooltip() {\r\n                    data.ccTooltipVisible(!data.ccTooltipVisible());\r\n                }\r\n\r\n                function getIndexInc(visible) {\r\n                    return visible ? ++index : 0;\r\n                }\r\n\r\n                function getIndex() {\r\n                    return index;\r\n                }\r\n\r\n                function getStatusColor(status, uploadDocType) {\r\n                    if (status === eUploadDocumentStatus.Processing) {\r\n                        return 'status-orange';\r\n                    }\r\n\r\n                    if (status === eUploadDocumentStatus.Approved ||\r\n                        status === eUploadDocumentStatus.NotRequired) {\r\n                        return 'status-green';\r\n                    }\r\n\r\n                    if (status === eUploadDocumentStatus.Incomplete ||\r\n                        status === eUploadDocumentStatus.AwaitingSignatureHighAmount) {\r\n                        return 'status-red';\r\n                    }\r\n\r\n                    if ([eUploadDocumentType.ProofOfID, eUploadDocumentType.ProofOfResidence].contains(uploadDocType) &&\r\n                        data.poiDocumentsRequired() && status === eUploadDocumentStatus.AwaitingDocument) {\r\n                        return 'status-red';\r\n                    }\r\n\r\n                    return 'status-gray';\r\n                }\r\n\r\n                function disposeDocumentDataItem(docType, docData) {\r\n                    if (docData && general.isFunctionType(docData.dispose)) {\r\n                        docData.dispose();\r\n                    }\r\n                }\r\n\r\n                function sendEmail() {\r\n                    if (!data.isPermitted) {\r\n                        return;\r\n                    }\r\n\r\n                    if (data.isEmailClicked()) {\r\n                        return;\r\n                    }\r\n\r\n                    dalCompliance.sendDepositConfirmation();\r\n\r\n                    var message = Dictionary.GetItem('depositConfirmationEmail'),\r\n                        title = Dictionary.GetItem('PleaseNote');\r\n\r\n                    data.isEmailClicked(true);\r\n\r\n                    AlertsManager.UpdateAlert(AlertTypes.DepositConfirmationEmailSentAlert, title, message);\r\n                    AlertsManager.PopAlert(AlertTypes.DepositConfirmationEmailSentAlert);\r\n                }\r\n\r\n                function dispose() {\r\n                    if (soUnsubscribe) {\r\n                        soUnsubscribe();\r\n                    }\r\n\r\n                    data.documentsData().ForEach(disposeDocumentDataItem);\r\n                    docsHash.Clear();\r\n                    parent.dispose.call(self);  // inherited from KoComponentViewModel\r\n                }\r\n\r\n                return {\r\n                    init: init,\r\n                    dispose: dispose,\r\n                    Data: data,\r\n                    ShowCCTooltip: showCCTooltip,\r\n                    GetIndexInc: getIndexInc,\r\n                    GetIndex: getIndex,\r\n                    GetStatusColor: getStatusColor,\r\n                    OpenDepositconfirmationPopup: DepositConfirmationActions.OpenConfirmation,\r\n                    SendEmail: sendEmail\r\n                };\r\n            }\r\n        );\r\n\r\n        var createViewModel = function () {\r\n            var viewModel = new UploadDocumentsViewModel();\r\n\r\n            viewModel.init();\r\n\r\n            return viewModel;\r\n        };\r\n\r\n        return {\r\n            viewModel: { createViewModel: createViewModel }\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}