{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/limits/RateFieldModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿/* global eStartSpinFrom */\r\ndefine(\r\n    'viewmodels/limits/RateFieldModel',\r\n    [\r\n        'require',\r\n        'knockout'\r\n    ],\r\n    function (require) {\r\n        var ko = require('knockout');\r\n\r\n        function RateFieldModel() {\r\n            var self = this,\r\n                minPips1 = ko.observable(Number.MIN_VALUE),\r\n                maxPips1 = ko.observable(Number.MAX_VALUE),\r\n                minPips2 = ko.observable(Number.MIN_VALUE),\r\n                maxPips2 = ko.observable(Number.MAX_VALUE);\r\n\r\n            self.minValidation = self.minValidation1 = ko.observable(Number.MIN_VALUE);\r\n            self.maxValidation = self.maxValidation1 = ko.observable(Number.MAX_VALUE);\r\n            self.minValidation2 = ko.observable(Number.MIN_VALUE);\r\n            self.maxValidation2 = ko.observable(Number.MAX_VALUE);\r\n\r\n            self.precision = ko.observable(0);\r\n            self.pipDigit = ko.observable(0);\r\n            self.startSpinFrom = ko.observable(eStartSpinFrom.None);\r\n            self.near = ko.observable();\r\n            self.far = ko.observable();\r\n\r\n            self.min = self.min1 = ko.pureComputed({\r\n                read: minPips1,\r\n                write: function(rawValue) {\r\n                    var value = Format.roundToPip(rawValue, self.pipDigit(), self.precision(), \">\");\r\n\r\n                    if (value === false) {\r\n                        minPips1(Number.MIN_VALUE);\r\n                    }\r\n\r\n                    minPips1(Number(value));\r\n                    self.minValidation1(rawValue);\r\n                },\r\n                owner: self\r\n            });\r\n\r\n            self.max = self.max1 = ko.pureComputed({\r\n                read: maxPips1,\r\n                write: function(rawValue) {\r\n                    var value = Format.roundToPip(rawValue, self.pipDigit(), self.precision(), \"<\");\r\n\r\n                    if (value === false) {\r\n                        maxPips1(Number.MAX_VALUE);\r\n                    }\r\n\r\n                    maxPips1(Number(value));\r\n                    self.maxValidation1(rawValue);\r\n                },\r\n                owner: self\r\n            });\r\n\r\n            self.min2 = ko.pureComputed({\r\n                read: minPips2,\r\n                write: function(rawValue) {\r\n                    var value = Format.roundToPip(rawValue, self.pipDigit(), self.precision(), \">\");\r\n\r\n                    if (value === false) {\r\n                        minPips2(Number.MIN_VALUE);\r\n                    }\r\n\r\n                    minPips2(Number(value));\r\n                    self.minValidation2(rawValue);\r\n                },\r\n                owner: self\r\n            });\r\n\r\n            self.max2 = ko.pureComputed({\r\n                read: maxPips2,\r\n                write: function(rawValue) {\r\n                    var value = Format.roundToPip(rawValue, self.pipDigit(), self.precision(), \"<\");\r\n\r\n                    if (value === false) {\r\n                        maxPips2(Number.MAX_VALUE);\r\n                    }\r\n\r\n                    maxPips2(Number(value));\r\n                    self.maxValidation2(rawValue);\r\n                },\r\n                owner: self\r\n            });\r\n\r\n            self.format = ko.pureComputed(function() {\r\n                var precision = parseInt(self.precision(), 10);\r\n                if (!isNaN(precision) && precision >= 0) {\r\n                    return \"n\" + precision;\r\n                } else {\r\n                    return \"n\";\r\n                }\r\n            });\r\n\r\n            self.step = ko.pureComputed(function() {\r\n                var pipDigit = parseInt(self.pipDigit(), 10);\r\n                if (isNaN(pipDigit)) {\r\n                    return 1;\r\n                }\r\n\r\n                return 1 / Math.pow(10, pipDigit);\r\n            });\r\n        }\r\n\r\n        return RateFieldModel;\r\n    }\r\n);",
  "isBase64": false
}