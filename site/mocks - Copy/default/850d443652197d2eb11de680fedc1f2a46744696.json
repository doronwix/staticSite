{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/dataaccesslayer/DalTradingInfoSrv.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'dataaccess/DalTradingInfoSrv',\r\n    [\r\n        'generalmanagers/ErrorManager',\r\n        \"handlers/Delegate\",\r\n        'vendor/jquery.signalR',\r\n\r\n    ],\r\n    function (ErrorManager, delegate) {\r\n        var eConnectionState = {\r\n            initial: -1,\r\n            connecting: $.signalR.connectionState.connecting, //0\r\n            connected: $.signalR.connectionState.connected, //1\r\n            reconnecting: $.signalR.connectionState.reconnecting, //2\r\n            disconnecting: 3,\r\n            disconnected: $.signalR.connectionState.disconnected //4\r\n        };\r\n\r\n        function DalTradingInfoSrv(url) {\r\n            var connection,\r\n                serverUrl = url,\r\n                proxies = [],\r\n                messageCallbacks = [],\r\n                connectionState = eConnectionState.initial,\r\n                ServiceAvailableEvent = new delegate();\r\n\r\n            var connect = function (token) {\r\n                connection.qs = { 'authToken': token };\r\n\r\n                ErrorManager.onWarning(\"dalTradingInfoSrv/connect\", \"token=\" + connection.qs.authToken + \" connectionState=\" + connectionState)\r\n\r\n                connection\r\n                    .start()\r\n                    .done(function () {\r\n                        ServiceAvailableEvent.Invoke(true);\r\n                    })\r\n                    .fail(function (error) {\r\n                        ServiceAvailableEvent.Invoke(false);\r\n\r\n                        ErrorManager.onError(\r\n                            \"dalTradingInfoSrv/connect failed\",\r\n                            error,\r\n                            eErrorSeverity.warning);\r\n                    });\r\n            };\r\n\r\n            var disconnect = function () {\r\n                ErrorManager.onWarning(\"dalTradingInfoSrv/disconnect\", \"disconnect\")\r\n                connectionState = eConnectionState.disconnecting;\r\n                connection.stop();\r\n                connection.disconnected();\r\n            };\r\n\r\n            var unsubscribe = function (hubName, args) {\r\n                ErrorManager.onWarning(\"dalTradingInfoSrv/unsubscribe\", \"unsubscribe hubName=\" + hubName + \" connectionState=\" + connectionState)\r\n                var hubProxy = proxies[hubName];\r\n\r\n                if (connectionState === eConnectionState.connected) {\r\n                    hubProxy\r\n                        .invoke('unsubscribe', args)\r\n                        .done(function () { })\r\n                        .fail(function (error) {\r\n                            if (connectionState !== eConnectionState.disconnected && connectionState !== eConnectionState.disconnecting) {\r\n                                ErrorManager.onError(\r\n                                    \"dalTradingInfoSrv/unsubscribe failed for hub\" + hubName,\r\n                                    error,\r\n                                    eErrorSeverity.warning);\r\n                            }\r\n                        });\r\n                }\r\n            };\r\n\r\n            var subscribeByGroup = function (hubName, args, groupId) {\r\n                ErrorManager.onWarning(\"dalTradingInfoSrv/subscribeByGroup\", \"subscribeByGroup hubName=\" + hubName + \" connectionState=\" + connectionState)\r\n                var hubProxy = proxies[hubName];\r\n\r\n                if (hubProxy && connectionState === eConnectionState.connected) {\r\n                    hubProxy\r\n                        .invoke('subscribe', groupId, args)\r\n                        .done(function () { })\r\n                        .fail(function (error) {\r\n                            if (connectionState !== eConnectionState.disconnected && connectionState !== eConnectionState.disconnecting) {\r\n                                ErrorManager.onError(\r\n                                    \"dalTradingInfoSrv/subscribeByGroup failed for hub \" + hubName,\r\n                                    error,\r\n                                    eErrorSeverity.warning);\r\n                            }\r\n                        });\r\n                }\r\n            };\r\n\r\n            var subscribe = function (hubName, args) {\r\n                ErrorManager.onWarning(\"dalTradingInfoSrv/subscribe\", \"subscribe hubName=\" + hubName + \" connectionState=\" + connectionState)\r\n                var hubProxy = proxies[hubName];\r\n\r\n                if (hubProxy && connectionState === eConnectionState.connected) {\r\n                    hubProxy\r\n                        .invoke('subscribe', args)\r\n                        .done(function () { })\r\n                        .fail(function (error) {\r\n                            if (connectionState !== eConnectionState.disconnected && connectionState !== eConnectionState.disconnecting) {\r\n                                ErrorManager.onError(\r\n                                    \"dalTradingInfoSrv/subscribe failed for hub \" + hubName,\r\n                                    error,\r\n                                    eErrorSeverity.warning);\r\n                            }\r\n                        });\r\n                }\r\n            };\r\n\r\n            function initConnection(disconectSubscribeHandler) {\r\n                ErrorManager.onWarning(\"dalTradingInfoSrv/initConnection\", \"initConnection\")\r\n                connection = $.hubConnection(serverUrl);\r\n\r\n                connection.stateChanged(function (state) {\r\n                    connectionState = state.newState; //the old is state.oldState\r\n                });\r\n\r\n                connection.reconnected(function () {\r\n                    ErrorManager.onWarning(\"dalTradingInfoSrv\", \"connection.reconnected triggered\")\r\n                    ServiceAvailableEvent.Invoke(true);\r\n                });\r\n\r\n                connection.error(function (error) {\r\n                    ServiceAvailableEvent.Invoke(false);\r\n\r\n                    ErrorManager.onError(\r\n                        \"dalTradingInfoSrv/connect failed\",\r\n                        error,\r\n                        eErrorSeverity.warning);\r\n                });\r\n\r\n                connection.disconnected(function () {\r\n                    disconectSubscribeHandler();\r\n                });\r\n            }\r\n\r\n            function createHub(hubName) {\r\n                var hubProxy = connection.createHubProxy(hubName);\r\n\r\n                if (hubProxy) {\r\n                    hubProxy.on('onUpdateClient',\r\n                        function (message, groupId, mode) {\r\n                            messageReceived(hubName, message, groupId, mode);\r\n                        });\r\n\r\n                    hubProxy.on('empty',\r\n                        function (groupId, error) {\r\n                            messageReceived(hubName, null, groupId);\r\n                        });\r\n                }\r\n\r\n                proxies[hubName] = hubProxy;\r\n            }\r\n\r\n            function updateCallbacks(hubName, messageReceivedCallback, serviceAvailableCallback) {\r\n                ErrorManager.onWarning(\"dalTradingInfoSrv/updateCallbacks\", \"hubname=\" + hubName)\r\n                serviceAvailableCallback(connectionState === eConnectionState.connected);\r\n\r\n                ServiceAvailableEvent.Add(serviceAvailableCallback);\r\n                messageCallbacks[hubName] = messageReceivedCallback;\r\n            }\r\n\r\n            function messageReceived(hubName, message, groupId, mode) {\r\n                messageCallbacks[hubName](message, groupId, mode);\r\n            }\r\n\r\n            return {\r\n                CreateHub: createHub,\r\n                UpdateCallbacks: updateCallbacks,\r\n                InitConnection: initConnection,\r\n                Connect: connect,\r\n                Disconnect: disconnect,\r\n                Subscribe: subscribe,\r\n                SubscribeByGroup: subscribeByGroup,\r\n                Unsubscribe: unsubscribe\r\n            };\r\n        }\r\n\r\n        return DalTradingInfoSrv;\r\n    }\r\n);\r\n",
  "isBase64": false
}