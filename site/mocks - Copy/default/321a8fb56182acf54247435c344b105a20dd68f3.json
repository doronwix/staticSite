{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/LogicLayer/LimitCalculator/LimitValuesCalculator.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "define(\r\n    'calculators/LimitValuesCalculator',\r\n    [\r\n        'require',\r\n        'handlers/general',\r\n        'handlers/AmountConverter',\r\n        'enums/enums'\r\n    ],\r\n    function (require) {\r\n        var general = require('handlers/general'),\r\n            amountConverter = require('handlers/AmountConverter');\r\n\r\n        function LimitValues(_amount, _value, _rate, _percent) {\r\n            this.amount = general.isDefinedType(_amount) ? _amount : \"\";\r\n            this.value = general.isDefinedType(_value) ? _value : \"\";\r\n            this.rate = general.isDefinedType(_rate) ? _rate : \"\";\r\n            this.percent = general.isDefinedType(_percent) ? _percent : \"\";\r\n\r\n            this.isValid = (this.amount !== \"\" && this.amount !== \"NA\") &&\r\n                (this.value !== \"\" && this.value !== \"NA\") &&\r\n                (this.rate !== \"\" && this.rate !== \"NA\") &&\r\n                (this.percent !== \"\" && this.percent !== \"NA\");\r\n        }\r\n\r\n        var LimitValuesCalculator = {\r\n            //--------------------------------------------------\r\n            // CalculateValuesFromRate\r\n            //--------------------------------------------------\r\n            CalculateValuesFromRate: function (bid, ask, limitRate, orderDir, limitType, dealAmount, range, quoteForOtherCcyToAccountCcy, instrumentId, gap) {\r\n                gap = general.isNumber(gap) ? gap : 0;\r\n\r\n                if (!general.isNumber(limitRate))\r\n                    return new LimitValues();\r\n\r\n                //---------------------------------------------\r\n\r\n                limitRate = parseFloat(limitRate);\r\n\r\n                if (!general.InRange(limitRate, range))\r\n                    return new LimitValues(\"NA\", \"NA\", limitRate, \"NA\");\r\n\r\n                //---------------------------------------------\r\n\r\n                var rate = (orderDir == eOrderDir.Sell) ? parseFloat(bid) : parseFloat(ask);\r\n                var amount = this.CalculateAmountFromRate(rate, limitRate, dealAmount, orderDir) + gap;\r\n                var percent = this.CalculatePercentFromRate(rate, limitRate) + (gap / (dealAmount * 100));\r\n                var value = this.CalculateValue(amount, quoteForOtherCcyToAccountCcy);\r\n\r\n                limitRate = Format.toRate(limitRate, true, instrumentId);\r\n\r\n                return new LimitValues(amount, value, limitRate, percent);\r\n            },\r\n\r\n            //--------------------------------------------------\r\n            // CalculateValuesFromAmount\r\n            //--------------------------------------------------\r\n            CalculateValuesFromAmount: function (bid, ask, amount, orderDir, limitType, dealAmount, range, quoteForOtherCcyToAccountCcy, instrumentId) {\r\n                if (!general.isNumber(amount)) {\r\n                    return new LimitValues();\r\n                }\r\n\r\n                var _amount = Math.abs(parseFloat(amount));\r\n\r\n                //---------------------------------------------\r\n\r\n                var rate = (orderDir == eOrderDir.Sell) ? parseFloat(bid) : parseFloat(ask);\r\n                var limitRate = this.CalculateRateFromAmount(rate, _amount, dealAmount, orderDir, limitType);\r\n                limitRate = Format.toRate(limitRate, true, instrumentId);\r\n\r\n                if (!general.InRange(limitRate, range))\r\n                    return new LimitValues(amount, \"NA\", \"NA\", \"NA\");\r\n\r\n                //---------------------------------------------\r\n\r\n                var percent = this.CalculatePercentFromRate(rate, limitRate, dealAmount);\r\n                var value = this.CalculateValue(_amount, quoteForOtherCcyToAccountCcy);\r\n\r\n                return new LimitValues(amount, value, limitRate, percent);\r\n            },\r\n\r\n            //--------------------------------------------------\r\n            // CalculateValuesFromPercent\r\n            //--------------------------------------------------\r\n            CalculateValuesFromPercent: function (bid, ask, percent, orderDir, limitType, dealAmount, range, quoteForOtherCcyToAccountCcy, instrumentId) {\r\n                if (!general.isNumber(percent))\r\n                    return new LimitValues();\r\n\r\n                var rate = (orderDir == eOrderDir.Sell) ? parseFloat(bid) : parseFloat(ask);\r\n                var _percent = parseFloat(percent);\r\n\r\n                //---------------------------------------------\r\n\r\n                var limitRate = this.CalculateRateFromPercent(rate, _percent, orderDir, limitType);\r\n                limitRate = Format.toRate(limitRate, true, instrumentId);\r\n\r\n                if (!general.InRange(limitRate, range))\r\n                    return new LimitValues(\"NA\", \"NA\", \"NA\", percent);\r\n\r\n                //---------------------------------------------\r\n\r\n                var amount = this.CalculateAmountFromRate(rate, limitRate, dealAmount, orderDir);\r\n                var value = this.CalculateValue(amount, quoteForOtherCcyToAccountCcy);\r\n\r\n                return new LimitValues(amount, value, limitRate, percent);\r\n            },\r\n\r\n            //--------------------------------------------------\r\n            // CalculateRateFromAmount\r\n            //--------------------------------------------------\r\n            CalculateRateFromAmount: function (rate, amount, dealAmount, orderDir, limitType) {\r\n                if (dealAmount <= 0)\r\n                    return 0;\r\n\r\n                var amountRelation = amount / dealAmount;\r\n\r\n                if (orderDir == eOrderDir.Sell)\r\n                    amountRelation *= -1;\r\n\r\n                return (limitType == eLimitType.TakeProfit) ? rate + amountRelation : rate - amountRelation;\r\n            },\r\n\r\n            //--------------------------------------------------\r\n            // CalculateRateFromPercent\r\n            //--------------------------------------------------\r\n            CalculateRateFromPercent: function (rate, percent, orderDir, limitType) {\r\n                var percentage = percent * rate / 100;\r\n\r\n                if (orderDir === eOrderDir.Buy && limitType === eLimitType.StopLoss) {\r\n                    return rate - percentage;\r\n                }\r\n\r\n                if (orderDir === eOrderDir.Buy && limitType === eLimitType.TakeProfit) {\r\n                    return rate + percentage;\r\n                }\r\n\r\n                if (orderDir === eOrderDir.Sell && limitType === eLimitType.StopLoss) {\r\n                    return rate + percentage;\r\n                }\r\n\r\n                if (orderDir === eOrderDir.Sell && limitType === eLimitType.TakeProfit) {\r\n                    return rate - percentage;\r\n                }\r\n\r\n                // When orderDir hasn't been selected\r\n                if (limitType === eLimitType.StopLoss) {\r\n                    return rate - percentage;\r\n                }\r\n\r\n                // For TakeProfit limit\r\n                return rate + percentage;\r\n            },\r\n\r\n            //--------------------------------------------------\r\n            // Calculate amount from given amount currency to customer currency\r\n            //--------------------------------------------------\r\n            CalculateValue: function (amount, quoteForOtherCcyToAccountCcy) {\r\n                return amountConverter.Convert(amount, quoteForOtherCcyToAccountCcy);\r\n            },\r\n\r\n            //--------------------------------------------------\r\n            // Calculate amount from customer currency to given currency\r\n            //--------------------------------------------------\r\n            CalculateAmount: function (amount, quoteForAccountCcyToOtherCcy, limitType) {\r\n                if (limitType == eLimitType.StopLoss) {\r\n                    amount *= -1;\r\n                }\r\n\r\n                return amountConverter.Convert(amount, quoteForAccountCcyToOtherCcy);\r\n            },\r\n\r\n            //--------------------------------------------------\r\n            // CalculateAmountFromRate\r\n            //--------------------------------------------------\r\n            CalculateAmountFromRate: function (rate, limitRate, dealAmount, orderDir) {\r\n                var operator = orderDir === eOrderDir.Sell ? -1 : 1;\r\n                var rateDifference = (limitRate - rate) * operator;\r\n                return dealAmount * general.RateRound(rateDifference);\r\n            },\r\n\r\n            //--------------------------------------------------\r\n            // CalculatePercentFromRate\r\n            //--------------------------------------------------\r\n            CalculatePercentFromRate: function (rate, limitRate) {\r\n                return (limitRate === 0) ? 100 : (100 * Math.abs(rate - limitRate) / rate);\r\n            }\r\n        };\r\n\r\n        return LimitValuesCalculator;\r\n    }\r\n);",
  "isBase64": false
}