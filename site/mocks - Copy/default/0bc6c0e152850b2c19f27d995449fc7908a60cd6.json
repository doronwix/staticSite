{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/InstrumentNotAvailableViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/InstrumentNotAvailableViewModel',\r\n    [\r\n        'require',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'StateObject!Transaction',\r\n        'devicemanagers/StatesManager'\r\n    ],\r\n    function InstrumentNotAvailableDef(require) {\r\n        var KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            stateObject = require('StateObject!Transaction'),\r\n            general = require('handlers/general'),\r\n            statesManager = require('devicemanagers/StatesManager');\r\n\r\n        var InstrumentNotAvailableViewModel = general.extendClass(KoComponentViewModel, function InstrumentNotAvailableClass() {\r\n            var self = this,\r\n                currentSelectedInstrument,\r\n                data = this.Data;\r\n\r\n            function init() {\r\n                setComputables();\r\n            }\r\n\r\n            function setComputables() {\r\n                var isActiveQuote = stateObject.get('isActiveQuote'),\r\n                    selectedInstrument = stateObject.get('selectedInstrument'),\r\n                    observableContext = null,\r\n                    isPureComputed = false;\r\n\r\n                data.instrumentData = self.createComputed(function computeInstrumentData() {\r\n                    var isActiveQuoteValue = isActiveQuote();\r\n\r\n                    if (general.isNullOrUndefined(isActiveQuoteValue)) {\r\n                        return {\r\n                            isAvailable: true,\r\n                            isChanged: false\r\n                        };\r\n                    } \r\n\r\n                    var isAvailable = !statesManager.States.IsMarketClosed() && isActiveQuoteValue,\r\n                        isChanged = currentSelectedInstrument !== selectedInstrument();\r\n\r\n                    currentSelectedInstrument = selectedInstrument();\r\n\r\n                    return {\r\n                        isAvailable: isAvailable,\r\n                        isChanged: isChanged\r\n                    };\r\n                }, observableContext, isPureComputed);\r\n            }\r\n\r\n            return {\r\n                Data: data,\r\n                init: init\r\n            };\r\n        });\r\n\r\n        var createViewModel = function () {\r\n            var viewModel = new InstrumentNotAvailableViewModel();\r\n\r\n            viewModel.init();\r\n\r\n            return viewModel;\r\n        };\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            }\r\n        };\r\n    }\r\n);",
  "isBase64": false
}