{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/Deals/EditClosingLimitBaseViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/Deals/EditClosingLimitBaseViewModel',\r\n    [\r\n        'require',\r\n        'helpers/ObservableCustomExtender',\r\n        'helpers/KoComponentViewModel',\r\n        'configuration/initconfiguration',\r\n        'viewmodels/limits/ExpirationDateModel',\r\n        'dataaccess/dalorder',\r\n        'cachemanagers/dealsmanager',\r\n        'devicemanagers/ViewModelsManager',\r\n        'FxNet/LogicLayer/Deal/DealAmountLabel',\r\n        'initdatamanagers/SymbolsManager',\r\n        'cachemanagers/QuotesManager',\r\n        'deviceviewmodels/BaseOrder',\r\n        'viewmodels/limits/SetLimitsViewModel',\r\n        'initdatamanagers/Customer',\r\n        'managers/CustomerProfileManager',\r\n        'initdatamanagers/InstrumentsManager',\r\n        'cachemanagers/activelimitsmanager',\r\n        'devicemanagers/StatesManager',\r\n        'managers/instrumentTranslationsManager',\r\n        'StateObject!Transaction',\r\n        'modules/BuilderForInBetweenQuote',\r\n        'handlers/general'\r\n    ],\r\n    function EditClosingLimitBaseDef(require) {\r\n        var ko = require('helpers/ObservableCustomExtender'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            settings = require('configuration/initconfiguration').EditClosingLimitConfiguration,\r\n            ExpirationDateModel = require('viewmodels/limits/ExpirationDateModel'),\r\n            dalOrders = require('dataaccess/dalorder'),\r\n            dealsManager = require('cachemanagers/dealsmanager'),\r\n            viewModelsManager = require('devicemanagers/ViewModelsManager'),\r\n            dealAmountLabel = require('FxNet/LogicLayer/Deal/DealAmountLabel'),\r\n            symbolsManager = require('initdatamanagers/SymbolsManager'),\r\n            quotesManager = require('cachemanagers/QuotesManager'),\r\n            BaseOrder = require('deviceviewmodels/BaseOrder'),\r\n            SetLimitsViewModel = require('viewmodels/limits/SetLimitsViewModel'),\r\n            customer = require('initdatamanagers/Customer'),\r\n            customerProfileManager = require('managers/CustomerProfileManager'),\r\n            InstrumentsManager = require('initdatamanagers/InstrumentsManager'),\r\n            activeLimitsManager = require('cachemanagers/activelimitsmanager'),\r\n            instrumentTranslationsManager = require('managers/instrumentTranslationsManager'),\r\n            stateObject = require('StateObject!Transaction'),\r\n            StatesManager = require('devicemanagers/StatesManager'),\r\n            general = require('handlers/general'),\r\n            BuilderForInBetweenQuote = require('modules/BuilderForInBetweenQuote');\r\n\r\n        var EditClosingLimitBaseViewModel = general.extendClass(KoComponentViewModel, function EditClosingLimitBaseClass() {\r\n            var self = this,\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = this.Data, // inherited from KoComponentViewModel\r\n                activeQuote = null,\r\n                setLimitsModel = new SetLimitsViewModel(),\r\n                baseOrder = new BaseOrder(),\r\n                expirationDateModel = new ExpirationDateModel(),\r\n                LimitNotFoundErrorKey = 'OrderError7',\r\n                PositionNotFoundErrorKey = 'OrderError8',\r\n                orderId;\r\n\r\n            function init(customSettings) {\r\n                parent.init.call(self, customSettings); // inherited from KoComponentViewModel\t\t\t\r\n                baseOrder.Init({}, data);\r\n                expirationDateModel.Init();\r\n\r\n                setProperties();\r\n                setObservables();\r\n                setComputables();\r\n\r\n                setLimitsModel.Init(data, self.getSettings().setlimitsConfiguration);\r\n\r\n                registerToDispatcher();\r\n                setChartProperties();\r\n                stateObject.update('currentRateDirectionSwitch', settings.currentRateDirectionSwitch);\r\n            }\r\n\r\n            function setProperties() {\r\n                data.PageName = eDealPage.EditClosingLimit;\r\n            }\r\n\r\n            function setObservables() {\r\n                data.dealRate = '';\r\n                data.dealRateLabel = {\r\n                    First: ko.observable(''),\r\n                    Middle: ko.observable(''),\r\n                    Last: ko.observable('')\r\n                };\r\n\r\n                data.spotRateLabel = {\r\n                    First: ko.observable(''),\r\n                    Middle: ko.observable(''),\r\n                    Last: ko.observable('')\r\n                };\r\n\r\n                data.closingRateLabel = {\r\n                    First: ko.observable(''),\r\n                    Middle: ko.observable(''),\r\n                    Last: ko.observable('')\r\n                };\r\n\r\n                data.orderID = ko.observable(\"\");\r\n                data.exeTime = ko.observable(\"\");\r\n                data.positionNumber = ko.observable(\"\");\r\n                data.ccyPairLong = ko.observable(\"\");\r\n                data.selectedDealAmount = stateObject.set('selectedDealAmount', ko.observable(''));\r\n                data.selectedDeal = ko.observable(null);\r\n                data.dealAmountLabel = ko.observable(\"\");\r\n                data.isNonForex = ko.observable(true);\r\n                data.baseSymbolName = ko.observable(\"\");\r\n                data.baseSymbolId = ko.observable(\"\");\r\n                data.otherSymbolId = ko.observable(\"\");\r\n\r\n                data.isActiveQuote = stateObject.set('isActiveQuote', ko.observable(null));\r\n                data.quoteForOtherCcyToAccountCcy = stateObject.set('quoteForOtherCcyToAccountCcy', ko.observable(''));\r\n                data.quoteForAccountCcyToOtherCcy = ko.observable(\"\");\r\n\r\n                data.quotesAvailable = ko.observable(false);\r\n                data.isProcessing = ko.observable(false);\r\n                data.limitsReady = ko.observable(false);\r\n\r\n                data.customerSymbolId = ko.observable(customer.prop.baseCcyId());\r\n                data.customerSymbolName = stateObject.set('customerSymbolName', ko.observable(''));\r\n                data.selectedCcyName = ko.observable(customer.prop.selectedCcyName());\r\n                data.selectedCcyId = ko.observable(customer.prop.selectedCcyId());\r\n                data.limitCalc = ko.observable(\"\").extend({ dirty: false });\r\n                data.selectedInstrument = stateObject.set('selectedInstrument', ko.observable(''));\r\n                data.amountSymbol = stateObject.set('amountSymbol', ko.observable(''));\r\n                data.ccyPair = stateObject.set('ccyPair', ko.observable(''));\r\n                data.orderDir = stateObject.set('orderDir', ko.observable(''));\r\n                data.bid = stateObject.set('bid', ko.observable(''));\r\n                data.ask = stateObject.set('ask', ko.observable(''));\r\n                data.open = stateObject.set('open', ko.observable(''));\r\n                data.close = stateObject.set('close', ko.observable(''));\r\n                data.change = stateObject.set('change', ko.observable(''));\r\n                data.formattedChange = stateObject.set('formattedChange', ko.observable(''));\r\n                data.tradeTime = stateObject.set('tradeTime', ko.observable(''));\r\n                data.changePips = ko.observable(\"\");\r\n                data.highBid = stateObject.set('highBid', ko.observable(''));\r\n                data.lowAsk = stateObject.set('lowAsk', ko.observable(''));\r\n                data.prevBid = ko.observable(\"\");\r\n                data.prevAsk = ko.observable(\"\");\r\n\r\n                data.bidPips = ko.observable(\"\");\r\n                data.bid10K = ko.observable(\"\");\r\n                data.bid100K = ko.observable(\"\");\r\n                data.askPips = ko.observable(\"\");\r\n                data.ask10K = ko.observable(\"\");\r\n                data.ask100K = ko.observable(\"\");\r\n\r\n                data.limitType = ko.observable(eLimitType.None);\r\n                data.stopLossInCustomerCcy = ko.observable(\"\");\r\n                data.takeProfitInCustomerCcy = ko.observable(\"\");\r\n                data.displaySlPercentSymbol = ko.observable(false);\r\n                data.displayTpPercentSymbol = ko.observable(false);\r\n                data.displaySlAmountCcySymbol = ko.observable(false);\r\n                data.displayTpAmountCcySymbol = ko.observable(false);\r\n\r\n                data.profileKeyForDefaultTab = ko.observable(settings.profileKeyForDefaultTab);\r\n                data.initialToolTab = stateObject.set('initialToolTab', ko.observable(''));\r\n\r\n                data.isForex = ko.observable(\"\");\r\n                data.isShare = stateObject.set('isShare', ko.observable(''));\r\n                data.isFuture = stateObject.set('isFuture', ko.observable(''));\r\n                data.isStock = stateObject.set('isStock', ko.observable(''));\r\n\r\n                data.isProfit = ko.observable(\"\");\r\n                data.profitLoss = ko.observable(\"\");\r\n\r\n                data.slRate = ko.observable(\"\").extend({ dirty: false });\r\n                data.tpRate = ko.observable(\"\").extend({ dirty: false });\r\n                data.originalLimits = {\r\n                    slRate: ko.observable(\"\"),\r\n                    tpRate: ko.observable(\"\")\r\n                };\r\n                data.setLimitsIsDirty = ko.observable(false);\r\n                data.closingLimit = ko.observable(null);\r\n                data.valueDate = ko.observable(null);\r\n                data.hasAdditionalPL = ko.observable(false);\r\n                data.additionalPL = ko.observable(\"\");\r\n\r\n                data.customerSymbolName(customer.prop.baseCcyName());\r\n                data.initialToolTab(customerProfileManager.ProfileCustomer()[settings.profileKeyForDefaultTab] || eNewDealTool.Chart);\r\n                data.chartTransactionEnabled = stateObject.set('chartTransactionEnabled', ko.observable(false));\r\n            }\r\n\r\n            function setComputables() {\r\n                data.setLimitsIsDirty = self.createComputed(function () {\r\n                    var limitsReady = data.limitsReady(),\r\n                        limitType = data.limitType();\r\n\r\n                    if (!limitsReady) {\r\n                        return false;\r\n                    }\r\n\r\n                    var slOriginalRate = general.toNumeric(data.slRate.originalValue()),\r\n                        stopLossRate = general.toNumeric(setLimitsModel.Data.stopLossRate() || \"0\"),\r\n                        slChanged = slOriginalRate !== stopLossRate,\r\n\r\n                        tpOriginalRate = general.toNumeric(data.tpRate.originalValue()),\r\n                        takeProfitRate = general.toNumeric(setLimitsModel.Data.takeProfitRate() || \"0\"),\r\n                        tpChanged = tpOriginalRate !== takeProfitRate;\r\n\r\n                    if (limitType === eLimitType.StopLoss) {\r\n                        return slChanged;\r\n                    } else if (limitType === eLimitType.TakeProfit) {\r\n                        return tpChanged;\r\n                    }\r\n\r\n                    return false;\r\n                });\r\n\r\n                data.UpdateButtonEnabled = self.createComputed(function () {\r\n                    var isDirtyLimits = data.setLimitsIsDirty(),\r\n                        viewModelReady = data.limitsReady() && data.quotesAvailable(),\r\n                        isActiveQuote = data.isActiveQuote(),\r\n                        isBrokerAllowLimitsOnNoRates = customer.prop.brokerAllowLimitsOnNoRates,\r\n                        isProcessing = data.isProcessing(),\r\n                        isExpirationDateDirty = expirationDateModel.Data.isExpirationDateDirty(),\r\n                        hasClosingLimit = !general.isNullOrUndefined(data.closingLimit());\r\n\r\n                    return ((isBrokerAllowLimitsOnNoRates || isActiveQuote) && viewModelReady && !isProcessing && (isDirtyLimits || (isExpirationDateDirty && hasClosingLimit)));\r\n                });\r\n\r\n                data.hasRateAdded = self.createComputed(function () {\r\n                    var originalRate;\r\n\r\n                    if (data.limitType() === eLimitType.StopLoss) {\r\n                        originalRate = data.slRate.originalValue();\r\n                    } else if (data.limitType() === eLimitType.TakeProfit) {\r\n                        originalRate = data.tpRate.originalValue();\r\n                    } else {\r\n                        return false;\r\n                    }\r\n\r\n                    return general.isNumber(originalRate) && originalRate != 0;\r\n                });\r\n\r\n                data.adj = ko.computed(function () {\r\n                    if (customer.prop.dealPermit === eDealPermit.Islamic) {\r\n                        return false;\r\n                    }\r\n\r\n                    if (!data.valueDate()) {\r\n                        return true;\r\n                    }\r\n\r\n                    return data.positionNumber() !== data.orderID();\r\n                });\r\n            }\r\n\r\n            function updateViewModelData() {\r\n                orderId = viewModelsManager.VManager.GetViewArgs(eViewTypes.vEditClosingLimit).orderId;\r\n\r\n                var selectedDeal = dealsManager.Deals.GetItem(orderId),\r\n                    instrument,\r\n                    amountDeal;\r\n\r\n                if (selectedDeal) {\r\n                    data.orderID(orderId);\r\n\r\n                    data.selectedDeal(selectedDeal);\r\n                    data.limitType(viewModelsManager.VManager.GetViewArgs(eViewTypes.vEditClosingLimit).limitType);\r\n\r\n                    data.exeTime(selectedDeal.exeTime);\r\n                    data.positionNumber(selectedDeal.positionNumber);\r\n                    data.orderDir(selectedDeal.orderDir);\r\n                    data.selectedInstrument(selectedDeal.instrumentID);\r\n\r\n                    amountDeal = selectedDeal.orderDir === eOrderDir.Sell ? selectedDeal.sellAmount : selectedDeal.buyAmount;\r\n                    data.selectedDealAmount(amountDeal);\r\n                    data.limitCalc(selectedDeal.orderRate);\r\n\r\n                    data.slRate(selectedDeal.slRate);\r\n                    data.slRate.markClean();\r\n                    data.originalLimits.slRate(selectedDeal.slRate);\r\n\r\n                    data.tpRate(selectedDeal.tpRate);\r\n                    data.tpRate.markClean();\r\n                    data.originalLimits.tpRate(selectedDeal.tpRate);\r\n                    data.valueDate(selectedDeal.valueDate);\r\n                    data.hasAdditionalPL(Number(selectedDeal.additionalPL) !== 0);\r\n                    data.additionalPL(selectedDeal.additionalPL);\r\n\r\n                    var dealRate = selectedDeal.orderRate;\r\n                    var splitDealRate = Format.tenthOfPipSplitRate(dealRate, selectedDeal.instrumentID);\r\n\r\n                    data.dealRate = dealRate;\r\n                    data.dealRateLabel.First = splitDealRate.button.first;\r\n                    data.dealRateLabel.Middle = splitDealRate.button.middle;\r\n                    data.dealRateLabel.Last = splitDealRate.button.last;\r\n\r\n                    setProfitLoss(selectedDeal.pl);\r\n                    setSpotRateLabel(selectedDeal);\r\n                    setClosingRateLabel(selectedDeal);\r\n\r\n                    instrument = InstrumentsManager.GetInstrument(selectedDeal.instrumentID);\r\n\r\n                    if (instrument) {\r\n                        data.isForex(instrument.isForex);\r\n                        data.isShare(instrument.isShare);\r\n                        data.isFuture(instrument.isFuture);\r\n                        data.isStock(instrument.isStock);\r\n                        data.ccyPairLong(instrumentTranslationsManager.Long(instrument.id));\r\n                        data.isNonForex(instrument.instrumentTypeId !== eInstrumentType.Currencies);\r\n                        data.baseSymbolName(symbolsManager.GetTranslatedSymbolById(instrument.baseSymbol));\r\n                        data.amountSymbol(instrument.otherSymbol);\r\n                        data.ccyPair(instrument.ccyPair);\r\n                        data.baseSymbolId(instrument.baseSymbol);\r\n                        data.otherSymbolId(instrument.otherSymbol);\r\n                        var result = dealAmountLabel.Translate(instrument);\r\n                        data.dealAmountLabel(result.label);\r\n\r\n                        populateInBetweenQuotes(instrument);\r\n                        updateQuoteValues();\r\n\r\n                        expirationDateModel.UpdateSelectedWithToday(selectedDeal.instrumentID);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function populateInBetweenQuotes(instrument) {\r\n                BuilderForInBetweenQuote.GetInBetweenQuote(instrument.otherSymbol, customer.prop.baseCcyId())\r\n                    .then(function (response) {\r\n                        data.quoteForOtherCcyToAccountCcy(response);\r\n                    }).done();\r\n\r\n                BuilderForInBetweenQuote.GetInBetweenQuote(customer.prop.baseCcyId(), instrument.otherSymbol)\r\n                    .then(function (response) {\r\n                        data.quoteForAccountCcyToOtherCcy(response);\r\n                    }).done();\r\n            }\r\n\r\n            function setProfitLoss(profitLoss) {\r\n                data.profitLoss(profitLoss);\r\n                data.isProfit(general.toNumeric(profitLoss) >= 0);\r\n            }\r\n\r\n            function setSpotRateLabel(selectedDeal) {\r\n                var splitSpotRate = Format.tenthOfPipSplitRate(selectedDeal.spotRate, selectedDeal.instrumentID);\r\n\r\n                data.spotRateLabel.First(splitSpotRate.button.first);\r\n                data.spotRateLabel.Middle(splitSpotRate.button.middle);\r\n                data.spotRateLabel.Last(splitSpotRate.button.last);\r\n            }\r\n\r\n            function setClosingRateLabel(selectedDeal) {\r\n                var splitClosingRate = Format.tenthOfPipSplitRate(selectedDeal.closingRate, selectedDeal.instrumentID);\r\n\r\n                data.closingRateLabel.First(splitClosingRate.button.first);\r\n                data.closingRateLabel.Middle(splitClosingRate.button.middle);\r\n                data.closingRateLabel.Last(splitClosingRate.button.last);\r\n            }\r\n\r\n            function registerToDispatcher() {\r\n                quotesManager.OnChange.Add(updateQuoteValues);\r\n                dealsManager.OnDealsChange.Add(onDealsChange);\r\n                dealsManager.OnDealsPLChange.Add(onDealsPLChange);\r\n            }\r\n\r\n            function unRegisterFromDispatcher() {\r\n                quotesManager.OnChange.Remove(updateQuoteValues);\r\n                dealsManager.OnDealsChange.Remove(onDealsChange);\r\n                dealsManager.OnDealsPLChange.Remove(onDealsPLChange);\r\n            }\r\n\r\n            function updateQuoteValuesHandler() {\r\n                activeQuote = quotesManager.Quotes.GetItem(data.selectedInstrument());\r\n\r\n                if (activeQuote) {\r\n                    data.isActiveQuote(activeQuote.isActive());\r\n\r\n                    data.prevBid(data.bid());\r\n                    data.prevAsk(data.ask());\r\n                    data.bid(activeQuote.bid);\r\n                    data.ask(activeQuote.ask);\r\n                    data.open(activeQuote.open);\r\n                    data.close(activeQuote.close);\r\n                    data.change(Format.toPercent(activeQuote.change));\r\n                    data.formattedChange(Format.toSignedPercent(activeQuote.change, ''));\r\n                    data.changePips(activeQuote.changePips);\r\n                    data.highBid(activeQuote.highBid);\r\n                    data.lowAsk(activeQuote.lowAsk);\r\n                    data.tradeTime(activeQuote.tradeTime);\r\n\r\n                    data.quotesAvailable(true);\r\n                }\r\n            }\r\n\r\n            var updateQuoteValues = debounce(updateQuoteValuesHandler);\r\n\r\n            function onDealsChange(updatedItems) {\r\n                var deal = dealsManager.Deals.GetItem(updatedItems.editedItems[0]);\r\n\r\n                if (deal) {\r\n                    data.slRate(deal.slRate);\r\n                    data.tpRate(deal.tpRate);\r\n                    data.slRate.markClean();\r\n                    data.tpRate.markClean();\r\n                }\r\n            }\r\n\r\n            function onDealsPLChange(changes) {\r\n                var updatedItems = changes.dealsIDs;\r\n\r\n                if (updatedItems.indexOf(orderId) >= 0) {\r\n                    var selectedDeal = dealsManager.Deals.GetItem(orderId);\r\n                    if (selectedDeal) {\r\n                        setSpotRateLabel(selectedDeal);\r\n                        setProfitLoss(selectedDeal.pl);\r\n                        setClosingRateLabel(selectedDeal);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function createAmountFieldsWrappers() {\r\n                var slAmount = ko.observable(\"\"),\r\n                    tpAmount = ko.observable(\"\");\r\n\r\n                // Stop Loss\r\n                self.subscribeTo(setLimitsModel.Data.ccySLAmount, function (value) {\r\n                    var isAmountTabSelected = setLimitsModel.Data.curSlActiveTab() === eSetLimitsTabs.Amount;\r\n\r\n                    if (!isAmountTabSelected) {\r\n                        slAmount(value);\r\n                    }\r\n                });\r\n\r\n                data.stopLossInCustomerCcy = self.createComputed({\r\n                    read: function () {\r\n                        var isAmountTabSelected = setLimitsModel.Data.curSlActiveTab() === eSetLimitsTabs.Amount,\r\n                            rawValue,\r\n                            amount = \"\";\r\n\r\n                        if (!isAmountTabSelected) {\r\n                            rawValue = setLimitsModel.Data.ccySLAmount();\r\n                        } else {\r\n                            rawValue = slAmount();\r\n                        }\r\n\r\n                        if (rawValue === \"NA\") {\r\n                            return rawValue;\r\n                        }\r\n\r\n                        if (rawValue !== \"\" && !isNaN(rawValue)) {\r\n                            amount = Number(rawValue);\r\n                            amount = amount < 0 ? Math.floor(amount) : Math.ceil(amount);\r\n                        }\r\n\r\n                        return amount;\r\n                    }\r\n                });\r\n\r\n                // apply validator\r\n                data.stopLossInCustomerCcy.extend({\r\n                    validation: {\r\n                        validator: function () {\r\n                            return setLimitsModel.Data.stopLossAmount.isValid();\r\n                        }, params: setLimitsModel.Data.stopLossAmount\r\n                    }\r\n                });\r\n\r\n                data.stopLossInCustomerCcy.extend({\r\n                    notify: \"always\"\r\n                });\r\n\r\n                // Take Profit\r\n                self.subscribeTo(setLimitsModel.Data.ccyTPAmount, function (value) {\r\n                    var isAmountTabSelected = setLimitsModel.Data.curTpActiveTab() === eSetLimitsTabs.Amount;\r\n\r\n                    if (!isAmountTabSelected) {\r\n                        tpAmount(value);\r\n                    }\r\n                });\r\n\r\n                data.takeProfitInCustomerCcy = self.createComputed({\r\n                    read: function () {\r\n                        var isAmountTabSelected = setLimitsModel.Data.curTpActiveTab() === eSetLimitsTabs.Amount,\r\n                            rawValue,\r\n                            amount = \"\";\r\n\r\n                        if (!isAmountTabSelected) {\r\n                            rawValue = setLimitsModel.Data.ccyTPAmount();\r\n                        } else {\r\n                            rawValue = tpAmount();\r\n                        }\r\n\r\n                        if (rawValue === \"NA\") {\r\n                            return rawValue;\r\n                        }\r\n\r\n                        if (rawValue !== \"\" && !isNaN(rawValue)) {\r\n                            amount = Number(rawValue);\r\n                            amount = amount < 0 ? Math.floor(amount) : Math.ceil(amount);\r\n                        }\r\n\r\n                        return amount;\r\n                    }\r\n                });\r\n\r\n                // apply validator\r\n                data.takeProfitInCustomerCcy.extend({\r\n                    validation: {\r\n                        validator: function () {\r\n                            return setLimitsModel.Data.takeProfitAmount.isValid();\r\n                        }, params: setLimitsModel.Data.takeProfitAmount\r\n                    }\r\n                });\r\n\r\n                data.takeProfitInCustomerCcy.extend({\r\n                    notify: \"always\"\r\n                });\r\n            }\r\n\r\n            function getLimitsValidationModel() {\r\n                if (data.limitType() === eLimitType.StopLoss) {\r\n                    return ko.validatedObservable({\r\n                        stopLossAmount: setLimitsModel.Data.stopLossAmount,\r\n                        ccySLAmount: setLimitsModel.Data.ccySLAmount,\r\n                        stopLossRate: setLimitsModel.Data.stopLossRate,\r\n                        stopLossPercent: setLimitsModel.Data.stopLossPercent\r\n                    });\r\n                } else if (data.limitType() === eLimitType.TakeProfit) {\r\n                    return ko.validatedObservable({\r\n                        takeProfitAmount: setLimitsModel.Data.takeProfitAmount,\r\n                        ccyTPAmount: setLimitsModel.Data.ccyTPAmount,\r\n                        takeProfitRate: setLimitsModel.Data.takeProfitRate,\r\n                        takeProfitPercent: setLimitsModel.Data.takeProfitPercent\r\n                    });\r\n                } else {\r\n                    return ko.validatedObservable({\r\n                        stopLossAmount: setLimitsModel.Data.stopLossAmount,\r\n                        takeProfitAmount: setLimitsModel.Data.takeProfitAmount,\r\n                        ccySLAmount: setLimitsModel.Data.ccySLAmount,\r\n                        ccyTPAmount: setLimitsModel.Data.ccyTPAmount,\r\n                        stopLossRate: setLimitsModel.Data.stopLossRate,\r\n                        takeProfitRate: setLimitsModel.Data.takeProfitRate,\r\n                        stopLossPercent: setLimitsModel.Data.stopLossPercent,\r\n                        takeProfitPercent: setLimitsModel.Data.takeProfitPercent\r\n                    });\r\n                }\r\n            }\r\n\r\n            function editLimitClick() {\r\n                var selectedDeal = dealsManager.Deals.GetItem(orderId);\r\n\r\n                if (StatesManager.States.fxDenied() == true) {\r\n                    baseOrder.ValidateOnlineTradingUser();\r\n                    return false;\r\n                }\r\n\r\n                if (general.isNullOrUndefined(selectedDeal)) {\r\n                    displayAlert(PositionNotFoundErrorKey);\r\n                    return;\r\n                }\r\n\r\n                if (settings.showValidationTooltips) {\r\n                    var limitsErrors = data.limitType() === eLimitType.StopLoss ?\r\n                        setLimitsModel.ValidateSlRate() : setLimitsModel.ValidateTpRate();\r\n\r\n                    if (limitsErrors.length) {\r\n                        ko.postbox.publish('edit-deal-limit-show-validation-tooltips');\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                var limits = fillLimitsData();\r\n\r\n                if (!general.isNullOrUndefined(limits) && limits.length > 0) {\r\n                    data.isProcessing(true);\r\n                    dalOrders.SaveLimits(limits, onActionReturn);\r\n                }\r\n            }\r\n\r\n            var saveLimit = debounce(editLimitClick, 300, true);\r\n\r\n            function deleteLimit() {\r\n                if (!data.hasRateAdded()) {\r\n                    return;\r\n                }\r\n\r\n                if (data.limitType() === eLimitType.StopLoss) {\r\n                    setLimitsModel.Data.stopLossRate(\"\");\r\n                } else if (data.limitType() === eLimitType.TakeProfit) {\r\n                    setLimitsModel.Data.takeProfitRate(\"\");\r\n                } else {\r\n                    return;\r\n                }\r\n\r\n                saveLimit();\r\n            }\r\n\r\n            function fillNewLimitData(limitType, limitValue) {\r\n\r\n                return {\r\n                    instrumentID: data.selectedInstrument(),\r\n                    positionNumber: data.positionNumber(),\r\n                    amount: 0,\r\n                    orderDir: data.orderDir() === eOrderDir.Sell ? eOrderDir.Buy : eOrderDir.Sell,\r\n                    limitRate: limitValue,\r\n                    ifDoneSLRate: 0,\r\n                    ifDoneTPRate: 0,\r\n                    expirationDate: getExpirationDate(),\r\n                    type: limitType,\r\n                    mode: eLimitMode.CloseDeal,\r\n                    action: eOrderActionType.NewLimit\r\n                };\r\n            }\r\n\r\n            function fillEditLimitData(limitId, limitValue) {\r\n                var limit = activeLimitsManager.limits.GetItem(limitId);\r\n\r\n                if (!general.isNullOrUndefined(limit)) {\r\n                    limit.limitRate = limitValue;\r\n                    limit.expirationDate = getExpirationDate();\r\n                    limit.ifDoneSLRate = 0;\r\n                    limit.ifDoneTPRate = 0;\r\n                    limit.amount = 0;\r\n                    limit.action = eOrderActionType.EditLimit;\r\n\r\n\r\n                    return limit;\r\n                }\r\n\r\n                displayAlert(LimitNotFoundErrorKey);\r\n            }\r\n\r\n            function fillDeleteLimitData(limitId) {\r\n                var limit = activeLimitsManager.limits.GetItem(limitId);\r\n\r\n                if (!general.isNullOrUndefined(limit)) {\r\n                    limit.action = eOrderActionType.DeleteLimit;\r\n\r\n                    return limit;\r\n                }\r\n\r\n                displayAlert(LimitNotFoundErrorKey);\r\n            }\r\n\r\n\r\n            function fillLimitsData() {\r\n                var returnLimits = [],\r\n                    slLimit,\r\n                    tpLimit,\r\n                    selectedDeal = dealsManager.Deals.GetItem(orderId),\r\n                    isExpirationDateDirty = expirationDateModel.Data.isExpirationDateDirty();\r\n\r\n                if (general.isNullOrUndefined(selectedDeal)) {\r\n                    displayAlert(PositionNotFoundErrorKey);\r\n                    return;\r\n                }\r\n\r\n                if ((selectedDeal.slID == \"\" || selectedDeal.slID == 0) && (setLimitsModel.Data.stopLossRate.isDirty())) {\r\n                    // New SL Limit\r\n                    slLimit = fillNewLimitData(eLimitType.StopLoss, setLimitsModel.Data.stopLossRate());\r\n                } else if ((setLimitsModel.Data.stopLossRate.isDirty() || (isExpirationDateDirty && data.limitType() === eLimitType.StopLoss)) && setLimitsModel.Data.stopLossRate() != \"\") {\r\n                    // Edit SL Limit\r\n                    slLimit = fillEditLimitData(selectedDeal.slID, setLimitsModel.Data.stopLossRate());\r\n                } else if (selectedDeal.slID != \"\" && selectedDeal.slID != 0 && setLimitsModel.Data.stopLossRate.isDirty()) {\r\n                    // Remove SL Limit\r\n                    slLimit = fillDeleteLimitData(selectedDeal.slID);\r\n                }\r\n\r\n                if ((selectedDeal.tpID == \"\" || selectedDeal.tpID == 0) && (setLimitsModel.Data.takeProfitRate.isDirty())) {\r\n                    // New TP Limit\r\n                    tpLimit = fillNewLimitData(eLimitType.TakeProfit, setLimitsModel.Data.takeProfitRate());\r\n                } else if ((setLimitsModel.Data.takeProfitRate.isDirty() || (isExpirationDateDirty && data.limitType() === eLimitType.TakeProfit)) && setLimitsModel.Data.takeProfitRate() != \"\") {\r\n                    // Edit TP Limit\r\n                    tpLimit = fillEditLimitData(selectedDeal.tpID, setLimitsModel.Data.takeProfitRate());\r\n                } else if (selectedDeal.tpID != \"\" && selectedDeal.tpID != 0 && setLimitsModel.Data.takeProfitRate.isDirty()) {\r\n                    // Remove TP Limit\r\n                    tpLimit = fillDeleteLimitData(selectedDeal.tpID);\r\n                }\r\n\r\n                if (slLimit) {\r\n                    returnLimits.push(slLimit);\r\n                }\r\n\r\n                if (tpLimit) {\r\n                    returnLimits.push(tpLimit);\r\n                }\r\n\r\n                return returnLimits;\r\n            }\r\n\r\n            function displayAlert(key) {\r\n                AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, Dictionary.GetItem(key), null, { redirectToView: eForms.OpenDeals });\r\n                AlertsManager.PopAlert(AlertTypes.ServerResponseAlert);\r\n            }\r\n\r\n            function getExpirationDate() {\r\n                var expirationDate = null;\r\n                if (!expirationDateModel.Data.expirationDateSelector.IsGoodTillCancelChecked()) {\r\n                    expirationDate = expirationDateModel.Data.expirationDate();\r\n                    var selectedHoursValue = expirationDateModel.Data.selectedHoursValue();\r\n\r\n                    if (general.isObjectType(selectedHoursValue) && general.isEmptyType(selectedHoursValue)) {\r\n                        expirationDate += \"  \" + selectedHoursValue.value;\r\n                    } else if (general.isStringType(selectedHoursValue) && !general.isEmptyType(selectedHoursValue)) {\r\n                        expirationDate += \"  \" + selectedHoursValue;\r\n                    } else {\r\n                        expirationDate += \"  00:00\";\r\n                    }\r\n                }\r\n                return expirationDate;\r\n            }\r\n\r\n            function onActionReturn(result, callerId, instrumentId, requestData) {\r\n                var selectedDeal = dealsManager.Deals.GetItem(orderId);\r\n\r\n                if (!selectedDeal) {\r\n                    return;\r\n                }\r\n\r\n                var instrument = InstrumentsManager.GetInstrument(selectedDeal.instrumentID);\r\n                if (!instrument) {\r\n                    return;\r\n                }\r\n\r\n                data.isProcessing(false);\r\n                var parms = {};\r\n\r\n                if (settings.redirectToOpenDeals) {\r\n                    parms.redirectToView = eForms.OpenDeals;\r\n                }\r\n\r\n                if ('valueDate' in selectedDeal) {\r\n                    parms.valueDate = selectedDeal.valueDate;\r\n                }\r\n\r\n                baseOrder.OnActionReturn(result, callerId, instrument, general.extendType(parms, { requestData: requestData }));\r\n            }\r\n\r\n            function getDealRateValue() {\r\n                orderId = viewModelsManager.VManager.GetViewArgs(eViewTypes.vEditClosingLimit).orderId;\r\n                return dealsManager.Deals.GetItem(orderId).orderRate;\r\n            }\r\n\r\n            function setChartProperties() {\r\n                getDealRateValue();\r\n                stateObject.update(\"stopLossRate\", setLimitsModel.Data.stopLossRate);\r\n                stateObject.update(\"takeProfitRate\", setLimitsModel.Data.takeProfitRate);\r\n                stateObject.update(\"dealRate\", getDealRateValue());\r\n                stateObject.update('chart', settings.chart);\r\n            }\r\n\r\n            function dispose() {\r\n                unRegisterFromDispatcher();\r\n                stateObject.unset('cachedOvernightFinancing');\r\n                stateObject.unset('currentRateDirectionSwitch');\r\n                stateObject.unset('isActiveQuote');\r\n                parent.dispose.call(self);\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Data: data,\r\n                TPField: setLimitsModel.TPField,\r\n                SLField: setLimitsModel.SLField,\r\n                SetLimitsInfo: setLimitsModel.Data,\r\n                SetLimitsViewProperties: setLimitsModel.ViewProperties,\r\n                ExpirationDate: expirationDateModel,\r\n                SetLimitsModel: setLimitsModel,\r\n                EditLimit: saveLimit,\r\n                DeleteLimit: deleteLimit,\r\n                getLimitsValidationModel: getLimitsValidationModel,\r\n                createAmountFieldsWrappers: createAmountFieldsWrappers,\r\n                updateViewModelData: updateViewModelData,\r\n                FillLimitsData: fillLimitsData\r\n            };\r\n        });\r\n        return EditClosingLimitBaseViewModel;\r\n    }\r\n);\r\n",
  "isBase64": false
}