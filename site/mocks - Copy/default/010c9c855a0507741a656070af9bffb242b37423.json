{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/FxNet/LogicLayer/Deal/DealMarginCalculator.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'FxNet/LogicLayer/Deal/DealMarginCalculator',\r\n    [\r\n        'require',\r\n        'initdatamanagers/Customer',\r\n        'handlers/AmountConverter',\r\n        'handlers/general',\r\n    ],\r\n    function (require) {\r\n        var Customer = require(\"initdatamanagers/Customer\"),\r\n            general = require('handlers/general'),\r\n            AmountConverter = require(\"handlers/AmountConverter\");\r\n\r\n        /* \r\n        * Computes deal margin for the given parameters\r\n        *\r\n        * @param {Object} params\r\n        *  params.orderDir\r\n        *  params.dealAmount\r\n        *  params.dealRate\r\n        *  params.quoteForBaseCcyToAccountCcy\r\n        *  params.quoteForOtherCcyToAccountCcy\r\n        *  params.baseSymbol\r\n        *  params.hasPosition\r\n        *  params.otherSymbol\r\n        *  params.otherSymbolAmount\r\n        *  params.baseSymbolAmount\r\n        *  params.requiredMarginPercentage\r\n        */\r\n        var calculateMargin = function (params) {\r\n\r\n            if (!hasValidParams(params)) {\r\n                return;\r\n            }\r\n\r\n            var totalOtherAmountExistingDeals = general.toNumeric(params.otherSymbolAmount),\r\n                totalBaseAmountExistingDeals = general.toNumeric(params.baseSymbolAmount),\r\n                requiredMarginPercentage = general.toNumeric(params.requiredMarginPercentage),\r\n                dealAmountInOtherCcy = params.dealAmount * general.toNumeric(params.dealRate),\r\n                signForAmountInBase,\r\n                signForAmountInOther;\r\n\r\n            if (params.hasPosition) {\r\n                signForAmountInBase = params.orderDir === eOrderDir.Sell ? -1 : 1;\r\n                signForAmountInOther = signForAmountInBase * -1;\r\n            } else {\r\n                signForAmountInBase = signForAmountInOther = 1;\r\n            }\r\n\r\n            var totalOtherAmountExistingDealsInAccountCcy = roundValueWithPrecision(AmountConverter.Convert(Math.abs(totalOtherAmountExistingDeals), params.quoteForOtherCcyToAccountCcy, true), 2);\r\n            var totalBaseAmountExistingDealsInAccountCcy = roundValueWithPrecision(AmountConverter.Convert(Math.abs(totalBaseAmountExistingDeals), params.quoteForBaseCcyToAccountCcy, true), 2);\r\n            var maxVolumeExistingDeals = Math.max(totalOtherAmountExistingDealsInAccountCcy, totalBaseAmountExistingDealsInAccountCcy);\r\n            var usedMarginExistingDeals = roundValueWithPrecision(maxVolumeExistingDeals * requiredMarginPercentage, 2);\r\n\r\n            var totalOtherAmountSimulatedInAccountCcy = roundValueWithPrecision(AmountConverter.Convert(Math.abs(totalOtherAmountExistingDeals + dealAmountInOtherCcy * signForAmountInOther), params.quoteForOtherCcyToAccountCcy, true), 2);\r\n            var totalBaseAmountSimulatedInAccountCcy = roundValueWithPrecision(AmountConverter.Convert(Math.abs(totalBaseAmountExistingDeals + params.dealAmount * signForAmountInBase), params.quoteForBaseCcyToAccountCcy, true), 2);\r\n            var maxVolumeSimulated = Math.max(totalOtherAmountSimulatedInAccountCcy, totalBaseAmountSimulatedInAccountCcy);\r\n            var usedMarginSimulated = roundValueWithPrecision(maxVolumeSimulated * requiredMarginPercentage, 2);\r\n\r\n            var dealUsedMargin = usedMarginSimulated - usedMarginExistingDeals;\r\n\r\n            return roundValueWithPrecision(dealUsedMargin, 2);\r\n        };\r\n\r\n        function roundValueWithPrecision(value, precision) {\r\n            var factor = Math.pow(10, precision);\r\n\r\n            return Math.round(value * factor) / factor;\r\n        }\r\n\r\n        var calculatePipWorth = function (dealAmount, pipDigit, quoteForOtherCcyToAccountCcy, conversionRate) {\r\n            var pipWorth = dealAmount * (1 / Math.pow(10, pipDigit));\r\n            var convertPipWorth = convert(pipWorth, quoteForOtherCcyToAccountCcy);\r\n            var pipWorthFormat;\r\n\r\n            if (conversionRate > 10 && convertPipWorth) {\r\n                pipWorthFormat = convertPipWorth.toFixed(0);\r\n            } else {\r\n                pipWorthFormat = toPipWorthFormat(convertPipWorth);\r\n            }\r\n\r\n            return pipWorthFormat;\r\n        };\r\n\r\n        var calculateDealAmount = function (params) {\r\n\r\n            if (!params.quoteForOtherCcyToAccountCcy) {\r\n                return \"\";\r\n            }\r\n\r\n            if (params.baseSymbol == Customer.prop.baseCcyId()) {\r\n                return params.dealAmount;\r\n            }\r\n\r\n            var convertedDealAmount = convert(params.dealRate * params.dealAmount, params.quoteForOtherCcyToAccountCcy);\r\n\r\n            return convertedDealAmount;\r\n        }\r\n\r\n        var calculateSpreadWorthInAcountCCY = function (params) {\r\n            var askBidDifference = params.ask - params.bid,\r\n                spreadAmountInOther = params.dealAmount * askBidDifference,\r\n                spreadWorthInAcountCCY = 0;\r\n\r\n            if (general.isNumber(spreadAmountInOther)) {\r\n                spreadWorthInAcountCCY = Math.abs(convert(-spreadAmountInOther, params.quoteForOtherCcyToAccountCcy));\r\n            }\r\n\r\n            return roundValueWithPrecision(spreadWorthInAcountCCY, 2);\r\n        };\r\n\r\n        var convert = function (dealAmount, inBetweenQuote) {\r\n            var result = AmountConverter.Convert(dealAmount, inBetweenQuote);\r\n            return result;\r\n        };\r\n\r\n        var toPipWorthFormat = function (value) {\r\n            if (value) {\r\n                value = parseFloat(value.toFixed(2));\r\n            }\r\n\r\n            return value;\r\n        };\r\n\r\n        var hasValidParams = function (params) {\r\n            return (params.orderDir === eOrderDir.Sell || params.orderDir === eOrderDir.Buy) &&\r\n                general.isNumber(params.requiredMarginPercentage) &&\r\n                general.isNumber(params.dealRate) &&\r\n                general.isNumber(params.dealAmount);\r\n        };\r\n\r\n        return {\r\n            DealMargin: calculateMargin,\r\n            PipWorth: calculatePipWorth,\r\n            DealAmount: calculateDealAmount,\r\n            SpreadWorthInAcountCCY: calculateSpreadWorthInAcountCCY,\r\n            Convert: convert\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}