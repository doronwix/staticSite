{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/managers/AdvinionChart/AdvinionChartsManager.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿/* global ProChart_Loader Logger */\r\ndefine(\"managers/AdvinionChart/AdvinionChartsManager\", [\r\n\t\"require\",\r\n\t\"Q\",\r\n\t\"knockout\",\r\n\t\"handlers/Logger\",\r\n\t\"ProChart_Loader\",\r\n\t\"handlers/general\",\r\n\t\"modules/ThemeSettings\",\r\n], function AdvinionChartsManagerDef(require) {\r\n\tvar Q = require(\"Q\"),\r\n\t\tko = require(\"knockout\"),\r\n\t\tlogger = require(\"handlers/Logger\"),\r\n\t\tprochart_loader = require(\"ProChart_Loader\"),\r\n\t\tThemeSettings = require(\"modules/ThemeSettings\"),\r\n\t\tgeneral = require(\"handlers/general\");\r\n\r\n\tvar AdvinionChartsManager = (function AdvinionChartsManagerClass() {\r\n\t\tvar loadDefer = Q.defer(),\r\n\t\t\tprochartloader = null,\r\n\t\t\tisChartManagerLoaded = ko.observable(false);\r\n\r\n\t\tfunction init(advinionChartConfiguration) {\r\n\t\t\tvar selectedTheme = ThemeSettings.GetTheme();\r\n\t\t\tadvinionChartConfiguration = advinionChartConfiguration || {};\r\n\r\n\t\t\tprochartloader = prochart_loader();\r\n\t\t\tprochartloader.init.rootpath = advinionChartConfiguration.rootPath;\r\n\t\t\tprochartloader.init.loadercss.push(\r\n\t\t\t\tadvinionChartConfiguration.cssLoaderPath + \"chart.\" + selectedTheme + \".css\"\r\n\t\t\t);\r\n\r\n\t\t\tprochartloader.navigator.properties.xdrMinIE = 11;\r\n\r\n\t\t\tprochartloader.init.timeupdateVersioncore = \"time456\";\r\n\t\t\tprochartloader.init.timeupdateVersiongui = \"time456\";\r\n\r\n\t\t\tprochartloader.init.loaderremovefrom.push({ key: \"jquery.ui\" });\r\n\t\t\tprochartloader.init.getrequirejs = false;\r\n\r\n\t\t\tprochartloader.LoaderInitComplete = onLoaderInitComplete;\r\n\r\n\t\t\tprochartloader.init.cache = true;\r\n\t\t\tprochartloader.LoaderInitCombine(); // - for production / qa - chart files loaded as a bundle\r\n\t\t}\r\n\r\n\t\tfunction onLoaderInitComplete() {\r\n\t\t\tif (general.isFunctionType(window.ProChart_InitLayout)) {\r\n\t\t\t\t// Resolve the load promise, it can be used to delay any chart operation until the Charts are loaded\r\n\t\t\t\tloadDefer.resolve();\r\n\t\t\t\tisChartManagerLoaded(true);\r\n\t\t\t} else {\r\n\t\t\t\tloadDefer.reject();\r\n\t\t\t\tlogger.log(\r\n\t\t\t\t\t\"managers/AdvinionChart/AdvinionChartsManager\",\r\n\t\t\t\t\t\"ProChart_Loader: Fail Load/Init chart\",\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\teErrorSeverity.critical\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tInit: init,\r\n\t\t\tIsChartManagerLoaded: isChartManagerLoaded,\r\n\t\t\tIsLoaded: loadDefer.promise,\r\n\t\t\tServerPeriods: null,\r\n\t\t};\r\n\t})();\r\n\r\n\treturn AdvinionChartsManager;\r\n});\r\n",
  "isBase64": false
}