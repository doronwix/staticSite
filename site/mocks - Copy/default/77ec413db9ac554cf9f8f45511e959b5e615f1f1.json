{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/managers/AdvinionChart/AdvinionDataAdapter.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'managers/AdvinionChart/AdvinionDataAdapter',\r\n    [\r\n        'require',\r\n        'Q',\r\n        'handlers/general',\r\n        'managers/AdvinionChart/AdvinionChartsManager',\r\n        'managers/AdvinionChart/AdvinionDataObjectsMapper',\r\n        'cachemanagers/QuotesManager',\r\n        'viewmodels/QuotesSubscriber',\r\n        'dataaccess/dalCharts'\r\n    ],\r\n    function (require) {\r\n        var Q = require('Q'),\r\n            general = require('handlers/general'),\r\n            advinionChartsManager = require('managers/AdvinionChart/AdvinionChartsManager'),\r\n            advinionDataObjectsMapper = require('managers/AdvinionChart/AdvinionDataObjectsMapper'),\r\n            quotesManager = require('cachemanagers/QuotesManager'),\r\n            QuotesSubscriber = require('viewmodels/QuotesSubscriber'),\r\n            dalCharts = require('dataaccess/dalCharts');\r\n\r\n        var AdvinionDataAdapter = function () {\r\n            var quotesSubscriber = new QuotesSubscriber(),\r\n                mappingArray = [\r\n                    {\r\n                        databaseValue: eChartPeriod.Ticks,\r\n                        chartValue: eChartTimeFramesIds.tick // 1 tick\r\n                    },\r\n                    {\r\n                        databaseValue: eChartPeriod.OneMinute,\r\n                        chartValue: eChartTimeFramesIds[\"1 Minute\"]\r\n                    },\r\n                    {\r\n                        databaseValue: eChartPeriod.FiveMinutes,\r\n                        chartValue: eChartTimeFramesIds[\"5 Mintes\"]\r\n                    },\r\n                    {\r\n                        databaseValue: eChartPeriod.FifteenMinutes,\r\n                        chartValue: eChartTimeFramesIds[\"15 Minutes\"]\r\n                    },\r\n                    {\r\n                        databaseValue: eChartPeriod.ThirtyMinutes,\r\n                        chartValue: eChartTimeFramesIds[\"30 Minutes\"]\r\n                    },\r\n                    {\r\n                        databaseValue: eChartPeriod.OneHour,\r\n                        chartValue: eChartTimeFramesIds[\"1 Hour\"]\r\n                    },\r\n                    {\r\n                        databaseValue: eChartPeriod.TwoHours,\r\n                        chartValue: eChartTimeFramesIds[\"2 Hours\"]\r\n                    },\r\n                    {\r\n                        databaseValue: eChartPeriod.FourHours,\r\n                        chartValue: eChartTimeFramesIds[\"4 Hours\"]\r\n                    },\r\n                    {\r\n                        databaseValue: eChartPeriod.SixHours,\r\n                        chartValue: eChartTimeFramesIds[\"6 Hours\"]\r\n                    },\r\n                    {\r\n                        databaseValue: eChartPeriod.TwelveHours,\r\n                        chartValue: eChartTimeFramesIds[\"12 Hours\"]\r\n                    },\r\n                    {\r\n                        databaseValue: eChartPeriod.OneDay,\r\n                        chartValue: eChartTimeFramesIds[\"1 Day\"]\r\n                    },\r\n                    {\r\n                        databaseValue: eChartPeriod.OneWeek,\r\n                        chartValue: eChartTimeFramesIds[\"1 Week\"]\r\n                    },\r\n                    {\r\n                        databaseValue: eChartPeriod.OneMonth,\r\n                        chartValue: eChartTimeFramesIds[\"1 Month\"]\r\n                    }\r\n                ];\r\n\r\n            function start() {\r\n                quotesSubscriber.Start();\r\n                advinionDataObjectsMapper.init(quotesSubscriber);\r\n            }\r\n\r\n            function fixOngoingCandleData(instrumentId, data, orderDir) {\r\n                if (!instrumentId || !data || data.length === 0) {\r\n                    return;\r\n                }\r\n\r\n                var lastCandle = data[data.length - 1];\r\n\r\n                if (!lastCandle || lastCandle.close) {\r\n                    return;\r\n                }\r\n\r\n                var lastQuoteValueString = getQuoteData(instrumentId, orderDir).value;\r\n                var lastQuoteValue = Number(lastQuoteValueString);\r\n\r\n                if (!lastQuoteValueString || !lastQuoteValue || isNaN(lastQuoteValue)) {\r\n                    throw new Error('Quote data unavailable for instrument: ' + instrumentId);\r\n                }\r\n\r\n                if (lastCandle.high < lastQuoteValue) {\r\n                    lastCandle.high = lastQuoteValue;\r\n                }\r\n\r\n                if (lastCandle.low > lastQuoteValue) {\r\n                    lastCandle.low = lastQuoteValue;\r\n                }\r\n\r\n                lastCandle.close = lastQuoteValue;\r\n            }\r\n\r\n            function getHistoryRates(request) {\r\n                function onLoadComplete(recentHistoryQuotes) {\r\n                    var recentHistoryQuotesMapped = advinionDataObjectsMapper.mapRecentHistoryObject(request.instrumentId,\r\n                        recentHistoryQuotes.map(advinionDataObjectsMapper.mapCandleObject));\r\n\r\n                    if (recentHistoryQuotesMapped && recentHistoryQuotesMapped.data) {\r\n                        fixOngoingCandleData(request.instrumentId, recentHistoryQuotesMapped.data, request.orderDir);\r\n                    }\r\n\r\n                    return recentHistoryQuotesMapped;\r\n                }\r\n\r\n                var candleStickDataModel = {\r\n                    instrumentId: request.instrumentId,\r\n                    rateType: request.orderDir === eOrderDir.Sell ? eChartRateType.Bid : eChartRateType.Ask,\r\n                    periodId: getDatabasePeriod(request.timeFrame),\r\n                    fromDate: advinionDataObjectsMapper.mapAdvinonFromDate(request.fromDate),\r\n                    toDate: advinionDataObjectsMapper.mapAdvinonToDate(request.toDate),\r\n                    numCandles: request.historyLength\r\n                };\r\n\r\n                var deferred = Q.defer();\r\n\r\n                function updateQuote() {\r\n                    var activeQuote = quotesManager.Quotes.GetItem(request.instrumentId);\r\n\r\n                    if (!activeQuote) {\r\n                        return;\r\n                    }\r\n\r\n                    quotesManager.OnChange.Remove(updateQuote);\r\n\r\n                    var getCandlesPromise = dalCharts\r\n                        .GetCandles(candleStickDataModel)\r\n                        .then(onLoadComplete);\r\n\r\n                    deferred.resolve(getCandlesPromise);\r\n                }\r\n\r\n                quotesManager.OnChange.Add(updateQuote);\r\n                updateQuote();\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            function getHistoryTickRates(request) {\r\n                function onTicksLoadComplete(recentHistoryTickQuotes) {\r\n                    return advinionDataObjectsMapper.mapRecentHistoryObject(request.instrumentId, recentHistoryTickQuotes.map(advinionDataObjectsMapper.mapTickObject));\r\n                }\r\n\r\n                var tickDataModel = {\r\n                    instrumentId: request.instrumentId,\r\n                    rateType: request.orderDir === eOrderDir.Sell ? eChartRateType.Bid : eChartRateType.Ask,\r\n                    fromDate: advinionDataObjectsMapper.mapAdvinonFromDate(request.fromDate),\r\n                    toDate: advinionDataObjectsMapper.mapAdvinonToDate(request.toDate),\r\n                    numTicks: request.historyLength\r\n                };\r\n\r\n                return dalCharts\r\n                    .GetTicks(tickDataModel)\r\n                    .then(onTicksLoadComplete);\r\n            }\r\n\r\n            function getDatabasePeriod(chartTimeScale) {\r\n                var result = mappingArray.filter(function timeScaleFilter(mappingObject) {\r\n                    return mappingObject.chartValue == chartTimeScale;\r\n                });\r\n\r\n                if (result.length == 0) {\r\n                    throw new Error('The specified time scale was not found (' + chartTimeScale + ').');\r\n                }\r\n\r\n                return result[0].databaseValue;\r\n            }\r\n\r\n            function getChartTimeScale(databasePeriod) {\r\n                var result = mappingArray.filter(function databasePeriodFilter(mappingObject) {\r\n                    return mappingObject.databaseValue == databasePeriod;\r\n                });\r\n\r\n                if (result.length == 0) {\r\n                    throw new Error('The specified time scale period was not found (' + databasePeriod + ').');\r\n                }\r\n\r\n                return result[0].chartValue;\r\n            }\r\n\r\n            function mapTimeScaleObject(period) {\r\n                return {\r\n                    f: 1,\r\n                    id: getChartTimeScale(period.periodID),\r\n                    n: period.periodName\r\n                };\r\n            }\r\n\r\n            function getTimeScalesAsync() {\r\n                if (!general.isEmptyValue(advinionChartsManager.ServerPeriods)) {\r\n                    return getPeriods();\r\n                }\r\n\r\n                return dalCharts\r\n                    .GetPeriods()\r\n                    .then(removeTenSecondsPeriod)\r\n                    .then(setPeriods)\r\n                    .then(getPeriods);\r\n            }\r\n\r\n            function setPeriods(periods) {\r\n                advinionChartsManager.ServerPeriods = periods.map(mapTimeScaleObject);\r\n            }\r\n\r\n            function getPeriods() {\r\n                return Q(advinionChartsManager.ServerPeriods);\r\n            }\r\n\r\n            function removeTenSecondsPeriod(periods) {\r\n                return periods.filter(function filterOutPeriods(period) { return period.periodID != eChartPeriod.TenSeconds; });\r\n            }\r\n\r\n            function getMapper() {\r\n                return advinionDataObjectsMapper;\r\n            }\r\n\r\n            function getQuoteData(instrumentId, orderDir) {\r\n                var lastQuote = quotesSubscriber.GetQuote(instrumentId);\r\n\r\n                return {\r\n                    value: orderDir === eOrderDir.Sell ? lastQuote.bid() : lastQuote.ask(),\r\n                    isInactive: lastQuote.isInactive()\r\n                };\r\n            }\r\n\r\n            function unsubscribeFromQuote(instrumentId) {\r\n                quotesSubscriber.RemoveQuoteSubscription(instrumentId)\r\n            }\r\n\r\n            start();\r\n\r\n            return {\r\n                getDatabasePeriod: getDatabasePeriod,\r\n                getChartTimeScale: getChartTimeScale,\r\n                getHistoryRates: getHistoryRates,\r\n                getHistoryTicks: getHistoryTickRates,\r\n                getTimeScalesAsync: getTimeScalesAsync,\r\n                getMapper: getMapper,\r\n                getQuoteData: getQuoteData,\r\n                unsubscribeFromQuote: unsubscribeFromQuote\r\n            };\r\n        };\r\n\r\n        return AdvinionDataAdapter();\r\n    }\r\n);\r\n",
  "isBase64": false
}