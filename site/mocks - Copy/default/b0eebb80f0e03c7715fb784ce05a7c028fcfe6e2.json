{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/managers/AdvinionChart/AdvinionDataObjectsMapper.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'managers/AdvinionChart/AdvinionDataObjectsMapper',\r\n    [\r\n        'require',\r\n        'handlers/general',\r\n        'cachemanagers/CacheManager',\r\n        'managers/instrumentTranslationsManager'\r\n    ],\r\n    function(require) {\r\n        var cacheManager = require('cachemanagers/CacheManager'),\r\n            general = require('handlers/general'),\r\n            instrumentTranslationsManager = require('managers/instrumentTranslationsManager');\r\n\r\n        var AdvinionDataObjectsMapper = function() {\r\n            var constants = { symbolsExchangeId: \"advinion\" },\r\n                regExForNumbersOnly = /[\\D]/g,\r\n                currentCenturyYearPrefix = '20',\r\n                previousCenturyYearPrefix = '19',\r\n                quotesVM = {};\r\n\r\n            function init(quotesSubscriber) {\r\n                quotesVM = quotesSubscriber;\r\n            }\r\n\r\n            function dispose() {\r\n            }\r\n\r\n            function arraySwapElements(firstPosition, secondPosition, array) {\r\n                array[firstPosition] = array.splice(secondPosition, 1, array[firstPosition])[0];\r\n            }\r\n\r\n            function mapCandleOrTickDateToAdvinionDate(dateTimeString) {\r\n                // \"dd/MM/yy HH:mm:ss\" => \"yyyy M d h m s\"\r\n                var finalYearPosition = 0,\r\n                    finalDayPosition = 2,\r\n                    dateTimeElements = dateTimeString.split(regExForNumbersOnly);\r\n\r\n                arraySwapElements(finalYearPosition, finalDayPosition, dateTimeElements);\r\n\r\n                var year = dateTimeElements[finalYearPosition],\r\n                    currentYear = (new Date()).getFullYear();\r\n\r\n                dateTimeElements[finalYearPosition] = parseInt(currentCenturyYearPrefix + year) > currentYear\r\n                    ? previousCenturyYearPrefix + year\r\n                    : currentCenturyYearPrefix + year;\r\n\r\n                return dateTimeElements.join(' ');\r\n            }\r\n\r\n            function mapServerDateToAdvinionDate() {\r\n                var dateToFormat = new Date(cacheManager.ServerTime().getTime());\r\n\r\n                var year = dateToFormat.getFullYear();\r\n                var month = dateToFormat.getMonth() + 1;\r\n                var day = dateToFormat.getDate();\r\n                var hour = dateToFormat.getHours();\r\n                var minute = dateToFormat.getMinutes();\r\n                var second = dateToFormat.getSeconds();\r\n\r\n                if (month.toString().length == 1) {\r\n                    month = '0' + month;\r\n                }\r\n\r\n                if (day.toString().length == 1) {\r\n                    day = '0' + day;\r\n                }\r\n\r\n                if (hour.toString().length == 1) {\r\n                    hour = '0' + hour;\r\n                }\r\n\r\n                if (minute.toString().length == 1) {\r\n                    minute = '0' + minute;\r\n                }\r\n\r\n                if (second.toString().length == 1) {\r\n                    second = '0' + second;\r\n                }\r\n\r\n                return year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second;\r\n            }\r\n\r\n            function mapTickObject(historyQuoteValue) {\r\n                return {\r\n                    open: Number(historyQuoteValue[eTickHistoryProperites.rate]),\r\n                    close: Number(historyQuoteValue[eTickHistoryProperites.rate]),\r\n                    low: Number(historyQuoteValue[eTickHistoryProperites.rate]),\r\n                    high: Number(historyQuoteValue[eTickHistoryProperites.rate]),\r\n                    ask: 0,\r\n                    bid: 0,\r\n                    other: 0,\r\n                    date: mapCandleOrTickDateToAdvinionDate(historyQuoteValue[eTickHistoryProperites.date])\r\n                };\r\n            }\r\n\r\n            function mapCandleObject(historyQuoteValue) {\r\n                return {\r\n                    open: Number(historyQuoteValue[eCandleHistoryProperites.open]),\r\n                    close: Number(historyQuoteValue[eCandleHistoryProperites.close]),\r\n                    low: Number(historyQuoteValue[eCandleHistoryProperites.low]),\r\n                    high: Number(historyQuoteValue[eCandleHistoryProperites.high]),\r\n                    ask: 0,\r\n                    bid: 0,\r\n                    other: 0,\r\n                    date: mapCandleOrTickDateToAdvinionDate(historyQuoteValue[eCandleHistoryProperites.date])\r\n                };\r\n            }\r\n\r\n            function mapSymbolLite(instrumentId) { // works for cfds,shares items\r\n                var quote = quotesVM.GetQuote(instrumentId);\r\n\r\n                return {\r\n                    exchangeId: constants.symbolsExchangeId,\r\n                    marketId: eInstrumentType.Shares,\r\n                    countryId: \"\",\r\n                    id: instrumentId,\r\n                    name: getInstrumentName(instrumentId),\r\n                    description: getInstrumentName(instrumentId),\r\n                    precision: general.lenAfterDelimeter(quote.midRate()),\r\n                    timescales: null,\r\n                    defaultTimescale: null\r\n                };\r\n            }\r\n\r\n            function mapSymbol(instrument) { // works for items in instrumentsmanager\r\n                return {\r\n                    exchangeId: constants.symbolsExchangeId,\r\n                    marketId: instrument.instrumentTypeId,\r\n                    countryId: \"\",\r\n                    id: instrument.id,\r\n                    name: getInstrumentName(instrument.id),\r\n                    description: getInstrumentDescription(instrument.id),\r\n                    precision: instrument.DecimalDigit,\r\n                    timescales: null,\r\n                    defaultTimescale: null\r\n                };\r\n            }\r\n\r\n            function mapComparisonSymbol(instrument) {\r\n                return {\r\n                    name: getInstrumentName(instrument.id),\r\n                    id: instrument.id,\r\n                    description: getInstrumentDescription(instrument.id)\r\n                };\r\n            }\r\n\r\n            function mapRecentHistoryObject(instrument, historyData) {\r\n                return {\r\n                    id: instrument,\r\n                    lastTimeStamp: mapServerDateToAdvinionDate(),\r\n                    data: historyData\r\n                };\r\n            }\r\n\r\n            function mapMultiRTObject(instrumentId, value) {\r\n                var currentTimeStamp = mapServerDateToAdvinionDate();\r\n\r\n                return {\r\n                    id: instrumentId,\r\n                    lastTimeStamp: currentTimeStamp,\r\n                    data: [{ ask: value, bid: value, other: 0, date: currentTimeStamp }]\r\n                };\r\n            }\r\n\r\n            function getInstrumentName(instrumentId) {\r\n                return instrumentTranslationsManager.Long(instrumentId);\r\n            }\r\n\r\n            function getInstrumentDescription(instrumentId) {\r\n                return instrumentTranslationsManager.GetTooltipByInstrumentId(instrumentId);\r\n            }\r\n\r\n            //Return YYYY-MM-DD hh:mm:ss\r\n            function mapFormatedDate(date) {\r\n                return date.getFullYear() + \"-\" +\r\n                (\"00\" + (date.getMonth() + 1)).slice(-2) + \"-\" +\r\n                (\"00\" + date.getDate()).slice(-2) + \" \" +\r\n                (\"00\" + date.getHours()).slice(-2) + \":\" +\r\n                (\"00\" + date.getMinutes()).slice(-2) + \":\" +\r\n                (\"00\" + date.getSeconds()).slice(-2);\r\n            }\r\n\r\n            //Input: yyyy MM dd HH dd ss\r\n            //Return: yyyyMMddhhmmssfff\r\n            function mapAdvinonFromDateToJSONSerializedDate(dateString) {\r\n                return mapAdvionDateToJSONSerirializedDate(dateString, '000');\r\n            }\r\n\r\n            //Input: yyyy-MM-dd HH:dd:ss\r\n            //Return: yyyyMMddhhmmssfff\r\n            function mapAdvinonToDateToJSONSerializedDate(dateString) {\r\n                return mapAdvionDateToJSONSerirializedDate(dateString, '999');\r\n            }\r\n\r\n            //Input: yyyy MM dd HH dd ss / yyyy-MM-dd HH dd ss\r\n            //Return: yyyyMMddhhmmssfff\r\n            function mapAdvionDateToJSONSerirializedDate(dateString, milisecond) {\r\n                if (general.isEmptyType(dateString) || !general.isStringType(dateString)) {\r\n                    return null;\r\n                }\r\n\r\n                return dateString.replace(/[-: ]/g, '') + milisecond;\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                mapTickObject: mapTickObject,\r\n                mapCandleObject: mapCandleObject,\r\n                mapSymbol: mapSymbol,\r\n                mapComparisonSymbol: mapComparisonSymbol,\r\n                mapMultiRTObject: mapMultiRTObject,\r\n                mapRecentHistoryObject: mapRecentHistoryObject,\r\n                mapSymbolLite: mapSymbolLite,\r\n                mapFormatedDate: mapFormatedDate,\r\n                mapAdvinonFromDate: mapAdvinonFromDateToJSONSerializedDate,\r\n                mapAdvinonToDate: mapAdvinonToDateToJSONSerializedDate\r\n            };\r\n        }\r\n\r\n        return new AdvinionDataObjectsMapper();\r\n    }\r\n);",
  "isBase64": false
}