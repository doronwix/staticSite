{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/devices/web/modules/ToolbarModule.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define('devicecustommodules/ToolbarModule',\r\n    [\r\n\t\t'require',\r\n\t\t\"require\",\r\n\t\t\"knockout\",\r\n\t\t\"handlers/general\",\r\n\t\t\"devicemanagers/StatesManager\",\r\n\t\t\"StateObject!PostLoginAlerts\",\r\n\t\t\"initdatamanagers/Customer\",\r\n\t\t\"viewmodels/dialogs/DialogViewModel\",\r\n\t\t\"cachemanagers/dealsmanager\",\r\n\t\t\"managers/viewsmanager\"\r\n    ],\r\n\tfunction ToolbarModule(require) {\r\n\t\tvar ko = require(\"knockout\"),\r\n\t\t\tDealsManager = require(\"cachemanagers/dealsmanager\"),\r\n\t\t\tgeneral = require(\"handlers/general\"),\r\n\t\t\tStatesManager = require(\"devicemanagers/StatesManager\"),\r\n\t\t\tpostLoginAlerts = require(\"StateObject!PostLoginAlerts\"),\r\n\t\t\tcustomer = require(\"initdatamanagers/Customer\"),\r\n\t\t\tvmDialog = require(\"viewmodels/dialogs/DialogViewModel\"),\r\n\t\t\tViewsManager = require(\"managers/viewsmanager\"),\r\n\t\t\ttoolbarInfo = {};\r\n\r\n\t\tfunction init() {\r\n\t\t\tsetDefaultObservables();\r\n\t\t\tupdateData();\r\n\t\t}\r\n\r\n\t\tfunction setDefaultObservables() {\r\n\t\t\ttoolbarInfo.allowRefreshBtn = ko.observable(false);\r\n\t\t\ttoolbarInfo.hasDeals = ko.observable(false);\r\n\r\n\t\t\ttoolbarInfo.tradingClosed = ko.computed(function () {\r\n\t\t\t\tvar states = StatesManager.GetStates();\r\n\t\t\t\treturn states.IsMarketClosed() || states.IsPortfolioInactive();\r\n\t\t\t});\r\n\r\n\t\t\ttoolbarInfo.disableNewTransaction = ko.computed(function () {\r\n\t\t\t\treturn !window.componentsLoaded();\r\n\t\t\t});\r\n\r\n\t\t\t// Close Deal\r\n\t\t\ttoolbarInfo.showCloseDeal = ko.computed(function () {\r\n\t\t\t\treturn !ViewsManager.GetActiveFormViewProperties(eViewTypes.vOpenDeals).visible();\r\n\t\t\t});\r\n\r\n\t\t\ttoolbarInfo.disableCloseDeal = ko.computed(function () {\r\n\t\t\t\treturn !window.componentsLoaded() || !toolbarInfo.hasDeals() || toolbarInfo.tradingClosed();\r\n\t\t\t});\r\n\r\n\t\t\t// Close Selected\r\n\t\t\ttoolbarInfo.hideCloseSelectedDeals = ko.computed(function () {\r\n\t\t\t\treturn !ViewsManager.GetActiveFormViewProperties(eViewTypes.vOpenDeals).visible();\r\n\t\t\t});\r\n\r\n\t\t\t// Refresh\r\n\t\t\ttoolbarInfo.hideRefresh = ko.computed(function () {\r\n\t\t\t\treturn (\r\n\t\t\t\t\tViewsManager.GetActiveFormViewProperties(eViewTypes.vOpenDeals).visible() ||\r\n\t\t\t\t\t(ViewsManager.GetActiveFormViewProperties(eViewTypes.vLimits).visible() &&\r\n\t\t\t\t\t\t!toolbarInfo.allowRefreshBtn()) ||\r\n\t\t\t\t\tViewsManager.GetActiveFormViewProperties(eViewTypes.vClientQuestionnaire).visible() ||\r\n\t\t\t\t\tViewsManager.GetActiveFormViewProperties(eViewTypes.vTradingSignals).visible() ||\r\n\t\t\t\t\tViewsManager.GetActiveFormViewProperties(eViewTypes.vPersonalDetails).visible() ||\r\n\t\t\t\t\tViewsManager.GetActiveFormViewProperties(eViewTypes.vCharts).visible() ||\r\n\t\t\t\t\tViewsManager.GetActiveFormViewProperties(eViewTypes.vAdvinionChart).visible() ||\r\n\t\t\t\t\tViewsManager.GetActiveFormViewProperties(eViewTypes.vChangePassword).visible() ||\r\n\t\t\t\t\tViewsManager.GetActiveFormViewProperties(eViewTypes.vUploadDocuments).visible() ||\r\n\t\t\t\t\tViewsManager.GetActiveFormViewProperties(eViewTypes.vWithdrawal).visible() ||\r\n\t\t\t\t\tViewsManager.GetActiveFormViewProperties(eViewTypes.vTutorials).visible() ||\r\n\t\t\t\t\tViewsManager.GetActiveFormViewProperties(eViewTypes.vEducationalTutorials).visible() ||\r\n\t\t\t\t\tViewsManager.GetActiveFormViewProperties(eViewTypes.vPaymentTypes).visible() ||\r\n\t\t\t\t\tViewsManager.GetActiveFormViewProperties(eViewTypes.vNotificationsSettings).visible()\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction updateData() {\r\n\t\t\ttoolbarInfo.hasDeals(DealsManager.Deals.count() > 0);\r\n\r\n\t\t\tregisterToDispatcher();\r\n\t\t}\r\n\r\n\t\tfunction registerToDispatcher() {\r\n\t\t\tDealsManager.OnDealsChange.Add(onDealsChange);\r\n\t\t}\r\n\r\n\t\tfunction unRegisterFromDispatcher() {\r\n\t\t\tDealsManager.OnDealsChange.Remove(onDealsChange);\r\n\t\t}\r\n\r\n\t\tfunction onDealsChange() {\r\n\t\t\ttoolbarInfo.hasDeals(DealsManager.Deals.count() > 0);\r\n\t\t}\r\n\r\n\t\tfunction openTransactionSwitcherDialog(transactionParameters) {\r\n\t\t\tvar dialogClass =\r\n\t\t\t\t\"deal-slip\" + (customer.HasAbTestConfig(eAbTestProps.dealSlipsRevised) ? \" revised-slip\" : \"\");\r\n\r\n\t\t\tif (general.isNullOrUndefined(transactionParameters.instrumentId)) {\r\n\t\t\t\ttransactionParameters.instrumentId = $instrumentsManager.GetUserDefaultInstrumentId();\r\n\t\t\t}\r\n\r\n\t\t\tvmDialog.open(\r\n\t\t\t\teDialog.TransactionSwitcher,\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: \"\",\r\n\t\t\t\t\twidth: 700,\r\n\t\t\t\t\tdragStart: function () {\r\n\t\t\t\t\t\tko.postbox.publish(\"new-deal-dragged\", {});\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcustomTitle: \"TransactionDropDown\",\r\n\t\t\t\t\tpersistent: false,\r\n\t\t\t\t\tdialogClass: dialogClass,\r\n\t\t\t\t},\r\n\t\t\t\teViewTypes.vTransactionSwitcher,\r\n\t\t\t\ttransactionParameters\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tfunction newDealHandler(newDealParameters, preventWhenCddRedirect) {\r\n\t\t\tnewDealParameters = newDealParameters || {};\r\n\t\t\tnewDealParameters.transactionType = eTransactionSwitcher.NewDeal;\r\n\t\t\tko.postbox.publish(\"new-deal-click\");\r\n\r\n\t\t\tif (toolbarInfo.disableNewTransaction()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (\r\n\t\t\t\t!general.isNullOrUndefined(preventWhenCddRedirect) &&\r\n\t\t\t\tStatesManager.States.shouldCddRedirect() &&\r\n\t\t\t\t!postLoginAlerts.get(\"SetAlertsBehaviorMode\")\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\topenTransactionSwitcherDialog(newDealParameters);\r\n\t\t}\r\n\r\n\t\tfunction newLimitHandler(newLimitParametes) {\r\n\t\t\tnewLimitParametes = newLimitParametes || {};\r\n\t\t\tnewLimitParametes.transactionType = eTransactionSwitcher.NewLimit;\r\n\r\n\t\t\tif (toolbarInfo.disableNewTransaction()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\topenTransactionSwitcherDialog(newLimitParametes);\r\n\t\t}\r\n\r\n\t\tfunction closeDealHandler() {\r\n\t\t\tif (toolbarInfo.disableCloseDeal()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar revisedDs = customer.HasAbTestConfig(eAbTestProps.dealSlipsRevised),\r\n\t\t\t\tdialogTitle = !revisedDs ? Dictionary.GetItem(\"CloseDeal\", \"dialogsTitles\", \" \") : '',\r\n\t\t\t\tdialogClass = \"deal-slip\" + (revisedDs ? \" revised-slip\" : \" closeDeal\");\r\n\r\n\t\t\tif (toolbarInfo.hasDeals()) {\r\n\t\t\t\tvmDialog.open(\r\n\t\t\t\t\teDialog.CloseDeal,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttitle: dialogTitle,\r\n\t\t\t\t\t\tcustomTitle: \"CloseDealPosNum\",\r\n\t\t\t\t\t\twidth: 555,\r\n\t\t\t\t\t\tpersistent: false,\r\n\t\t\t\t\t\tdialogClass: dialogClass,\r\n\t\t\t\t\t},\r\n\t\t\t\t\teViewTypes.vCloseDeal\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\t\t\tunRegisterFromDispatcher();\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tInit: init,\r\n\t\t\tdispose: dispose,\r\n\t\t\tToolbarInfo: toolbarInfo,\r\n\t\t\tNewDealHandler: newDealHandler,\r\n\t\t\tNewLimitHandler: newLimitHandler,\r\n\t\t\tCloseDealHandler: closeDealHandler\r\n\t\t};\r\n    }\r\n);",
  "isBase64": false
}