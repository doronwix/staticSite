{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/AccountPreferencesViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/AccountPreferencesViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/Cookie',\r\n        'cachemanagers/CacheManager',\r\n        'handlers/general',\r\n        'managers/CustomerProfileManager',\r\n        'initdatamanagers/SymbolsManager',\r\n        'devicemanagers/ViewModelsManager',\r\n        'initdatamanagers/Customer',\r\n        'StateObject!Setting',\r\n        'modules/LanguageSettings',\r\n        'modules/ThemeSettings'\r\n    ],\r\n\r\n    function (require) {\r\n\r\n        var ko = require('knockout'),\r\n            cacheManager = require('cachemanagers/CacheManager'),\r\n            general = require('handlers/general'),\r\n            customerProfileManager = require('managers/CustomerProfileManager'),\r\n            symbolsManager = require('initdatamanagers/SymbolsManager'),\r\n            viewModelsManager = require('devicemanagers/ViewModelsManager'),\r\n            customer = require('initdatamanagers/Customer'),\r\n            languageSettings = require('modules/LanguageSettings'),\r\n            CookieHandler = require('handlers/Cookie'),\r\n            settingStateObject = require('StateObject!Setting'),\r\n            ThemeSettings = require('modules/ThemeSettings');\r\n\r\n        var AccountPreferencesViewModel = function () {\r\n            var info = {},\r\n                currenciesList = ko.observableArray([]),\r\n                isCollapsed = ko.observable(true);\r\n\r\n            var init = function () {\r\n                setObservableObject();\r\n                isOpenCollapsed();\r\n            };\r\n\r\n            function setObservableObject() {\r\n                var cust = customer.prop || {};\r\n\r\n                var sysDefaultSymbolId = 47; // default system symbol USD\r\n\r\n                var sysCcy = { ccyId: sysDefaultSymbolId, ccyName: symbolsManager.GetTranslatedSymbolById(sysDefaultSymbolId) };\r\n                var profileCustomer = customerProfileManager.ProfileCustomer();\r\n                currenciesList.push(sysCcy);\r\n\r\n                if (!general.isEmptyType(cust.userName)) {\r\n                    info.userName = (cust.userName.length > 18) ? cust.userName.substring(0, 18) + \"...\" : cust.userName;\r\n                }\r\n                if (!general.isEmptyType(cust.accountNumber)) {\r\n                    info.account = \"(\" + cust.accountNumber + \")\";\r\n                }\r\n                if (!general.isEmptyType(cust.defaultCcy()) && sysCcy.ccyName !== cust.defaultCcy()) {\r\n                    currenciesList.push({ ccyId: cust.baseCcyId(), ccyName: cust.defaultCcy() });\r\n                }\r\n                info.isLoading = ko.observable(false);\r\n                info.currenciesList = currenciesList;\r\n\r\n                info.selectedCcyId = ko.observable(profileCustomer.displaySymbol || cust.selectedCcyId());\r\n\r\n                info.selectedCcyId.subscribe(function (newValue) {\r\n                    ko.postbox.publish('trading-event', 'change-currency');\r\n\r\n                    if (cust.selectedCcyId() !== newValue) {\r\n                        cacheManager.SetDisplaySymbol(newValue);\r\n                        cust.selectedCcyId(newValue);\r\n\r\n                        profileCustomer.displaySymbol = newValue;\r\n                        customerProfileManager.ProfileCustomer(profileCustomer);\r\n                    }\r\n                });\r\n\r\n                info.selectedCcyName = ko.computed(function () {\r\n                    return symbolsManager.GetTranslatedSymbolById(cust.selectedCcyId());\r\n                });\r\n\r\n                info.selectedTheme = ko.observable(ThemeSettings.GetTheme());\r\n                info.themes = ko.observableArray(Object.keys(ThemeSettings.Themes).map(function (value) {\r\n                    return {\r\n                        value: value,\r\n                        label: 'lblTheme_' + value\r\n                    };\r\n                }));\r\n                info.selectedTheme.subscribe(function (newValue) {\r\n                    updateTheme(newValue);\r\n                });\r\n            }\r\n\r\n            var setNewLanguage = languageSettings;\r\n\r\n            if (!settingStateObject.get(\"AccountHubSetting\")) {\r\n                settingStateObject.set(\"AccountHubSetting\", null);\r\n            }\r\n            settingStateObject.subscribe(\"AccountHubSetting\", function (view) {\r\n                isCollapsed(view !== eViewTypes.vAccountPreferences);\r\n            });\r\n\r\n            function isOpenCollapsed() {\r\n                if (viewModelsManager.VManager.GetViewArgs(eViewTypes.vAccountPreferences) === eViewTypes.vAccountPreferences)\r\n                    isCollapsed(false);\r\n            }\r\n\r\n            function collapsedToggle() {\r\n                isCollapsed(!isCollapsed());\r\n            }\r\n\r\n            var selectedLanguageId = CookieHandler.ReadCookie(\"LID\");\r\n\r\n            function updateTheme(newTheme) {\r\n                var to,\r\n                    cb = function () {\r\n                        if (to) {\r\n                            clearTimeout(to);\r\n                        }\r\n                        to = setTimeout(function () {\r\n                            info.isLoading(false);\r\n                        }, 400);\r\n                    };\r\n\r\n                info.isLoading(true);\r\n                ThemeSettings.UpdateTheme(newTheme, cb);\r\n            }\r\n\r\n            function changeTheme(askedTheme) {\r\n                info.selectedTheme(info.selectedTheme() !== askedTheme ?\r\n                    askedTheme : ThemeSettings.Themes.light);\r\n            }\r\n\r\n\r\n            return {\r\n                init: init,\r\n                Info: info,\r\n                SetNewLanguage: setNewLanguage,\r\n                ChangeTheme: changeTheme,\r\n                CollapsedToggle: collapsedToggle,\r\n                isCollapsed: isCollapsed,\r\n                selectedLanguageId: selectedLanguageId\r\n            };\r\n        };\r\n\r\n\r\n        var createViewModel = function (params) {\r\n            var viewModel = new AccountPreferencesViewModel();\r\n            viewModel.init();\r\n\r\n            return viewModel;\r\n        };\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            }\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}