{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/devices/web/uilayer/viewmodels/MainChartViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'deviceviewmodels/MainChartViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'managers/ChartSettingManager',\r\n        'managers/AdvinionChart/AdvinionChartsManager',\r\n        'configuration/initconfiguration',\r\n        'StateObject!Transaction'\r\n    ],\r\n    function MainChartDef(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            koComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            AdvinionChartsManager = require('managers/AdvinionChart/AdvinionChartsManager'),\r\n            chartSettingManager = require('managers/ChartSettingManager'),\r\n            advinionChartSettings = require(\"configuration/initconfiguration\").AdvinionChartConfiguration,\r\n            stateObject = require('StateObject!Transaction');\r\n\r\n        var MainChartViewModel = general.extendClass(koComponentViewModel, function MainChartClass() {\r\n            var self = this,\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = parent.Data,\r\n                defaultIsExpandedValue = true; // inherited from KoComponentViewModel\r\n\r\n            //-------------------------------------------------------\r\n            function init(settings) {\r\n                parent.init.call(self, settings);   // inherited from KoComponentViewModel\r\n\r\n                if (!AdvinionChartsManager.IsChartManagerLoaded()) {\r\n                    AdvinionChartsManager.Init(advinionChartSettings);\r\n                }\r\n\r\n                setDefaultObservables();\r\n                setSubscribers();\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setDefaultObservables() {\r\n                data.showTransaction = stateObject.set('showTransaction', ko.observable(getIsExpandedInitialValue()));\r\n                data.isTransactionContainerExpanded = stateObject.get('showTransaction');\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setSubscribers() {\r\n                self.subscribeTo(data.isTransactionContainerExpanded, persistIsExpanded);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function getIsExpandedInitialValue() {\r\n                var isExpanded = chartSettingManager.Chart().isTransactionContainerExpanded;\r\n\r\n                if (general.isBooleanType(isExpanded)) {\r\n                    return isExpanded;\r\n                } else {\r\n                    persistIsExpanded(defaultIsExpandedValue);\r\n\r\n                    return defaultIsExpandedValue;\r\n                }\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function persistIsExpanded(isExpanded) {\r\n                chartSettingManager.Chart().isTransactionContainerExpanded = isExpanded;\r\n                chartSettingManager.SaveChart();\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function toggleTransactionContainer() {\r\n                data.isTransactionContainerExpanded(!data.isTransactionContainerExpanded());\r\n            }\r\n\r\n            function dispose() {\r\n                data.showTransaction(true);\r\n                parent.dispose.call(self);\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Data: data,\r\n                ToggleTransactionContainer: toggleTransactionContainer,\r\n                AdvinionChartsManager: AdvinionChartsManager\r\n            };\r\n        });\r\n\r\n        function createViewModel(params) {\r\n            var viewModel = new MainChartViewModel();\r\n\r\n            viewModel.init(params);\r\n\r\n            return viewModel;\r\n        }\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            }\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}