{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/EconomicCalendarViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿/* globals eDirections, eAvailabilityState */\r\ndefine(\r\n    'viewmodels/EconomicCalendarViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'enums/enums',\r\n        'handlers/general',\r\n        'configuration/initconfiguration',\r\n        'helpers/KoComponentViewModel',\r\n        'FxNet/LogicLayer/EconomicCalendar/EconomicCalendarConnManager',\r\n        'StateObject!EconomicCalendarConnManager',\r\n        'global/debounce',\r\n        'Dictionary'\r\n    ],\r\n    function EconomicCalendarViewModelDef(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            config = require('configuration/initconfiguration'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            EconomicCalendarConnManager = require('FxNet/LogicLayer/EconomicCalendar/EconomicCalendarConnManager'),\r\n            stateObject = require('StateObject!EconomicCalendarConnManager'),\r\n            debounce = require('global/debounce'),\r\n            dictionary = require('Dictionary');\r\n\r\n        var unsubscribeFromStateObject,\r\n            economicCalendarConfig = config.EconomicCalendarConfiguration,\r\n            invertedDirectionEvents = economicCalendarConfig.invertedDirectionEvents;\r\n\r\n        function getCurrenciesFilter(ccyPair) {\r\n            var currencies;\r\n\r\n            if (!general.isEmptyValue(ccyPair)) {\r\n                currencies = ccyPair.split('/');\r\n\r\n                if (!general.isEmptyValue(currencies) && currencies.length === 2) {\r\n                    return {\r\n                        FirstCurrency: currencies[0],\r\n                        SecondCurrency: currencies[1]\r\n                    };\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        var EconomicCalendarViewModel = general.extendClass(KoComponentViewModel, function EconomicCalendarViewModelClass(params) {\r\n            var self = this,\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = this.Data, // inherited from KoComponentViewModelz,\r\n                viewName = params.viewName,\r\n                currentGroupId;\r\n\r\n            function init(settings) {\r\n                parent.init.call(self, settings); // inherited from KoComponentViewModel\r\n\r\n                initFilters();\r\n\r\n                setObservables();\r\n                setComputables();\r\n                setSubscribers();\r\n\r\n                EconomicCalendarConnManager.SetMessageReceivedCallback(viewName, onMessageReceived);\r\n            }\r\n\r\n            function initFilters() {\r\n                data.filters = {\r\n                    FirstCurrency: ko.observable(),\r\n                    SecondCurrency: ko.observable(),\r\n                    FromDate: ko.observable(),\r\n                    ToDate: ko.observable(),\r\n                    TimeZoneId: ko.observable(),\r\n                    TimeZoneOffset: ko.observable(),\r\n                    CountryCodes: ko.observableArray([]),\r\n                    Importance: ko.observableArray([]),\r\n                    CountryCodesMandatory: ko.observable(),\r\n                    ImportanceMandatory: ko.observable(),\r\n                    Count: ko.observable()\r\n                };\r\n            }\r\n\r\n            function setComputables() {\r\n                data.ccyPair = self.createComputed(function () {\r\n                    if (general.isDefinedType(params.ccyPair)) {\r\n                        return params.ccyPair();\r\n                    }\r\n\r\n                    return '';\r\n                });\r\n\r\n                data.isShowEventsUnavailable = self.createComputed(function () {\r\n                    var isUnavailable = !data.hasEvents() && !data.isLoading();\r\n                    return isUnavailable;\r\n                });\r\n\r\n                data.isShowLoader = self.createComputed(function () {\r\n                    return data.isLoading();\r\n                });\r\n\r\n                data.isShowEvents = self.createComputed(function () {\r\n                    var isShowEvents = data.hasEvents() && !data.isLoading();\r\n                    return isShowEvents;\r\n                });\r\n            }\r\n\r\n            var subscribeToTradingService = debounce(function subscribeToTradingServiceHandler() {\r\n                currentGroupId = EconomicCalendarConnManager.Subscribe(viewName, ko.toJS(data.filters));\r\n            });\r\n\r\n            function clearEvents() {\r\n                data.events([]);\r\n                data.mapEvents([]);\r\n                data.hasEvents(false);\r\n            }\r\n\r\n            function unsubscribeFromTradingService() {\r\n                clearEvents();\r\n\r\n                if (currentGroupId) {\r\n                    EconomicCalendarConnManager.Unsubscribe(currentGroupId);\r\n                }\r\n            }\r\n\r\n            function decideDirection(eventMessage) {\r\n                var forecast = eventMessage.Forecast,\r\n                    actual = eventMessage.Actual,\r\n                    retVal = '';\r\n\r\n                if (forecast !== '') {\r\n                    var isInverted = invertedDirectionEvents.indexOf(eventMessage.ContentId) >= 0;\r\n\r\n                    retVal = (general.extractNumberFromString(forecast) > general.extractNumberFromString(actual))\r\n                        ? (isInverted ? eDirections.Up : eDirections.Down)\r\n                        : ((general.extractNumberFromString(forecast) < general.extractNumberFromString(actual))\r\n                            ? (isInverted ? eDirections.Down : eDirections.Up) : eDirections.Bold);\r\n                }\r\n\r\n                return retVal;\r\n            }\r\n\r\n            function mutateEvent(eventMessage, totalCount) {\r\n                var currentEvent = {\r\n                    EventTime: eventMessage.EventTime.trim() + 'Z',\r\n                    CountryCode: eventMessage.CountryCode.toLowerCase(),\r\n                    Symbol: general.isArrayType(eventMessage.Symbols) ? eventMessage.Symbols.shift() : '',\r\n                    ImportanceActive: eventMessage.Importance,\r\n                    ImportanceInactive: economicCalendarConfig.eventsMaxImportance - eventMessage.Importance,\r\n                    Title: dictionary.GetItem('ec' + eventMessage.ContentId, 'economicCalendar').trim(),\r\n                    Previous: eventMessage.Previous,\r\n                    Actual: eventMessage.Actual,\r\n                    ActualDirection: decideDirection(eventMessage),\r\n                    Forecast: eventMessage.Forecast,\r\n                    ContentKey: economicCalendarConfig.contentKeySection + eventMessage.ContentId,\r\n                    RecordId: eventMessage.RecordId,\r\n                    Description: dictionary.GetItem('eclong' + eventMessage.ContentId, 'economicCalendarLongData', ' '),\r\n                    isDescriptionExpanded: ko.observable(false),\r\n                    ContentId: eventMessage.ContentId,\r\n                    TotalCount: totalCount\r\n                };\r\n\r\n                return currentEvent;\r\n            }\r\n\r\n            function onMessageReceived(eventMsgArr, mode) {\r\n                if (eventMsgArr) {\r\n\r\n                    var foundIndex;\r\n                    var events = data.events();\r\n                    var mapEvents = data.mapEvents();\r\n\r\n                    for (var i = 0, length = eventMsgArr.length; i < length; i++) {\r\n                        foundIndex = null;\r\n\r\n                        if (mode === 1) { //publish\r\n                            foundIndex = mapEvents[eventMsgArr[i].RecordId];\r\n                        }\r\n                        if (foundIndex || foundIndex == 0) {\r\n                            events[foundIndex] = mutateEvent(eventMsgArr[i], events[foundIndex].TotalCount);//publish does not have TotalCount\r\n                        } else {\r\n                            events.push(mutateEvent(eventMsgArr[i], eventMsgArr[i].TotalCount));\r\n                            mapEvents[eventMsgArr[i].RecordId] = events.length - 1;\r\n                        }\r\n                    }\r\n                    data.events(events);\r\n                    data.hasEvents(true);\r\n                } else {\r\n                    if (data.pageIndex() === 1)\r\n                        data.hasEvents(false);\r\n                }\r\n\r\n                data.isLoading(false);\r\n            }\r\n\r\n            function setObservables() {\r\n                data.hasEvents = ko.observable(false);\r\n                data.isLoading = ko.observable(true);\r\n                data.events = ko.observableArray([]);\r\n                data.newEvents = ko.observableArray([]);\r\n                data.mapEvents = ko.observableArray([]);\r\n                data.showFilters = ko.observable(false);\r\n                data.pageIndex = ko.observable(1); //web - no paging, always 1, mobile has paging\r\n            }\r\n\r\n            function applyFilter(filter) {\r\n                filter = filter || {};\r\n\r\n                if (data.pageIndex() === 1) {\r\n                    data.isLoading(true);\r\n                    unsubscribeFromTradingService();\r\n                }\r\n\r\n\r\n                EconomicCalendarConnManager.WhenAvailable()\r\n                    .then(function (isAvailable) {\r\n                        if (!isAvailable) {\r\n                            data.hasEvents(false);\r\n                            data.isLoading(false);\r\n\r\n                            return;\r\n                        }\r\n\r\n                        for (var prop in filter) {\r\n                            if (!filter.hasOwnProperty(prop) || !data.filters.hasOwnProperty(prop)) {\r\n                                continue;\r\n                            }\r\n\r\n                            data.filters[prop](filter[prop]);\r\n                        }\r\n\r\n                        subscribeToTradingService();\r\n                    })\r\n                    .done();\r\n            }\r\n\r\n            function handleServiceAvailability(value) {\r\n                if (value === eAvailabilityState.NotAvailable) {\r\n                    data.hasEvents(false);\r\n                    data.isLoading(false);\r\n                    data.events([]);\r\n                    data.mapEvents([]);\r\n                }\r\n            }\r\n\r\n            function setSubscribers() {\r\n                self.subscribeTo(data.ccyPair, function (ccyPair) {\r\n                    var currencyFilter = getCurrenciesFilter(ccyPair);\r\n\r\n                    if (currencyFilter !== false) {\r\n                        applyFilter(currencyFilter);\r\n                    }\r\n                });\r\n\r\n                unsubscribeFromStateObject = stateObject.subscribe('IsServiceAvailable', handleServiceAvailability);\r\n            }\r\n\r\n            function dispose() {\r\n                unsubscribeFromStateObject();\r\n                unsubscribeFromTradingService();\r\n\r\n                parent.dispose.call(self);\r\n            }\r\n\r\n            return {\r\n                ApplyFilter: applyFilter,\r\n                init: init,\r\n                dispose: dispose\r\n            };\r\n        });\r\n\r\n        var createViewModel = function (params) {\r\n            var viewModel = new EconomicCalendarViewModel(params);\r\n            viewModel.init();\r\n\r\n            var ccyPair = params.ccyPair,\r\n                currencyFilter;\r\n\r\n            if (general.isDefinedType(ccyPair)) {\r\n                currencyFilter = getCurrenciesFilter(ko.utils.unwrapObservable(ccyPair));\r\n\r\n                if (currencyFilter !== false) {\r\n                    viewModel.ApplyFilter(currencyFilter);\r\n                }\r\n            }\r\n\r\n            return viewModel;\r\n        };\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            },\r\n            EconomicCalendarViewModel: EconomicCalendarViewModel\r\n        };\r\n    }\r\n);",
  "isBase64": false
}