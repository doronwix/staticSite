{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/devices/web/uilayer/viewmodels/Signals/TradingSignalsViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'deviceviewmodels/Signals/TradingSignalsViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'initdatamanagers/Customer',\r\n        'devicemanagers/AlertsManager',\r\n        \"dataaccess/dalcustomer\",\r\n        'handlers/Cookie',\r\n        'viewmodels/dialogs/DialogViewModel',\r\n        'Dictionary',\r\n        'JSONHelper',\r\n        'LoadDictionaryContent!controls_ctlsignalservice',\r\n        'LoadDictionaryContent!controls_ctlsignaldisclaimer',\r\n        'LoadDictionaryContent!controls_ctlsignalrequest',\r\n        'LoadDictionaryContent!controls_ctlsignals',\r\n        'LoadDictionaryContent!controls_ctlsignalcompliance'\r\n    ],\r\n    function TradingSignalsDef(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            customer = require('initdatamanagers/Customer'),\r\n            AlertsManager = require('devicemanagers/AlertsManager'),\r\n            dalCustomer = require(\"dataaccess/dalcustomer\"),\r\n            cookieHandler = require('handlers/Cookie'),\r\n            DialogViewModel = require('viewmodels/dialogs/DialogViewModel'),\r\n            Dictionary = require('Dictionary'),\r\n            JSONHelper = require('JSONHelper');\r\n\r\n        var TradingSignalsViewModel = general.extendClass(KoComponentViewModel, function TradingSignalsClass(_params) {\r\n            var self = this,\r\n                parent = this.parent,\r\n                data = this.Data,\r\n                params = _params,\r\n                handlers = {};\r\n\r\n            var init = function (settings) {\r\n                parent.init.call(self, settings);\r\n                setObservables();\r\n                setHandlers();\r\n                setComputables();\r\n                setSubscribers();\r\n                updateSignalsPermissions();\r\n            };\r\n\r\n            var setHandlers = function () {\r\n                handlers.handleSignalTutorialSelection = function (handleParams) {\r\n                    //handleParams is the component's viewmodel instance\r\n                    var options = handleParams.Data.signalstutorials.options();\r\n                    var selectedValue = handleParams.Data.signalstutorials.value();\r\n                    var optionFound;\r\n\r\n                    if (!general.isNullOrUndefined(options) && !general.isNullOrUndefined(selectedValue)) {\r\n                        optionFound = options[parseInt(selectedValue) - 1];\r\n                    }\r\n\r\n                    if (general.isNullOrUndefined(optionFound)) {\r\n                        return false;\r\n                    }\r\n\r\n                    var dialogVieModelOptions = { width: 900, height: 670, title: optionFound.text }\r\n                    var dialogEViewType = eViewTypes.vTradingSignalsTutorials;\r\n                    var dialogArgs = { url: optionFound.url }\r\n\r\n                    DialogViewModel.open(eDialog.TradingSignalsTutorials, dialogVieModelOptions, dialogEViewType, dialogArgs);\r\n\r\n                    return true;\r\n                };\r\n            };\r\n\r\n            /*returns an observable array*/\r\n            var generateSignalsTutotrialOptionList = function (iterations) {\r\n                var textPrefix = 'ddlSignalTutorials';\r\n                var urlPrefix = textPrefix + '_Href';\r\n\r\n                return ko.observableArray(Array.apply(0, Array(iterations)).map(function (value, index) {\r\n                    var _index = ++index;\r\n\r\n                    return {\r\n                        index: _index,\r\n                        url: systemInfo.signalsTutorialsDomainUrl + Dictionary.GetItem(urlPrefix + _index, 'controls_ctlsignals'),\r\n                        text: Dictionary.GetItem(textPrefix + _index, 'controls_ctlsignals', '*')\r\n                    };\r\n                }));\r\n            };\r\n\r\n            var setObservables = function () {\r\n                var signalsTutorialCount = 6;\r\n\r\n                data.hasAgreedDisclaimer = ko.observable(false);\r\n                data.areSignalsAllowed = ko.observable(false);\r\n                data.signalsEndDate = ko.observable(\"\");\r\n                data.isLoading = ko.observable(false);\r\n                data.symbol = ko.observable(params.symbol || \"\");\r\n                data.signalstutorials = {\r\n                    options: generateSignalsTutotrialOptionList(signalsTutorialCount),\r\n                    optiontext: 'text',\r\n                    optionvalue: 'index',\r\n                    value: ko.observable(),\r\n                    caption: Dictionary.GetItem('ddlSignalTutorials0', 'controls_ctlsignals')\r\n                }\r\n            };\r\n\r\n            var setComputables = function () {\r\n                data.isShowSignal = self.createComputed(function () {\r\n                    return data.hasAgreedDisclaimer() && data.areSignalsAllowed() && !data.isLoading();\r\n                });\r\n\r\n                data.signalsAreDissallowed = self.createComputed(function () {\r\n                    return !data.areSignalsAllowed() && !data.isLoading();\r\n                });\r\n            };\r\n\r\n            var setSubscribers = function () {\r\n                self.subscribeTo(data.areSignalsAllowed, function (value) {\r\n                    if (value) {\r\n                        var tsComplianceDate = cookieHandler.ReadCookie(\"TsComplianceDate\");\r\n                        if (tsComplianceDate === null && !params.isDealer) {\r\n                            AlertsManager.UpdateAlert(AlertTypes.SignalsDisclaimerAlert);\r\n                            AlertsManager.PopAlert(AlertTypes.SignalsDisclaimerAlert);\r\n\r\n                            setAlertSubscriber();\r\n                        } else {\r\n                            data.hasAgreedDisclaimer(true);\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n\r\n            var setAlertSubscriber = function () {\r\n                if (AlertsManager.GetAlert(AlertTypes.SignalsDisclaimerAlert).isSetComplianceDate) {\r\n                    self.subscribeTo(AlertsManager.GetAlert(AlertTypes.SignalsDisclaimerAlert).isSetComplianceDate, function (value) {\r\n                        if (value) {\r\n                            data.hasAgreedDisclaimer(true);\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n\r\n            var updateSignalsPermissions = function () {\r\n                if (general.isEmptyValue(customer.prop.AreSignalsAllowed)) {\r\n                    data.isLoading(true);\r\n\r\n                    dalCustomer\r\n                        .getCustomerSignalsPermissions()\r\n                        .then(function (responseText) {\r\n                            data.isLoading(false);\r\n                            var result = JSONHelper.STR2JSON(\"getLatestTradingSignal/onLoadComplete\", responseText);\r\n                            result = result || {};\r\n                            customer.prop.AreSignalsAllowed = result.status == eResult.Success && result.result == \"True\";\r\n                            customer.prop.signalsEndDate = customer.prop.AreSignalsAllowed ? general.str2Date(result.signalsEndDate).ExtractDate() : \"\";\r\n\r\n                            data.areSignalsAllowed(customer.prop.AreSignalsAllowed);\r\n                            data.signalsEndDate(customer.prop.signalsEndDate);\r\n                        })\r\n                        .done();\r\n                }\r\n                else {\r\n                    data.areSignalsAllowed(customer.prop.AreSignalsAllowed);\r\n                    data.signalsEndDate(customer.prop.signalsEndDate);\r\n                }\r\n            };\r\n\r\n            var dispose = function () {\r\n                parent.dispose.call(self);          // inherited from KoComponentViewModel\r\n            };\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Data: data,\r\n                Handlers: handlers\r\n            };\r\n        });\r\n\r\n        var createViewModel = function (_params) {\r\n            var params = _params || {};\r\n\r\n            var viewModel = new TradingSignalsViewModel(params);\r\n            viewModel.init();\r\n\r\n            return viewModel;\r\n        };\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            }\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}