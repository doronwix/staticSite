{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/NavigationWizardViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/NavigationWizardViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'managers/historymanager',\r\n        'StateObject!wizardState',\r\n        'configuration/initconfiguration'\r\n    ],\r\n    function (require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            initConfiguration = require('configuration/initconfiguration'),\r\n            historyManager = require('managers/historymanager'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            wizardState = require('StateObject!wizardState'),\r\n            wizardStateStepSubscribe,\r\n            wizardStateStepDataSubscribe;\r\n\r\n        var NavigationWizardViewModel = general.extendClass(KoComponentViewModel, function (params) {\r\n            var self = this,\r\n                parent = this.parent,\r\n                data = this.Data,\r\n                config = initConfiguration.WithdrawalConfiguration.wizardConfig,\r\n                useHistory = config.useBrowserHistory || false;\r\n\r\n            data.stepData = {\r\n                previousStep: {},\r\n                nextStep: {}\r\n            };\r\n\r\n            function init(settings) {\r\n                parent.init.call(self, settings);\r\n                initWizard();\r\n            }\r\n\r\n            function initWizard() {\r\n                setWizardStateObject();\r\n\r\n                initStepActions();\r\n                setObservables();\r\n                setSubscribers();\r\n                validateStep();\r\n            }\r\n\r\n            function setWizardStateObject() {\r\n                if (!wizardState.containsKey('step')) {\r\n                    wizardState.set('step', config.defaultStep);\r\n                }\r\n            }\r\n\r\n            function validateStep() {\r\n                if (useHistory && data.step() !== getStepFromUrl()) {\r\n                    navigateToStep(config.defaultStep);\r\n                }\r\n            }\r\n\r\n            function setObservables() {\r\n                var firstStep = config.defaultStep || 1,\r\n                    stepConfig = config.steps[firstStep];\r\n\r\n                data.step = ko.observable(firstStep);\r\n                data.renderedComponent = ko.observable(stepConfig.component);\r\n\r\n                Object.assign(data.stepData.previousStep, {\r\n                    label: ko.observable(stepConfig.previousStep.label),\r\n                    valid: ko.observable(stepConfig.previousStep.valid),\r\n                    visible: ko.observable(stepConfig.previousStep.visible)\r\n                });\r\n\r\n                Object.assign(data.stepData.nextStep, {\r\n                    label: ko.observable(stepConfig.nextStep.label),\r\n                    valid: ko.observable(stepConfig.nextStep.valid),\r\n                    visible: ko.observable(stepConfig.nextStep.visible)\r\n                });\r\n                setWizardStateStepData(stepConfig);\r\n            }\r\n\r\n            function setWizardStateStepData(stepConfig) {\r\n                wizardState.update('stepData', {\r\n                    previousStep: {\r\n                        valid: stepConfig.previousStep.valid,\r\n                        visible: stepConfig.previousStep.visible\r\n                    },\r\n                    nextStep: {\r\n                        valid: stepConfig.nextStep.valid,\r\n                        visible: stepConfig.nextStep.visible\r\n                    }\r\n                });\r\n            }\r\n\r\n            function setSubscribers() {\r\n                wizardStateStepSubscribe = wizardState.subscribe('step', function (newStep) {\r\n                    navigateToStep(newStep);\r\n                });\r\n\r\n                if (useHistory) {\r\n                    historyManager.OnStateChanged.Add(handleHistoryChange);\r\n                }\r\n\r\n                data.step.subscribe(function (currentStep) {\r\n                    resetStep(currentStep);\r\n                });\r\n\r\n                wizardStateStepDataSubscribe = wizardState.subscribe('stepData', function (newValue) {\r\n                    data.stepData.previousStep.valid(newValue.previousStep.valid);\r\n                    data.stepData.previousStep.visible(newValue.previousStep.visible);\r\n\r\n                    data.stepData.nextStep.valid(newValue.nextStep.valid);\r\n                    data.stepData.nextStep.visible(newValue.nextStep.visible);\r\n                });\r\n            }\r\n\r\n            function handleHistoryChange(state) {\r\n                if (state.view === config.defaultForm && state.type === eHistoryStateType.Wizard) {\r\n                    return data.step(!general.isEmptyValue(state.step) ? state.step : config.defaultStep);\r\n                }\r\n            }\r\n\r\n            function navigateToStep(step) {\r\n                if (useHistory) {\r\n                    historyManager.PushWizardState(config.defaultForm, step);\r\n                } else {\r\n                    data.step(step);\r\n                }\r\n            }\r\n\r\n            function getStepFromUrl() {\r\n                var currentStateData = historyManager.GetCurrentState().data;\r\n                return currentStateData.step ? currentStateData.step : config.defaultStep;\r\n            }\r\n\r\n            function initStepActions() {\r\n                data.currentStep = {\r\n                    next: general.emptyFn,\r\n                    prev: general.emptyFn\r\n                };\r\n            }\r\n\r\n            function resetStep(currentStep) {\r\n                updateStepData(currentStep);\r\n                Object.assign(data.currentStep, {\r\n                    next: general.emptyFn,\r\n                    prev: general.emptyFn\r\n                });\r\n                data.renderedComponent(config.steps[currentStep].component);\r\n            }\r\n\r\n            function updateStepData(currentStep) {\r\n                var currentConfig = config.steps[currentStep];\r\n\r\n                data.stepData.previousStep.label(currentConfig.previousStep.label);\r\n                data.stepData.nextStep.label(currentConfig.nextStep.label);\r\n\r\n                setWizardStateStepData(currentConfig);\r\n            }\r\n\r\n            function updateStepActions(nextAction, prevAction) {\r\n                if (general.isFunctionType(nextAction)) {\r\n                    Object.assign(data.currentStep, {\r\n                        next: nextAction\r\n                    });\r\n                }\r\n\r\n                if (general.isFunctionType(prevAction)) {\r\n                    Object.assign(data.currentStep, {\r\n                        prev: prevAction\r\n                    });\r\n                }\r\n            }\r\n\r\n            function prev() {\r\n                if (data.stepData.previousStep.valid()) {\r\n                    data.currentStep.prev();\r\n                }\r\n            }\r\n\r\n            function next() {\r\n                if (data.stepData.nextStep.valid()) {\r\n                    data.currentStep.next();\r\n                }\r\n            }\r\n\r\n            function dispose() {\r\n                wizardState.unset('wizardActive');\r\n                wizardState.unset('step');\r\n                wizardState.unset('stepData');\r\n                wizardStateStepSubscribe();\r\n                wizardStateStepDataSubscribe();\r\n                if (useHistory) {\r\n                    historyManager.OnStateChanged.Remove(handleHistoryChange);\r\n                }\r\n                parent.dispose.call(self);\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Data: data,\r\n                UpdateStepActions: updateStepActions,\r\n                previousStep: data.stepData.previousStep,\r\n                nextStep: data.stepData.nextStep,\r\n                next: next,\r\n                prev: prev\r\n            };\r\n        });\r\n\r\n        var createViewModel = function (params) {\r\n            var viewModel = new NavigationWizardViewModel(params);\r\n            viewModel.init();\r\n\r\n            return viewModel;\r\n        };\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            }\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}