{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/Deals/CloseDealBaseViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/Deals/CloseDealBaseViewModel',\r\n    [\r\n        'require',\r\n        'helpers/ObservableCustomExtender',\r\n        'handlers/general',\r\n        \"helpers/ObservableHashTable\",\r\n        'helpers/KoComponentViewModel',\r\n        'configuration/initconfiguration',\r\n        'cachemanagers/dealsmanager',\r\n        'devicemanagers/ViewModelsManager',\r\n        'FxNet/LogicLayer/Deal/DealAmountLabel',\r\n        'deviceviewmodels/BaseOrder',\r\n        'viewmodels/QuotesSubscriber',\r\n        'initdatamanagers/InstrumentsManager',\r\n        'managers/instrumentTranslationsManager',\r\n        'devicemanagers/StatesManager',\r\n        'initdatamanagers/Customer',\r\n        'managers/CustomerProfileManager',\r\n        'cachemanagers/QuotesManager',\r\n        'StateObject!Transaction',\r\n        'modules/BuilderForInBetweenQuote',\r\n        'FxNet/LogicLayer/Deal/DealPermissions'\r\n    ],\r\n    function CloseDealBaseDef(require) {\r\n        var ko = require('helpers/ObservableCustomExtender'),\r\n            general = require('handlers/general'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            observableHashTable = require(\"helpers/ObservableHashTable\"),\r\n            settings = require('configuration/initconfiguration').CloseDealSettingsConfiguration,\r\n            dealsManager = require('cachemanagers/dealsmanager'),\r\n            viewModelsManager = require('devicemanagers/ViewModelsManager'),\r\n            dealAmountLabel = require('FxNet/LogicLayer/Deal/DealAmountLabel'),\r\n            BaseOrder = require('deviceviewmodels/BaseOrder'),\r\n            QuotesSubscriber = require('viewmodels/QuotesSubscriber'),\r\n            InstrumentsManager = require('initdatamanagers/InstrumentsManager'),\r\n            instrumentTranslationsManager = require('managers/instrumentTranslationsManager'),\r\n            statesManager = require('devicemanagers/StatesManager'),\r\n            customer = require('initdatamanagers/Customer'),\r\n            customerProfileManager = require('managers/CustomerProfileManager'),\r\n            quotesManager = require('cachemanagers/QuotesManager'),\r\n            stateObject = require('StateObject!Transaction'),\r\n            BuilderForInBetweenQuote = require('modules/BuilderForInBetweenQuote'),\r\n            dealPermissions = require('FxNet/LogicLayer/Deal/DealPermissions');\r\n\r\n        var CloseDealBaseViewModel = general.extendClass(KoComponentViewModel, function CloseDealBaseClass() {\r\n            var self = this,\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = this.Data, // inherited from KoComponentViewModel\r\n                baseOrder = new BaseOrder(),\r\n                quotesSubscriber = new QuotesSubscriber(),\r\n                observableOpenDealsCollection = new observableHashTable(ko, general, 'orderID', { enabled: true, sortProperty: 'orderID', asc: false });\r\n\r\n            function init(customSettings) {\r\n                parent.init.call(self, customSettings); // inherited from KoComponentViewModel\t\t\t\r\n                baseOrder.Init({}, data);\r\n\r\n                setProperties();\r\n                setObservables();\r\n                setComputables();\r\n                setSubscribers();\r\n\r\n                registerToDispatcher();\r\n                setStaticInfo();\r\n                populateObservableCollection();\r\n\r\n                updateSelectedPositionBasedOnOrderID();\r\n                setChartProperties();\r\n                stateObject.update('currentRateDirectionSwitch', settings.currentRateDirectionSwitch);\r\n\r\n                quotesSubscriber.Start();\r\n            }\r\n\r\n            function setProperties() {\r\n                data.PageName = eDealPage.CloseDeal;\r\n            }\r\n\r\n            function setObservables() {\r\n                data.orderID = ko.observable(\"\");\r\n                data.selectedInstrument = stateObject.set('selectedInstrument', ko.observable(''));\r\n                data.ccyPairLong = ko.observable(\"\");\r\n                data.orderDir = stateObject.set('orderDir', ko.observable(eOrderDir.None));\r\n                data.ccyPair = stateObject.set('ccyPair', ko.observable(''));\r\n                data.customerSymbolName = stateObject.set('customerSymbolName', ko.observable(''));\r\n                data.customerSymbolId = ko.observable(customer.prop.baseCcyId());\r\n                data.selectedCcyId = ko.observable(customer.prop.selectedCcyId());\r\n                data.changePips = ko.observable(\"\");\r\n                data.selectedDealAmount = stateObject.set('selectedDealAmount', ko.observable(''));\r\n                data.quoteForOtherCcyToAccountCcy = stateObject.set('quoteForOtherCcyToAccountCcy', ko.observable(''));\r\n                data.amountSymbol = stateObject.set('amountSymbol', ko.observable(''));\r\n                data.baseSymbol = stateObject.set('baseSymbol', ko.observable(''));\r\n                data.bidPips = ko.observable(\"\");\r\n                data.askPips = ko.observable(\"\");\r\n                data.isFuture = stateObject.set('isFuture', ko.observable(''));\r\n                data.isShare = stateObject.set('isShare', ko.observable(''));\r\n                data.change = stateObject.set('change', ko.observable(''));\r\n                data.formattedChange = stateObject.set('formattedChange', ko.observable(''));\r\n                data.tradeTime = stateObject.set('tradeTime', ko.observable(''));\r\n                data.open = stateObject.set('open', ko.observable(''));\r\n                data.close = stateObject.set('close', ko.observable(''));\r\n                data.highBid = stateObject.set('highBid', ko.observable(''));\r\n                data.lowAsk = stateObject.set('lowAsk', ko.observable(''));\r\n                data.isProcessing = ko.observable(false);\r\n                data.isCollapsed = ko.observable(false);\r\n                data.SelectedPosition = ko.observable(\"\");\r\n                data.profileKeyForDefaultTab = ko.observable(settings.profileKeyForDefaultTab);\r\n                data.initialToolTab = stateObject.set('initialToolTab', ko.observable(''));\r\n                data.selectedCcyName = ko.observable(customer.prop.selectedCcyName());\r\n                data.bid = stateObject.set('bid', ko.observable(''));\r\n                data.ask = stateObject.set('ask', ko.observable(''));\r\n                data.slRate = ko.observable(\"\").extend({ dirty: false });\r\n                data.tpRate = ko.observable(\"\").extend({ dirty: false });\r\n                data.quoteIsActive = stateObject.set('isActiveQuote', ko.observable(false));\r\n\r\n                data.customerSymbolName(customer.prop.baseCcyName());\r\n                data.initialToolTab(customerProfileManager.ProfileCustomer()[settings.profileKeyForDefaultTab] || eNewDealTool.Chart);\r\n\r\n                data.chartTransactionEnabled = stateObject.set('chartTransactionEnabled', ko.observable(false));\r\n            }\r\n\r\n            function setComputables() {\r\n                data.HasPosition = self.createComputed(function () {\r\n                    var selectedPositionValue = ko.utils.unwrapObservable(data.SelectedPosition);\r\n\r\n                    return !general.isEmptyValue(selectedPositionValue);\r\n                });\r\n\r\n                data.CloseDealReady = self.createComputed(function () {\r\n                    var isGuiContextAvailable = !data.isProcessing(),\r\n                        isMarketClosed = general.isDefinedType(statesManager.States.IsMarketClosed()) ? statesManager.States.IsMarketClosed() : false,\r\n                        result = data.quoteIsActive() && !isMarketClosed && isGuiContextAvailable && data.HasPosition();\r\n\r\n                    return result;\r\n                });\r\n            }\r\n\r\n            function setSubscribers() {\r\n                self.subscribeTo(data.SelectedPosition, function (position) {\r\n                    if (position) {\r\n                        data.selectedInstrument(position.instrumentID);\r\n                        data.ccyPairLong(position.Instrument.ccyPairLong);\r\n                        data.ccyPair(position.Instrument.ccyPair);\r\n                        data.selectedDealAmount(position.dealAmount);\r\n                        data.amountSymbol(position.Instrument.amountSymbol);\r\n                        data.baseSymbol(position.Instrument.baseSymbolId);\r\n                        data.isFuture(position.Instrument.isFuture);\r\n                        data.isShare(position.Instrument.isShare);\r\n                        data.orderDir(position.orderDir);\r\n                        data.slRate(position.slRate);\r\n                        data.tpRate(position.tpRate);\r\n\r\n                        updateQuoteValues();\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(data.selectedInstrument, function (instrumentId) {\r\n                    var instrument = InstrumentsManager.GetInstrument(instrumentId);\r\n\r\n                    if (!instrument) {\r\n                        return;\r\n                    }\r\n\r\n                    BuilderForInBetweenQuote.GetInBetweenQuote(instrument.otherSymbol, customer.prop.baseCcyId())\r\n                        .then(function (response) {\r\n                            data.quoteForOtherCcyToAccountCcy(response);\r\n                        }).done();\r\n                });\r\n            }\r\n\r\n            function registerToDispatcher() {\r\n                dealsManager.OnDealsChange.Add(onDealsChange);\r\n                dealsManager.OnDealsPLChange.Add(onDealsPLChange);\r\n                quotesManager.OnChange.Add(updateQuoteValues);\r\n            }\r\n\r\n            function updateQuoteValues() {\r\n                var activeQuote = quotesManager.Quotes.GetItem(data.selectedInstrument());\r\n\r\n                if (activeQuote) {\r\n                    data.changePips(activeQuote.changePips);\r\n                    data.tradeTime(activeQuote.tradeTime);\r\n                    data.close(activeQuote.close);\r\n                    data.open(activeQuote.open);\r\n                    data.change(Format.toPercent(activeQuote.change));\r\n                    data.formattedChange(Format.toSignedPercent(activeQuote.change, ''));\r\n                    data.highBid(activeQuote.highBid);\r\n                    data.lowAsk(activeQuote.lowAsk);\r\n                    data.bid(activeQuote.bid);\r\n                    data.ask(activeQuote.ask);\r\n                    data.quoteIsActive(activeQuote.isActive());\r\n                }\r\n            }\r\n\r\n            function onDealsChange(items) {\r\n                if (!items) {\r\n                    return;\r\n                }\r\n\r\n                removeItems(items.removedItems);\r\n                updateItems(items.editedItems);\r\n                addNewItems(items.newItems);\r\n            }\r\n\r\n            function getGrossPl(deal) {\r\n                var discount = (dealPermissions.HasSpreadDiscount() ? -general.toNumeric(deal.spreadDiscount) : (dealPermissions.CustomerDealPermit() === eDealPermit.ZeroSpread ? general.toNumeric(deal.commission) : 0));\r\n                return (general.toNumeric(deal.pl) + discount).toFixed(2);\r\n            }\r\n\r\n            function onDealsPLChange(changes) {\r\n                var updatedItems = changes.dealsIDs;\r\n                for (var i = 0, ii = updatedItems.length; i < ii; i++) {\r\n                    var observable = observableOpenDealsCollection.Get(updatedItems[i]);\r\n                    if (observable) {\r\n                        var deal = dealsManager.Deals.GetItem(updatedItems[i]);\r\n\r\n                        if (deal) {\r\n                            var delta = {\r\n                                prevSpotRate: observable.spotRate(),\r\n                                spotRate: deal.spotRate,\r\n                                spotRateLabel: setRateLabel(deal.spotRate, deal.instrumentID),\r\n                                closingRateLabel: setRateLabel(deal.closingRate, deal.instrumentID),\r\n                                fwPips: deal.fwPips,\r\n                                closingRate: deal.closingRate,\r\n                                pl: deal.pl,\r\n                                lastUpdate: quotesSubscriber.GetQuote(deal.instrumentID).time(),\r\n                                commission: deal.commission,\r\n                                grosspl: getGrossPl(deal)\r\n                            }\r\n\r\n                            observableOpenDealsCollection.Update(updatedItems[i], delta);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function removeItems(removedItems) {\r\n                for (var i = 0; i < removedItems.length; i++) {\r\n                    observableOpenDealsCollection.Remove(removedItems[i]);\r\n                }\r\n            }\r\n\r\n            function updateItems(updatedItems) {\r\n                for (var i = 0, ii = updatedItems.length; i < ii; i++) {\r\n                    var deal = toObservableRow(dealsManager.Deals.GetItem(updatedItems[i]));\r\n                    if (deal) {\r\n                        observableOpenDealsCollection.Update(deal.orderID, deal);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function addNewItems(newItems) {\r\n                for (var i = 0, ii = newItems.length; i < ii; i++) {\r\n                    var deal = toObservableRow(dealsManager.Deals.GetItem(newItems[i]));\r\n                    if (deal) {\r\n                        observableOpenDealsCollection.Add(deal);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function changeSelectedPosition() {\r\n                data.SelectedPosition(observableOpenDealsCollection.Values()[0]);\r\n            }\r\n\r\n            function toObservableRow(deal) {\r\n                var instrument = InstrumentsManager.GetInstrument(deal.instrumentID);\r\n\r\n                var row = {\r\n                    positionNumber: deal.positionNumber,\r\n                    instrumentID: deal.instrumentID || 0,\r\n                    orderDir: deal.orderDir,\r\n                    dealAmount: deal.orderDir == eOrderDir.Sell ? deal.sellAmount : deal.buyAmount,\r\n\r\n                    orderID: deal.orderID,\r\n                    prevSpotRate: ko.observable(deal.spotRate),\r\n                    spotRate: ko.observable(deal.spotRate),\r\n                    closingRate: ko.observable(deal.closingRate),\r\n                    fwPips: ko.observable(deal.fwPips),\r\n                    exeTime: ko.observable(deal.exeTime),\r\n                    valueDate: ko.observable(getValueDate(deal)),\r\n                    pl: ko.observable(deal.pl),\r\n\r\n                    dealRate: deal.orderRate,\r\n                    dealRateLabel: setRateLabel(deal.orderRate, deal.instrumentID),\r\n                    spotRateLabel: ko.observable(setRateLabel(deal.spotRate, deal.instrumentID)),\r\n                    closingRateLabel: ko.observable(setRateLabel(deal.closingRate, deal.instrumentID)),\r\n                    slRate: deal.slRate,\r\n                    tpRate: deal.tpRate,\r\n\r\n                    slRateLabel: setRateLabel(deal.slRate, deal.instrumentID),\r\n                    tpRateLabel: setRateLabel(deal.tpRate, deal.instrumentID),\r\n\r\n                    Instrument: {\r\n                        ccyPairLong: instrumentTranslationsManager.Long(deal.instrumentID),\r\n                        ccyPair: instrument.ccyPair,\r\n                        baseSymbol: instrumentTranslationsManager.GetTranslatedInstrumentById(deal.instrumentID).baseSymbolName,\r\n                        dealAmountLbl: dealAmountLabel.Translate(instrument).label,\r\n                        amountSymbol: instrument.otherSymbol,\r\n                        isFuture: instrument.isFuture,\r\n                        isShare: instrument.isShare,\r\n                        isStock: instrument.isStock,\r\n                        baseSymbolId: instrument.baseSymbol,\r\n                        otherSymbolId: instrument.otherSymbol\r\n                    }\r\n                };\r\n\r\n                row.commission = ko.observable(!general.isStringType(deal.commission) ? Number.toStr(deal.commission) : deal.commission);\r\n                row.spreadDiscount = ko.observable(!general.isStringType(deal.spreadDiscount) ? Number.toStr(deal.spreadDiscount) : deal.spreadDiscount);\r\n                row.grosspl = ko.observable(getGrossPl(deal));\r\n                row.hasAdditionalPL = ko.observable(Number(deal.additionalPL) !== 0);\r\n                row.adj = ko.computed(function () {\r\n                    if (customer.prop.dealPermit == eDealPermit.Islamic) {\r\n                        return false;\r\n                    }\r\n\r\n                    if (deal.valueDate.length === 0) {\r\n                        return true;\r\n                    }\r\n\r\n                    return deal.positionNumber != deal.orderID;\r\n                });\r\n\r\n                // ------------------------------\r\n                row.isProfit = ko.computed(function () {\r\n                    return general.toNumeric(this.pl()) >= 0;\r\n                }, row);\r\n                row.isLoss = ko.computed(function () {\r\n                    return general.toNumeric(this.pl()) < 0;\r\n                }, row);\r\n                row.isUp = ko.computed(function () {\r\n                    return this.spotRate() > this.prevSpotRate();\r\n                }, row);\r\n                row.isDown = ko.computed(function () {\r\n                    return this.spotRate() < this.prevSpotRate();\r\n                }, row);\r\n\r\n                return row;\r\n            }\r\n\r\n            function getValueDate(deal) {\r\n                var instrument = InstrumentsManager.GetInstrument(deal.instrumentID);\r\n\r\n                if (instrument.isShare) {\r\n                    var corporateActionDate = instrument.getCorporateActionDate();\r\n                    if (corporateActionDate)\r\n                        if (deal.valueDate)\r\n                            return {\r\n                                isValueDateEmpty: false,\r\n                                date: general.str2Date(deal.valueDate, 'd/m/y H:M') < general.str2Date(corporateActionDate, 'd/m/y H:M') ? deal.valueDate : corporateActionDate\r\n                            };\r\n                        else\r\n                            return {\r\n                                isValueDateEmpty: true,\r\n                                date: corporateActionDate\r\n                            };\r\n                }\r\n\r\n                if (deal.valueDate) {\r\n                    return {\r\n                        isValueDateEmpty: false,\r\n                        date: deal.valueDate\r\n                    };\r\n                } else {\r\n                    return {\r\n                        isValueDateEmpty: true,\r\n                        date: null\r\n                    };\r\n                }\r\n            }\r\n\r\n            function setRateLabel(rate, instrumentID) {\r\n                var RateLabel = {\r\n                    First: 0,\r\n                    Middle: 0,\r\n                    Last: 0\r\n                };\r\n\r\n                var splitSpotRate = Format.tenthOfPipSplitRate(rate, instrumentID);\r\n\r\n                RateLabel.First = splitSpotRate.button.first;\r\n                RateLabel.Middle = splitSpotRate.button.middle;\r\n                RateLabel.Last = splitSpotRate.button.last;\r\n\r\n                return RateLabel;\r\n            }\r\n\r\n            function setStaticInfo() {\r\n                data.isProcessing(false);\r\n                data.SelectedPosition(\"\");   // reset to default value\r\n            }\r\n\r\n            function populateObservableCollection() {\r\n                dealsManager.Deals.ForEach(function iterator(orderId, deal) {\r\n                    var row = toObservableRow(deal);\r\n\r\n                    observableOpenDealsCollection.Add(row);\r\n                });\r\n            }\r\n\r\n            function updateSelectedPositionBasedOnOrderID() {\r\n                var orderId = viewModelsManager.VManager.GetViewArgsByKeyName(eViewTypes.vCloseDeal, 'orderId');\r\n                if (orderId) {\r\n                    data.SelectedPosition(observableOpenDealsCollection.Get(orderId));\r\n                    data.orderID(orderId);\r\n                }\r\n            }\r\n\r\n            function unRegisterFromDispatcher() {\r\n                dealsManager.OnDealsPLChange.Remove(onDealsPLChange);\r\n                dealsManager.OnDealsChange.Remove(onDealsChange);\r\n                quotesManager.OnChange.Remove(updateQuoteValues);\r\n            }\r\n\r\n            function setChartProperties() {\r\n                stateObject.update(\"stopLossRate\", ko.observable(data.SelectedPosition().slRate));\r\n                stateObject.update(\"takeProfitRate\", ko.observable(data.SelectedPosition().tpRate));\r\n                stateObject.update(\"dealRate\", data.SelectedPosition().dealRate);\r\n                stateObject.update('chart', settings.chart);\r\n            }\r\n\r\n            function unsetChartProperties() {\r\n                stateObject.unset(\"stopLossRate\");\r\n                stateObject.unset(\"takeProfitRate\");\r\n                stateObject.unset(\"dealRate\");\r\n                stateObject.unset('chart');\r\n                stateObject.unset('stateObjectIsReadyDefer');\r\n            }\r\n\r\n            function dispose() {\r\n                unsetChartProperties();\r\n                unRegisterFromDispatcher();\r\n                observableOpenDealsCollection.Clear();\r\n                quotesSubscriber.Stop();\r\n                stateObject.unset('cachedOvernightFinancing');\r\n                stateObject.unset('currentRateDirectionSwitch');\r\n                parent.dispose.call(self);\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                Data: data,\r\n                ChangeSelectedPosition: changeSelectedPosition,\r\n                OpenDeals: observableOpenDealsCollection.Values,\r\n                BaseOrder: baseOrder,\r\n                DealPermissions: dealPermissions,\r\n                dispose: dispose\r\n            };\r\n        });\r\n\r\n        return CloseDealBaseViewModel;\r\n    }\r\n);",
  "isBase64": false
}