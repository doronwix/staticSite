{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/AdvinionChartCustomizations/ChartSignals/tc/pivot.lib.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "define('AdvinionChartCustomizations/ChartSignals/tc/pivot.lib',\r\n    [],\r\n    function () {\r\n        function PivotLibrary(objChartContainer, handlers) {\r\n            var marrHLineIDS = [], strTargetLine = null, strTargetLabel = null, strAlternateLine = null, strAlternateLabel = null, strTrendLine = null, strPreTrendLine = null, strCSPatMarker = null;\r\n            var marrImportantRates;\r\n            var objThis = this;\r\n            var IChart = objChartContainer.chart;\r\n            var IShapes = IChart.Shapes;\r\n            var mobjResource = IChart[\"LocalizationManager\"][\"gui\"];\r\n            var mstrLegendUID = \"\";\r\n            var onClearView = handlers ? handlers.onClearView : null;\r\n            var onRenderTC = handlers ? handlers.onRenderTC : null;\r\n\r\n            //This logic will update the data object with data based on partial given data from TC and data from the Chart\r\n            this[\"PerformTCLogicOnData\"] = function (objDataItem, iSma20, iSma50, iSma20And50, iMacd0, iMacdSL, iBBands, iRsi30, iRsi70, iVolume) {\r\n\r\n                var objPivot = objDataItem.pivot;\r\n\r\n                //\r\n                // Pivot\r\n                //\r\n                //Don't draw line which are similar to pivot\r\n                if (objPivot.res1 == objPivot.pivot) {\r\n                    objPivot.res1 = 0;\t//Don't draw it\r\n                    objPivot.direction = -1;\t//It's a bear\r\n                    objPivot.target = objPivot.sup1;\r\n                    objPivot.failure = objPivot.res2;\r\n                }\r\n                else if (objPivot.sup1 == objPivot.pivot) {\r\n                    objPivot.sup1 = 0;\t//Don't draw it\r\n                    objPivot.direction = 1;\t//It's a bull\r\n                    objPivot.target = objPivot.res1;\r\n                    objPivot.failure = objPivot.sup2;\r\n                }\r\n                else\r\n                    objPivot.direction = 0;\t//It's a side\r\n\r\n\r\n                //\r\n                // RSI\r\n                //\r\n                if (iRsi30 != null || iRsi70 != null) {//{\"direction\": -1, \"parameter1\": 14, \"valueB\": 75.0, \"valueA\": 61.0, \"parameter2\": 9, \"dateA\": 1528278000000, \"dateB\": 1528344000000, \"type\": \"overbought\"}\r\n                    var objRSI = {};\r\n                    objDataItem.rsi = objRSI;\r\n\r\n                    objRSI.direction = objPivot.direction;\r\n                    objRSI.parameter1 = 14;\r\n                    objRSI.parameter2 = 9;\r\n                    objRSI.valueA = 0;\r\n                    objRSI.valueB = 0;\r\n                    objRSI.dateA = 0;\r\n                    objRSI.dateB = 0;\r\n                    objRSI.type = (iRsi30 != null ? \"oversold\" : \"overbought\");\r\n                }\r\n\r\n                //\r\n                // SMA\r\n                //\r\n                if (iSma20 != null || iSma50 != null || iSma20And50 != null) {/*{\"valueF\": 10658.0, \"direction\": -1, \"valueD\": 10662.0, \"parameter1\": 5, \"valueA\": 10659.0, \"parameter3\": 20, \"parameter2\": 10, \"valueE\": 10662.0, \r\n\t\t\t\t\"dateA\": 1528276800000, \"dateB\": 1528277400000, \"valueC\": 10657.0, \"type\": \"crossover\", \"valueB\": 10660.0} */\r\n                    var objSMA = {};\r\n                    objDataItem.sma = objSMA;\r\n\r\n                    objSMA.direction = objPivot.direction;\r\n\r\n                    if (iSma20And50 != null) {\r\n                        objSMA.parameter1 = 20;\r\n                        objSMA.parameter2 = 50;\r\n                        objSMA.parameter3 = 0;\r\n                        if (iSma20And50 == 1)\r\n                            objSMA.type = \"crossover\";\r\n                        else if (iSma20And50 == -1)\r\n                            objSMA.type = \"crossunder\";\r\n                    }\r\n                    else if (iSma20 != null) {\r\n                        objSMA.parameter1 = 20;\r\n                        objSMA.parameter2 = 0;\r\n                        objSMA.parameter3 = 0;\r\n                        if (iSma20 == 1)\r\n                            objSMA.type = \"crossover\";\r\n                        else if (iSma20 == -1)\r\n                            objSMA.type = \"crossunder\";\r\n                    }\r\n                    else if (iSma50 != null) {\r\n                        objSMA.parameter1 = 50;\r\n                        objSMA.parameter2 = 0;\r\n                        objSMA.parameter3 = 0;\r\n                        if (iSma50 == 1)\r\n                            objSMA.type = \"crossover\";\r\n                        else if (iSma50 == -1)\r\n                            objSMA.type = \"crossunder\";\r\n                    }\r\n\r\n                    objSMA.valueA = 0;\r\n                    objSMA.valueB = 0;\r\n                    objSMA.valueC = 0;\r\n                    objSMA.valueD = 0;\r\n                    objSMA.valueE = 0;\r\n                    objSMA.valueF = 0;\r\n                    objSMA.dateA = 0;\r\n                    objSMA.dateB = 0;\r\n                    objSMA.type = (iRsi30 != null ? \"oversold\" : \"overbought\");\r\n                }\r\n\r\n                //\r\n                // MACD\r\n                //\r\n                if (iMacd0 != null || iMacdSL != null) {//{\"direction\": -1, \"parameter1\": 14, \"valueB\": 75.0, \"valueA\": 61.0, \"parameter2\": 9, \"dateA\": 1528278000000, \"dateB\": 1528344000000, \"type\": \"overbought\"}\r\n                    var objMACD = {};\r\n                    objDataItem.macd = objMACD;\r\n\r\n                    objMACD.direction = objPivot.direction;\r\n                    objMACD.parameter1 = 12;\r\n                    objMACD.parameter2 = 26;\r\n                    objMACD.parameter3 = 9;\r\n                    objMACD.valueA = 0;\r\n                    objMACD.valueB = 0;\r\n                    objMACD.dateA = 0;\r\n                    objMACD.dateB = 0;\r\n                    if (iMacd0 == 1)\r\n                        objMACD.type = \"upsidemomentum\";\r\n                    else if (iMacd0 == -1)\r\n                        objMACD.type = \"downsidemomentum\";\r\n\r\n                    if (iMacdSL == 1)\r\n                        objMACD.type = \"crossover\";\r\n                    else if (iMacdSL == -1)\r\n                        objMACD.type = \"crossunder\";\r\n                }\r\n\r\n                //\r\n                // BBANDS\r\n                //\r\n                if (iBBands != null) {//{\"direction\": -1, \"parameter1\": 20, \"valueB\": 10810.0, \"valueA\": 10795.0, \"parameter2\": 2.0, \"dateA\": 1528356000000, \"dateB\": 1528357200000, \"type\": \"crossup\"}\r\n                    var objBBAND = {};\r\n                    objDataItem.bbands = objBBAND;\r\n\r\n                    objBBAND.direction = objPivot.direction;\r\n                    objBBAND.parameter1 = 20;\r\n                    objBBAND.parameter2 = 2;\r\n                    objBBAND.valueA = 0;\r\n                    objBBAND.valueB = 0;\r\n                    objBBAND.dateA = 0;\r\n                    objBBAND.dateB = 0;\r\n                    objBBAND.type = (iBBands == -1 ? \"crossdown\" : \"crossup\");\r\n                }\r\n\r\n            }\r\n\r\n\r\n            this[\"GetCleanDataObject\"] = function () {\r\n\r\n                return {\r\n                    \"source\": \"\",\r\n                    \"type\": \"signals\",\r\n                    \"subtype\": \"\",\r\n                    \"target\": \"\",\r\n                    \"data\": [\r\n                        {\r\n                            \"rsi\": null,\r\n                            \"created\": 0,\r\n                            \"bbands\": null,\r\n                            \"symbol\": \"EUR/USD\",\r\n                            \"symbolname\": \"EUR/USD\",\r\n                            \"timescale\": \"1m\",\r\n                            \"precision\": 0,\r\n                            \"gap\": null,\r\n                            \"cspattern\": null,\r\n                            \"pivot\": {\r\n                                \"direction\": 1,\r\n                                \"res1\": 0,\r\n                                \"res2\": 0,\r\n                                \"res3\": 0,\r\n                                \"sup1\": 0,\r\n                                \"sup2\": 0,\r\n                                \"sup3\": 0,\r\n                                \"pivot\": 0,\r\n                                \"valueA\": 0,\r\n                                \"valueB\": 0,\r\n                                \"valueC\": 0,\r\n                                \"dateA\": 0,\r\n                                \"dateB\": 0,\r\n                                \"dateC\": 0,\r\n                                \"targetdate\": 0,\r\n                                \"target\": 0,\r\n                                \"failure\": 0\r\n                            },\r\n                            \"timezone\": \"0\",\r\n                            \"sma\": null\r\n                        }],\r\n                    \"story\": \"\"\r\n                }\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n            function AddLegend(objTAConfig, objTA) {\r\n\r\n                var objLegend = {\r\n                    \"uid\": \"\",\r\n                    \"closeBtn\": true,\r\n                    \"editIdx\": \"\",\r\n                    \"colors\": [],\r\n                    \"captions\": [],\r\n                    \"values\": null,\r\n                    \"type\": \"signals.tc\",\r\n                    \"sources\": null,\r\n                    \"params\": null,\r\n                    \"visible\": true,\r\n                    \"name\": \"TC\"\r\n                };\r\n\r\n                var strTerm = (objTA.pivot.term != null ? objTA.pivot.term.toLowerCase() : \"st\");\r\n\r\n\r\n                //Add capption\r\n                objLegend.captions.push(mobjResource[\"returnLocalizationString\"](\"signals.tradingcentral.legend.\" + strTerm, \"TC\"))\r\n                //Set legend color from config\r\n                var objStyle = objTAConfig[\"configuration\"][\"legend\"];\r\n                objLegend.colors.push(objStyle.color);\r\n                mstrLegendUID = IChart.GetGUID();\r\n                objLegend.uid = mstrLegendUID;\r\n                objLegend.editIdx = IChart.GetGUID();\r\n                IChart.AddExtrenalLegend(mstrLegendUID, objLegend);\r\n\r\n            }\r\n\r\n            this[\"ClearView\"] = function () {\r\n                //Delete previous lines\r\n                for (var i = 0; i < marrHLineIDS.length; i++)\r\n                    IShapes.DeleteHLine(\"price\", marrHLineIDS[i]);\r\n                marrHLineIDS = [];\r\n\r\n\r\n                IShapes.DeleteLine(\"price\", strTargetLine);\r\n                IShapes.DeleteLine(\"price\", strAlternateLine);\r\n                IShapes.DeleteLabel(\"price\", strTargetLabel);\r\n                IShapes.DeleteLabel(\"price\", strAlternateLabel);\r\n                IShapes.DeleteLine(\"price\", strTrendLine);\r\n                IShapes.DeleteLine(\"price\", strPreTrendLine);\r\n                IShapes.DeleteVRange(\"price\", strCSPatMarker);\r\n                IChart.AddInViewValues(\"price\", \"showallpoints\", []);\r\n\r\n                if (mstrLegendUID != null && mstrLegendUID != \"\")\r\n                    IChart.DeleteExtrenalLegend(mstrLegendUID);\r\n\r\n                if (onClearView) {\r\n                    onClearView();\r\n                }\r\n            };\r\n\r\n            this[\"RenderTC\"] = function (objTAConfig, objData) {\r\n                this[\"RenderPivot\"](objTAConfig, objData);\r\n                if (onRenderTC) {\r\n                    onRenderTC();\r\n                }\r\n            }\r\n\r\n            this[\"RenderPivot\"] = function (objTAConfig, objTA) {\r\n\r\n                var strStatus, strReason;\r\n                var strColor;\r\n\r\n\r\n                if (objTA == null || objTAConfig == null)\r\n                    return;\r\n\r\n                this[\"ClearView\"]();\r\n\r\n                objPivot = objTA.pivot;\r\n\r\n                //Pivot not found (there must be atleast target or failure)\r\n                if (objPivot.target == 0 && objPivot.failure == 0)\r\n                    return;\r\n\r\n                strSymbol = objTA.symbol;\r\n                strSymbolName = objTA.symbolname;\r\n                strTimeScale = objTA.timescale.toUpperCase();\t//TimeScales defined as uppercase\r\n\r\n                lngLastDate4History = 0;\r\n                lngHistorySize = 1000;\t//Set last date\r\n\r\n                //Make sure all important rates inside view port\r\n                marrImportantRates = [];\r\n\r\n\r\n                //Example for using resources\r\n                //mstrTCTimeScale = mobjResource[\"returnLocalizationString\"](\"signals.tradingcentral.lines\", \"pivot\");\r\n\r\n                //Draw support and resistance\r\n                var strField, strLabel;\r\n                var objLineStyle;\r\n                for (var i = 1; i <= 3; i++) {\r\n                    strField = \"sup\" + i;\r\n\r\n                    objLineStyle = objTAConfig[\"configuration\"][\"pivotlines\"][\"support\" + i];\r\n                    if (objPivot[strField] != 0) {\r\n                        strLabel = mobjResource[\"returnLocalizationString\"](\"signals.tradingcentral.lines.\" + strField, strField);\r\n                        marrHLineIDS.push(IShapes.AddHLine(\"price\", objPivot[strField], strLabel, objLineStyle.lineColor, objLineStyle.lineWidth,\r\n                            objLineStyle.dashStyle, objLineStyle.labelColor, objLineStyle.font, objLineStyle.alignment,\r\n                            objLineStyle.hPadding, objLineStyle.margins, objLineStyle.inPriceRange, objLineStyle.labelBKColor));\r\n\r\n                        //Show label on Price-Axis\r\n                        strLabel = mobjResource[\"returnLocalizationString\"](\"signals.tradingcentral.outOfRangeLabel.\" + strField, strField);\r\n                        IShapes.UpdateShape(\"price\", marrHLineIDS[marrHLineIDS.length - 1],\r\n                            [\"outOfRangeAxisMarker\", objLineStyle.outOfRangeAxisMarker,\r\n                                \"outOfRangeBoxColor\", objLineStyle.outOfRangeBoxColor,\r\n                                \"outOfRangeTextColor\", objLineStyle.outOfRangeTextColor,\r\n                                \"outOfRangeLabel\", strLabel,\r\n                                \"boxColor\", objLineStyle.boxColor,\r\n                                \"boxTextColor\", objLineStyle.boxTextColor], false);\r\n                        marrImportantRates.push(objPivot[strField]);\r\n                    }\r\n                    strField = \"res\" + i;\r\n                    objLineStyle = objTAConfig[\"configuration\"][\"pivotlines\"][\"resistance\" + i];\r\n                    if (objPivot[strField] != 0) {\r\n                        strLabel = mobjResource[\"returnLocalizationString\"](\"signals.tradingcentral.lines.\" + strField, strField);\r\n                        marrHLineIDS.push(IShapes.AddHLine(\"price\", objPivot[strField], strLabel, objLineStyle.lineColor, objLineStyle.lineWidth,\r\n                            objLineStyle.dashStyle, objLineStyle.labelColor, objLineStyle.font, objLineStyle.alignment,\r\n                            objLineStyle.hPadding, objLineStyle.margins, objLineStyle.inPriceRange, objLineStyle.labelBKColor));\r\n                        //Show label on Price-Axis\r\n                        strLabel = mobjResource[\"returnLocalizationString\"](\"signals.tradingcentral.outOfRangeLabel.\" + strField, strField);\r\n                        IShapes.UpdateShape(\"price\", marrHLineIDS[marrHLineIDS.length - 1],\r\n                            [\"outOfRangeAxisMarker\", objLineStyle.outOfRangeAxisMarker,\r\n                                \"outOfRangeBoxColor\", objLineStyle.outOfRangeBoxColor,\r\n                                \"outOfRangeTextColor\", objLineStyle.outOfRangeTextColor,\r\n                                \"outOfRangeLabel\", strLabel,\r\n                                \"boxColor\", objLineStyle.boxColor,\r\n                                \"boxTextColor\", objLineStyle.boxTextColor], false);\r\n                        marrImportantRates.push(objPivot[strField]);\r\n                    }\r\n\r\n                }\r\n\r\n                if (objPivot.pivot != 0) {\r\n                    strField = \"pivot\";\r\n                    objLineStyle = objTAConfig[\"configuration\"][\"pivotlines\"][\"pivot\"];\r\n                    strLabel = mobjResource[\"returnLocalizationString\"](\"signals.tradingcentral.lines.\" + strField, strField);\r\n                    marrHLineIDS.push(IShapes.AddHLine(\"price\", objPivot[strField], strLabel, objLineStyle.lineColor, objLineStyle.lineWidth,\r\n                        objLineStyle.dashStyle, objLineStyle.labelColor, objLineStyle.font, objLineStyle.alignment,\r\n                        objLineStyle.hPadding, objLineStyle.margins, objLineStyle.inPriceRange, objLineStyle.labelBKColor));\r\n                    //Show label on Price-Axis\r\n                    strLabel = mobjResource[\"returnLocalizationString\"](\"signals.tradingcentral.outOfRangeLabel.\" + strField, strField);\r\n                    IShapes.UpdateShape(\"price\", marrHLineIDS[marrHLineIDS.length - 1],\r\n                        [\"outOfRangeAxisMarker\", objLineStyle.outOfRangeAxisMarker,\r\n                            \"outOfRangeBoxColor\", objLineStyle.outOfRangeBoxColor,\r\n                            \"outOfRangeTextColor\", objLineStyle.outOfRangeTextColor,\r\n                            \"outOfRangeLabel\", strLabel,\r\n                            \"boxColor\", objLineStyle.boxColor,\r\n                            \"boxTextColor\", objLineStyle.boxTextColor], false)\r\n                    marrImportantRates.push(objPivot.pivot);\r\n                }\r\n\r\n                objLineStyle = objTAConfig[\"configuration\"][\"pivotlines\"][\"target\"];\r\n                strTargetLine = IShapes.AddLine(\"price\", objPivot.dateC, objPivot.valueC, objPivot.targetdate, objPivot.target, objLineStyle.lineColor, 2, [], true);\r\n                IShapes.UpdateShape(\"price\", strTargetLine, [\"drawArrow\", true, \"arrowHeadSize\", objLineStyle.arrowHeadSize]);\r\n\r\n\r\n\r\n                strPreTrendLine = IShapes.AddLine(\"price\", objPivot.dateA, objPivot.valueA, objPivot.dateB, objPivot.valueB, \"black\", 2, [], true);\r\n                strTrendLine = IShapes.AddLine(\"price\", objPivot.dateB, objPivot.valueB, objPivot.dateC, objPivot.valueC, \"black\", 2, [], true);\r\n\r\n                objCSPat = objTA.cspattern;\r\n                if (objCSPat != null) {\r\n                    strCSPatMarker = IShapes.AddVRange(\"price\", objCSPat.valueA, objCSPat.valueB, \"rgba(51,153,255,0.4)\", false, [2, 10, 2, 10]);\r\n                    objChartContainer.chart.Shapes.UpdateShape(\"price\", strCSPatMarker, [\"limitfromdate\", objCSPat.dateA, \"limittodate\", objCSPat.dateB, \"borderColor\", \"rgba(0,51,102,0.4)\", \"borderWidth\", 2]);\r\n                }\r\n\r\n                objSMA = objTA.sma;\r\n                objRSI = objTA.rsi;\r\n                objBBands = objTA.bbands;\r\n                objMACD = objTA.macd;\r\n\r\n\r\n                if (objSMA != null) {\r\n                    var strStudyID = objChartContainer.chart.AddStudyExtended(\"sma\", [[objSMA.parameter1]], null);\r\n                    var objStyle = objChartContainer.chart.GetStudyStyle(strStudyID);\r\n                    objStyle.stroke = \"purple\";\r\n                    objStyle.strokeWidth = 2;\r\n\r\n                    strStudyID = objChartContainer.chart.AddStudyExtended(\"sma\", [[objSMA.parameter2]], null);\r\n                    objStyle = objChartContainer.chart.GetStudyStyle(strStudyID);\r\n                    objStyle.stroke = \"red\";\r\n                    objStyle.strokeWidth = 2;\r\n\r\n                    strStudyID = objChartContainer.chart.AddStudyExtended(\"sma\", [[objSMA.parameter3]], null);\r\n                    objStyle = objChartContainer.chart.GetStudyStyle(strStudyID);\r\n                    objStyle.stroke = \"orange\";\r\n                    objStyle.strokeWidth = 2;\r\n                }\r\n\r\n\r\n                if (objRSI != null) {\r\n                    var strStudyID = objChartContainer.chart.AddStudyExtended(\"rsi\", [[objRSI.parameter1], [objRSI.parameter2]], null);\r\n                }\r\n\r\n                if (objBBands != null) {\r\n                    var strStudyID = objChartContainer.chart.AddStudyExtended(\"bbands\", [[objBBands.parameter1], [objBBands.parameter2]], null);\r\n                }\r\n\r\n                if (objMACD != null) {\r\n                    var strStudyID = objChartContainer.chart.AddStudyExtended(\"bbands\", [[objMACD.parameter1], [objMACD.parameter2], [objMACD.parameter3]], null);\r\n                }\r\n\r\n                //IChart.SetZoomOnDates(objPivot.dateB, objPivot.targetdate, 100, 40);\r\n\r\n                AddLegend(objTAConfig, objTA);\r\n            }\r\n        }\r\n\r\n        return PivotLibrary;\r\n    }\r\n);\r\n",
  "isBase64": false
}