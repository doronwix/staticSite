{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/account/UserFlowBaseViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿/* globals eUploadDocumentStatus , eUserFlowSteps, eUserStatus, eStepStatus */\r\ndefine(\r\n    'viewmodels/account/UserFlowBaseViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'StateObject!userFlow',\r\n        'helpers/KoComponentViewModel',\r\n        'initdatamanagers/Customer',\r\n        'managers/CustomerProfileManager',\r\n        'userflow/UserFlowManager'\r\n    ],\r\n    function UserFlowBaseDef(require) {\r\n        var ko = require('knockout'),\r\n            koComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            general = require('handlers/general'),\r\n            stateObjectUserFlow = require('StateObject!userFlow'),\r\n            customer = require('initdatamanagers/Customer'),\r\n            customerProfileManager = require('managers/CustomerProfileManager');\r\n\r\n        var UserFlowBaseViewModel = general.extendClass(koComponentViewModel, function UserFlowBaseClass() {\r\n            var self = this,\r\n                parent = self.parent,\r\n                data = this.Data || {},\r\n                stateObjectUnsubscribe,\r\n                userFlowStepsStatuses,\r\n                currentStep,\r\n                documentProofOfResidenceStatus,\r\n                documentProofOfIDStatus,\r\n                collapsedContentKey = 'collapsedContent';\r\n\r\n            function init() {\r\n                setDefaultObservables();\r\n                updateFromStateObject(stateObjectUserFlow.get(eStateObjectTopics.UserFlowChanged));\r\n\r\n                if (data.userStatus() === eUserStatus.Active) {\r\n                    toggleUserFlow();\r\n                }\r\n\r\n                stateObjectUnsubscribe = stateObjectUserFlow.subscribe(eStateObjectTopics.UserFlowChanged, function (model) {\r\n                    updateFromStateObject(model);\r\n                });\r\n            }\r\n\r\n            function setDefaultObservables() {\r\n                var collapsed = stateObjectUserFlow.get(collapsedContentKey);\r\n                userFlowStepsStatuses = ko.observableArray([ko.observable(), ko.observable(), ko.observable(), ko.observable(), ko.observable(), ko.observable()]);\r\n                currentStep = ko.observable();\r\n                documentProofOfResidenceStatus = ko.observable();\r\n                documentProofOfIDStatus = ko.observable();\r\n\r\n                data.userMessage = ko.observable('');\r\n                data.ctaTxt = ko.observable('');\r\n                data.cta = ko.observable(eCta.None);\r\n                data.userStatus = ko.observable();\r\n                data.generalStatusName = ko.observable('');\r\n                data.isLocked = ko.observable(false);\r\n                data.isRestricted = ko.observable(false);\r\n\r\n                data.stepStatus = stepStatus;\r\n                data.isAvailable = isAvailable;\r\n                data.isCurrent = isCurrent;\r\n                data.isHidden = isHidden;\r\n                data.isComplete = isComplete;\r\n                data.poiState = poiState;\r\n                data.generalStatusIcon = generalStatusIcon;\r\n                data.generalStatusColor = generalStatusColor;\r\n\r\n                data.userFlowToggle = ko.observable(general.isNullOrUndefined(collapsed) ? collapsed : false);\r\n                data.toggleUserFlow = toggleUserFlow;\r\n                data.stepClick = stepClick;\r\n                data.ctaClick = ctaClick;\r\n\r\n                data.tooltipIdToggle = ko.observable(false);\r\n                data.tooltipAddrToggle = ko.observable(false);\r\n                data.tooltipNumToggle = ko.observable(false);\r\n\r\n                data.daysCounter = ko.observable();\r\n                data.maxDaysCounter = ko.observable();\r\n                data.remainingDaysUpdateMsg = ko.observable('');\r\n                data.countdownCta = ko.observable('');\r\n\r\n                data.isVisible = !customer.prop.isDemo;// !Demo\r\n\r\n                data.isCDDClickable = ko.observable(true);\r\n                data.isCtaButtonEnabled = ko.observable(true);\r\n                data.ctaVisible = ko.pureComputed( function () { return data.ctaTxt() != '' && data.isCtaButtonEnabled(); });\r\n            }\r\n\r\n            function updateFromStateObject(model) {\r\n                if (!model || model.userStatus === eUserStatus.NA)\r\n                    return;\r\n\r\n                model.userFlowStepsStatuses.forEach(function (value, i) {\r\n                    userFlowStepsStatuses()[i](value);\r\n                });\r\n\r\n                data.userStatus(model.userStatus);\r\n                data.generalStatusName('flow_' + general.getKeyByValue(eUserStatus, model.userStatus));\r\n                data.isLocked(model.userStatus === eUserStatus.Locked);\r\n                data.isRestricted(model.userStatus === eUserStatus.Restricted);\r\n                data.userMessage(model.userMessage);\r\n                currentStep(model.currentStep);\r\n                data.ctaTxt(model.ctaText);\r\n                data.cta(model.cta);\r\n                documentProofOfResidenceStatus(model.documentProofOfResidenceStatus);\r\n                documentProofOfIDStatus(model.documentProofOfIDStatus);\r\n\r\n                data.maxDaysCounter(model.maxDaysCounter);\r\n                data.daysCounter(model.daysCounter);\r\n                data.remainingDaysUpdateMsg(model.remainingDaysUpdateMsg);\r\n                data.countdownCta(model.countdownCta);\r\n\r\n                data.isCDDClickable(!model.isCDDRestricted);\r\n                if (!general.isNullOrUndefined(model.isCtaButtonEnabled)) {\r\n                    data.isCtaButtonEnabled(model.isCtaButtonEnabled);\r\n                }\r\n            }\r\n\r\n            function generalStatusIcon() {\r\n                switch (data.userStatus()) {\r\n                    case eUserStatus.NotActivated:\r\n                        return 'ico-not-active redColor';\r\n\r\n                    case eUserStatus.ReadyToTrade:\r\n                    case eUserStatus.ActiveLimited:\r\n                        return 'ico-limited orangeColor';\r\n\r\n                    case eUserStatus.Active:\r\n                        return 'ico-active greenColor';\r\n\r\n                    case eUserStatus.Restricted:\r\n                        return 'ico-restricted redColor';\r\n\r\n                    case eUserStatus.Locked:\r\n                        return 'ico-locked redColor';\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n            function generalStatusColor() {\r\n                switch (data.userStatus()) {\r\n                    case eUserStatus.ReadyToTrade:\r\n                    case eUserStatus.ActiveLimited:\r\n                        return 'yellowBackground';\r\n\r\n                    case eUserStatus.Active:\r\n                        return 'greenBackground';\r\n\r\n                    case eUserStatus.Locked:\r\n                    case eUserStatus.NotActivated:\r\n                    case eUserStatus.Restricted:\r\n                        return 'redBackground';\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n            function stepStatus(stepName) {\r\n                //Class by Status of Step => flowCurrent / flowDisabled / flowError / flowRestricted / flowDone\r\n                switch (userFlowStepsStatuses()[eUserFlowSteps[stepName]]()) {\r\n                    case eStepStatus.Error:     // red x\r\n                        return 'ico-milestone-error redColor';\r\n\r\n                    case eStepStatus.Restricted: // red no entry\r\n                        return 'ico-milestone-restricted redColor';\r\n\r\n                    case eStepStatus.Available: // blue\r\n                        return 'ico-milestone blueColor';\r\n\r\n                    case eStepStatus.Complete: // green\r\n                        if (eUserFlowSteps[stepName] === 0 || eUserFlowSteps[stepName] === userFlowStepsStatuses().length - 1) {\r\n                            return 'ico-milestone-dot greenColor';\r\n                        }\r\n\r\n                        return 'ico-milestone-done greenColor';\r\n\r\n                    case eStepStatus.Seamless:\r\n                        if (eUserFlowSteps[stepName] === 0) {\r\n                            return 'ico-milestone-dot blueColor';\r\n                        }\r\n\r\n                        return 'ico-milestone grayColor';\r\n\r\n                    case eStepStatus.Hidden: //gray\r\n                    case eStepStatus.NotActive:\r\n                    default:\r\n                        if (eUserFlowSteps[stepName] === 0 || eUserFlowSteps[stepName] === userFlowStepsStatuses().length - 1) {\r\n                            return 'ico-milestone-dot grayColor';\r\n                        }\r\n\r\n                        return 'ico-milestone grayColor';\r\n                }\r\n            }\r\n\r\n            function isAvailable(stepName, skipLocked) {\r\n                if (data.userStatus() === eUserStatus.Locked && !skipLocked) {\r\n                    return false;\r\n                }\r\n\r\n                return userFlowStepsStatuses()[eUserFlowSteps[stepName]]() === eStepStatus.Available;\r\n            }\r\n\r\n            function isCurrent(stepName) {\r\n                //Case open => seamless only. \r\n                return eUserFlowSteps[stepName] === currentStep();\r\n            }\r\n\r\n            function isComplete(stepName) {\r\n                return userFlowStepsStatuses()[eUserFlowSteps[stepName]]() === eStepStatus.Complete;\r\n            }\r\n\r\n            function isHidden(stepName) {\r\n                return userFlowStepsStatuses()[eUserFlowSteps[stepName]]() === eStepStatus.Hidden;\r\n            }\r\n\r\n            function poiState(poiType) {\r\n                /*\r\n                    Blue color for status âAwaiting Signature/Not Yet Receivedâ.\r\n                    Green color + V icon â Document was uploaded by the user and approved by compliance (âApprovedâ status).\r\n                    Light Red color + ! icon â Document was uploaded by the user got âIncompleteâ status from compliance.\r\n                    Yellow color + clock icon â Document was uploaded by the user and got âprocessingâ status from compliance.\r\n                 */\r\n                var poiStatus = -1;\r\n\r\n                switch (poiType) {\r\n                    case 'id':\r\n                        poiStatus = documentProofOfIDStatus();\r\n                        break;\r\n\r\n                    case 'addr':\r\n                        poiStatus = documentProofOfResidenceStatus();\r\n                        break;\r\n\r\n                    case 'num': /*NA - TBD*/\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                switch (poiStatus) {\r\n                    case eUploadDocumentStatus.Approved:\r\n                        return 'ico-poi-' + poiType + '-done greenColor';\r\n\r\n                    case eUploadDocumentStatus.Incomplete:\r\n                        return 'ico-poi-' + poiType + '-error redColor';\r\n\r\n                    case eUploadDocumentStatus.Processing:\r\n                        return 'ico-poi-' + poiType + '-pending orangeColor';\r\n\r\n                    case eUploadDocumentStatus.AwaitingDocument:\r\n                        if (data.daysCounter() >= 0) {\r\n                            return 'ico-poi-' + poiType + '-error redColor';\r\n                        }\r\n\r\n                        if (userFlowStepsStatuses()[eUserFlowSteps['ProofOfIdentity']]() === eStepStatus.NotActive) {\r\n                            break;\r\n                        }\r\n\r\n                        return 'ico-poi-' + poiType + ' blueColor';\r\n\r\n                    case eUploadDocumentStatus.AwaitingSignature:\r\n                        return 'ico-poi-' + poiType + ' blueColor';\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                return 'ico-poi-' + poiType + ' grayColor';\r\n            }\r\n\r\n            function toggleUserFlow() {\r\n                var newValue = !data.userFlowToggle(),\r\n                    profileCustomer = customerProfileManager.ProfileCustomer(),\r\n                    toggleOnLogin = general.isNullOrUndefined(stateObjectUserFlow.get(collapsedContentKey));\r\n\r\n                if (data.userStatus() === eUserStatus.Active && (profileCustomer.activeFirstLogin !== -1) && toggleOnLogin) {\r\n                    newValue = !newValue;\r\n                }\r\n\r\n                data.userFlowToggle(newValue);\r\n                stateObjectUserFlow.update(collapsedContentKey, data.userStatus() === eUserStatus.Active ? !newValue : newValue);\r\n\r\n                if (data.userFlowToggle() === false) {\r\n                    ko.postbox.publish('hub-map-expand');\r\n                }\r\n                else {\r\n                    ko.postbox.publish('hub-map-collapse');\r\n                }\r\n            }\r\n\r\n            function stepClick() { } //Abstract\r\n\r\n            function ctaClick() { } //Abstract\r\n\r\n            function dispose() {\r\n                if (stateObjectUnsubscribe) {\r\n                    stateObjectUnsubscribe();\r\n                }\r\n\r\n                parent.dispose.call(self); // inherited from KoComponentViewModel\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                data: data\r\n            };\r\n        });\r\n\r\n        return UserFlowBaseViewModel;\r\n    }\r\n);\r\n",
  "isBase64": false
}