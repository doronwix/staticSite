{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/FxNet/LogicLayer/EconomicCalendar/EconomicCalendarConnManager.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'FxNet/LogicLayer/EconomicCalendar/EconomicCalendarConnManager',\r\n    [\r\n        'Q',\r\n        'configuration/initconfiguration',\r\n        'FxNet/LogicLayer/GeneralManager/TradingInfoConnManager',\r\n        'StateObject!EconomicCalendarConnManager',\r\n        'handlers/general'\r\n    ],\r\n    function EconomicCalendarConnManager(Q, config, tradingInfoConnManager, stateObject, general) {\r\n        var economicCalendarConfig = config.EconomicCalendarConfiguration,\r\n            hubname = economicCalendarConfig.hubname,\r\n            clientMessageReceivedCallbacks = {}, //dictionary, the key is view name\r\n            subscribeGroups = {}; //dictionary, the key is groupId\r\n\r\n        function messageReceivedCallback(message, groupId, mode) {\r\n            if (subscribeGroups[groupId]) {\r\n                var clientViewNameOfGroup = subscribeGroups[groupId].name;\r\n                var clientMessageCallback = clientMessageReceivedCallbacks[clientViewNameOfGroup];\r\n\r\n                subscribeGroups[groupId].done = true;\r\n\r\n                if (typeof clientMessageCallback === 'function') {\r\n                    clientMessageCallback(message, mode);\r\n                }\r\n            }\r\n        }\r\n\r\n        function setMessageReceivedCallback(clientName, callback) {\r\n            clientMessageReceivedCallbacks[clientName] = callback;\r\n        }\r\n\r\n        function reSubscribe() {\r\n            for (var groupId in subscribeGroups) {\r\n                if (subscribeGroups.hasOwnProperty(groupId)) {\r\n                    subscribeGroups[groupId].done = false;\r\n                    tradingInfoConnManager.SubscribeByGroup(hubname, subscribeGroups[groupId].args, groupId);\r\n                }\r\n            }\r\n        }\r\n\r\n        function serviceAvailableCallback(stateAvalilableValue) {\r\n            var serviceAvailablilityPreviousStatus = stateObject.get('IsServiceAvailable'),\r\n                serviceAvailablilityCurrentStatus = !!stateAvalilableValue;\r\n\r\n            stateObject.update('IsServiceAvailable', serviceAvailablilityCurrentStatus);\r\n\r\n            if (!serviceAvailablilityPreviousStatus && serviceAvailablilityCurrentStatus) {\r\n                reSubscribe();\r\n            }\r\n        }\r\n\r\n        function subscribe(clientName, args) {\r\n            args = args || {};\r\n\r\n            var groupid = general.createGuid();\r\n\r\n            subscribeGroups[groupid] = { name: clientName, args: args, done: false };\r\n\r\n            tradingInfoConnManager.SubscribeByGroup(hubname, args, groupid);\r\n\r\n            return groupid;\r\n        }\r\n\r\n        function unsubscribe(groupid) {\r\n            delete subscribeGroups[groupid];\r\n\r\n            tradingInfoConnManager.Unsubscribe(hubname, groupid);\r\n        }\r\n\r\n        function dispose() {\r\n            stateObject.unset('IsServiceAvailable');\r\n            tradingInfoConnManager.Dispose();\r\n        }\r\n\r\n        function init() {\r\n            stateObject.set('IsServiceAvailable', false);\r\n            tradingInfoConnManager.UpdateCallbacks(hubname, messageReceivedCallback, serviceAvailableCallback);\r\n        }\r\n\r\n        function whenAvailable() {\r\n            var defer = Q.defer(),\r\n                unsubscribeFromStateObject;\r\n\r\n            var isAvailable = stateObject.get('IsServiceAvailable');\r\n\r\n            if (isAvailable) {\r\n                defer.resolve(true);\r\n            }\r\n            else {\r\n                unsubscribeFromStateObject = stateObject.subscribe('IsServiceAvailable', function (status) {\r\n                    unsubscribeFromStateObject();\r\n\r\n                    if (status) {\r\n                        defer.resolve(true);\r\n                    }\r\n                    else {\r\n                        defer.resolve(false);\r\n                    }\r\n                });\r\n            }\r\n\r\n            return defer.promise;\r\n        }\r\n\r\n        init();\r\n\r\n        return {\r\n            Init: init,\r\n            WhenAvailable: whenAvailable,\r\n            SetMessageReceivedCallback: setMessageReceivedCallback,\r\n            Subscribe: subscribe,\r\n            Unsubscribe: unsubscribe,\r\n            Dispose: dispose\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}