{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/BaseSearchCountryViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/BaseSearchCountryViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'Dictionary',\r\n        'modules/systeminfo',\r\n        'vendor/latinize'\r\n    ],\r\n    function BaseSearchCountryDef(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            Dictionary = require('Dictionary'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            systemInfo = require('modules/systeminfo'),\r\n            latinize = require('vendor/latinize');\r\n\r\n        var BaseSearchCountryViewModel = general.extendClass(KoComponentViewModel, function BaseSearchCountryClass(params) {\r\n            var self = this,\r\n                parent = self.parent,\r\n                data = parent.Data; // inherited from KoComponentViewModel\r\n\r\n            function init() {\r\n                if (validateParams() === false) {\r\n                    throw new Error('Params is empty');\r\n                }\r\n\r\n                setObservables();\r\n                setSubscribers();\r\n                setCountryTranslations();\r\n                sort();\r\n                setSelectedCountry(getCountryId());\r\n            }\r\n\r\n            function setSubscribers() {\r\n                data.selectedCountry.subscribe(function (country) {\r\n                    setParamCountry(country);\r\n                });\r\n            }\r\n\r\n            function validateParams() {\r\n                return (params && params.countries &&\r\n                    (!general.isEmptyValue(params.countries)) &&\r\n                    (!general.isEmptyValue(params.countryId) ||\r\n                        !general.isEmptyValue(params.country))\r\n                );\r\n            }\r\n\r\n            function getCountryId() {\r\n                var id = null;\r\n\r\n                if (general.isFunctionType(params.country) && !general.isEmptyValue(params.country().id)) {\r\n                    id = params.country().id;\r\n                }\r\n                else if (general.isFunctionType(params.countryId) && !general.isEmptyValue(params.countryId())) {\r\n                    id = params.countryId();\r\n                }\r\n\r\n                return id;\r\n            }\r\n\r\n            function mapParamCountries(paramCountries) {\r\n                var countries = [];\r\n                var uiExclusionCountries = systemInfo.get('uiExclusionCountries') || [];\r\n\r\n                if ((general.isArrayType(paramCountries))) {\r\n                    countries = paramCountries.slice();\r\n                }\r\n                else {\r\n                    var countryIds = Object.keys(paramCountries);\r\n\r\n                    countryIds.forEach(function (id) {\r\n                        countries.push({\r\n                            id: id\r\n                        });\r\n                    });\r\n                }\r\n\r\n                return countries.filter(function (country) {\r\n                    return !Object.keys(uiExclusionCountries).find(function (excludedCountryId) {\r\n                        return excludedCountryId == country.id\r\n                    });\r\n                });\r\n            }\r\n\r\n            function setParamCountry(selectedCountry) {\r\n                if (general.isFunctionType(params.country)) {\r\n                    params.country(selectedCountry);\r\n                }\r\n\r\n                if (general.isFunctionType(params.countryId)) {\r\n                    params.countryId(selectedCountry.id);\r\n                }\r\n\r\n                if (general.isFunctionType(params.onClick)) {\r\n                    params.onClick();\r\n                }\r\n            }\r\n\r\n            function setCountryTranslations() {\r\n                var countriesMapped = mapParamCountries(general.isFunctionType(params.countries) ? params.countries() : params.countries);\r\n                var countries = getCountryTranslations(countriesMapped);\r\n\r\n                data.countries(countries);\r\n            }\r\n\r\n            function setSelectedCountry(countryId) {\r\n                var countryFound = data.countries().find(function (country) {\r\n                    return parseInt(country.id) === parseInt(countryId);\r\n                });\r\n\r\n                data.selectedCountry(countryFound || data.countries()[0]);\r\n            }\r\n\r\n            function setObservables() {\r\n                data.countries = ko.observableArray();\r\n                data.selectedCountry = ko.observable();\r\n            }\r\n\r\n            function getCountryTranslations(paramCountries) {\r\n                var countries = [];\r\n\r\n                if (!paramCountries) {\r\n                    return countries;\r\n                }\r\n\r\n                paramCountries.forEach(function (elem) {\r\n                    var text = Dictionary.GetItem('cntr_' + elem.id, 'country_names');\r\n                    countries.push(Object.assign({}, elem, {\r\n                        text: text,\r\n                        label: text,\r\n                        fullText: latinize(text)\r\n                    }));\r\n                });\r\n\r\n                return countries;\r\n            }\r\n\r\n            function sort() {\r\n                if (!data.countries) {\r\n                    return;\r\n                }\r\n\r\n                data.countries.sort(function (l, r) {\r\n                    return l.text.localeCompare(r.text);\r\n                });\r\n            }\r\n\r\n            function setCountry($data) {\r\n                data.selectedCountry($data);\r\n            }\r\n\r\n            return {\r\n                Init: init,\r\n                SetCountry: setCountry,\r\n                Data: data\r\n            };\r\n        });\r\n\r\n        return BaseSearchCountryViewModel;\r\n    }\r\n);\r\n",
  "isBase64": false
}