{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/uilayerhelpers/CustomKOBindings/SpinnerFieldBinding.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'helpers/CustomKOBindings/SpinnerFieldBinding',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'jquery',\r\n        'devicewidgets/spinner'\r\n\r\n    ],\r\n    function SpinnerFieldBinding(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            $ = require('jquery');\r\n\r\n        ko.bindingHandlers.closingLimitSpinner = {\r\n            init: function (element, valueAccessor, allBindingsAccessor) {\r\n                var options = allBindingsAccessor().spinnerOptions || {},\r\n                    $spinner,\r\n                    btnId,\r\n                    target = valueAccessor(),\r\n                    startSpinFromObservable = allBindingsAccessor().spinnerOptions.startSpinFrom,\r\n                    $increment,\r\n                    $decrement,\r\n                    subscriber,\r\n                    minSubscriber,\r\n                    maxSubscriber,\r\n                    startSpinFromSubscriber;\r\n\r\n                if (!options.input) {\r\n                    $spinner = $(element);\r\n                } else if (options.input.indexOf('#') === 0) {\r\n                    $spinner = $(options.input);\r\n                } else {\r\n                    $spinner = $(element).find(options.input);\r\n                }\r\n\r\n                if (!$spinner.length) {\r\n                    return;\r\n                }\r\n\r\n                btnId = $spinner.attr(\"id\") || $spinner.attr(\"name\") || \"\";\r\n\r\n                var handleDecrementButton = function () {\r\n                    if (!$decrement) {\r\n                        return;\r\n                    }\r\n\r\n                    var startSpinFrom = allBindingsAccessor().spinnerOptions.startSpinFrom();\r\n                    var targetValue = parseFloat(target());\r\n\r\n                    if (target() === \"NA\" && startSpinFrom === eStartSpinFrom.Above) {\r\n                        $decrement.toggleClass(\"active\", false);\r\n                        return;\r\n                    }\r\n\r\n                    if (isNaN(targetValue) && startSpinFrom === eStartSpinFrom.Below) {\r\n                        $decrement.toggleClass(\"active\", true);\r\n                        return;\r\n                    }\r\n\r\n                    var value = Number(target()),\r\n                        minValue = allBindingsAccessor().spinnerOptions.min();\r\n\r\n                    if (value <= minValue) {\r\n                        $decrement.toggleClass(\"active\", false);\r\n                    } else {\r\n                        $decrement.toggleClass(\"active\", true);\r\n                    }\r\n                };\r\n\r\n                var handleIncrementButton = function () {\r\n                    if (!$increment) {\r\n                        return;\r\n                    }\r\n\r\n                    var startSpinFrom = allBindingsAccessor().spinnerOptions.startSpinFrom();\r\n                    var targetValue = parseFloat(target());\r\n                    if (isNaN(targetValue) && startSpinFrom === eStartSpinFrom.Below) {\r\n                        $increment.toggleClass(\"active\", false);\r\n                        return;\r\n                    }\r\n\r\n                    var value = Number(target()),\r\n                        maxValue = allBindingsAccessor().spinnerOptions.max();\r\n\r\n                    if (value >= maxValue) {\r\n                        $increment.toggleClass(\"active\", false);\r\n                    } else {\r\n                        $increment.toggleClass(\"active\", true);\r\n                    }\r\n                };\r\n\r\n                var handleButtons = function () {\r\n                    handleIncrementButton();\r\n                    handleDecrementButton();\r\n                };\r\n\r\n                $spinner.fxspinner({\r\n                    step: ko.toJS(options.step),\r\n                    page: ko.toJS(options.page),\r\n                    numberFormat: ko.toJS(options.numberFormat),\r\n                    culture: ko.toJS(options.culture),\r\n                    incremental: true,\r\n                    create: function () {\r\n                        var minObservable = allBindingsAccessor().spinnerOptions.min,\r\n                            maxObservable = allBindingsAccessor().spinnerOptions.max;\r\n\r\n                        $increment = $(element).find(\".ui-spinner-button.ui-spinner-up\");\r\n                        if ($increment.length) {\r\n                            $increment.addClass(\"increment active\");\r\n                            if (btnId) {\r\n                                $increment.attr(\"id\", btnId.concat(\"BtnIncrement\"));\r\n                            }\r\n                        }\r\n\r\n                        $decrement = $(element).find(\".ui-spinner-button.ui-spinner-down\");\r\n                        if ($decrement.length) {\r\n                            $decrement.addClass(\"decrement active\");\r\n                            if (btnId) {\r\n                                $decrement.attr(\"id\", btnId.concat(\"BtnDecrement\"));\r\n                            }\r\n                        }\r\n\r\n                        handleButtons();\r\n\r\n                        subscriber = target.subscribe(function () {\r\n                            handleButtons();\r\n                        });\r\n\r\n                        minSubscriber = minObservable.subscribe(handleDecrementButton);\r\n                        maxSubscriber = maxObservable.subscribe(handleIncrementButton);\r\n                        startSpinFromSubscriber = startSpinFromObservable.subscribe(handleButtons);\r\n                    },\r\n                    spin: function (e, ui) {\r\n                        if (general.isNullOrUndefined($spinner)) {\r\n                            return false;\r\n                        }\r\n\r\n                        e.preventDefault();\r\n\r\n                        var value = $spinner.fxspinner(\"value\"),\r\n                            minValue = allBindingsAccessor().spinnerOptions.min(),\r\n                            maxValue = allBindingsAccessor().spinnerOptions.max(),\r\n                            startSpinFrom = allBindingsAccessor().spinnerOptions.startSpinFrom(),\r\n                            direction = ui.value > value ? \"up\" : \"down\";\r\n\r\n                        var targetValue = parseFloat(target());\r\n\r\n                        if (startSpinFrom === eStartSpinFrom.None) {\r\n                            target('');\r\n                            return false;\r\n                        }\r\n\r\n                        if (isNaN(targetValue) && startSpinFrom === eStartSpinFrom.Below) {\r\n                            target(maxValue);\r\n                            $spinner.fxspinner(\"value\", maxValue);\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        if (isNaN(targetValue) && startSpinFrom === eStartSpinFrom.Above) {\r\n                            target(minValue);\r\n                            $spinner.fxspinner(\"value\", minValue);\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        if (direction === \"up\" && ui.value < minValue) {\r\n                            target(minValue);\r\n                            $spinner.fxspinner(\"value\", minValue);\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        if (direction === \"down\" && ui.value > maxValue) {\r\n                            target(maxValue);\r\n                            $spinner.fxspinner(\"value\", maxValue);\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        if (typeof target.isIncremental === \"function\" && target.isIncremental()) {\r\n                            // handle observables extended with incremental custom extender\r\n                            var newValue;\r\n\r\n                            if (direction === \"up\") {\r\n                                newValue = target.increment(true);\r\n                            }\r\n\r\n                            if (direction === \"down\") {\r\n                                newValue = target.decrement(true);\r\n                            }\r\n\r\n                            if (!isNaN(newValue) && newValue < minValue) {\r\n                                newValue = minValue;\r\n                            }\r\n\r\n                            if (!isNaN(newValue) && newValue > maxValue) {\r\n                                newValue = maxValue;\r\n                            }\r\n\r\n                            if (!isNaN(newValue) && newValue >= minValue && newValue <= maxValue) {\r\n                                target(newValue);\r\n                                $spinner.fxspinner(\"value\", newValue);\r\n                            }\r\n                        } else if (ui.value >= minValue && ui.value <= maxValue) {\r\n                            if (value != ui.value) {\r\n                                // update only when the value has been changed\r\n                                target(ui.value);\r\n                                $spinner.fxspinner(\"value\", ui.value);\r\n                            }\r\n                        }\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                //handle disposal (if KO removes by the template binding)\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                    if (subscriber) {\r\n                        subscriber.dispose();\r\n                    }\r\n\r\n                    if (minSubscriber) {\r\n                        minSubscriber.dispose();\r\n                    }\r\n\r\n                    if (maxSubscriber) {\r\n                        maxSubscriber.dispose();\r\n                    }\r\n\r\n                    if (startSpinFromSubscriber) {\r\n                        startSpinFromSubscriber.dispose();\r\n                    }\r\n\r\n                    if (!general.isNullOrUndefined($spinner) && $spinner.length) {\r\n                        $spinner.fxspinner(\"destroy\");\r\n                        $spinner = null;\r\n                    }\r\n\r\n                    $decrement = null;\r\n                    $increment = null;\r\n                });\r\n            },\r\n            update: function (element, valueAccessor, allBindingsAccessor) {\r\n                var options = ko.toJS(allBindingsAccessor().spinnerOptions) || {},\r\n                    $spinner;\r\n\r\n                if (!options.input) {\r\n                    $spinner = $(element);\r\n                } else if (options.input.indexOf('#') === 0) {\r\n                    $spinner = $(options.input);\r\n                } else {\r\n                    $spinner = $(element).find(options.input);\r\n                }\r\n\r\n                if (!$spinner.length) {\r\n                    return;\r\n                }\r\n\r\n                var delta = {},\r\n                    currentStep = $spinner.fxspinner(\"option\", \"step\"),\r\n                    currentFormat = $spinner.fxspinner(\"option\", \"numberFormat\"),\r\n                    changeOptions = false;\r\n\r\n                if (currentStep != options.step) {\r\n                    changeOptions = true;\r\n                    delta.step = options.step;\r\n                }\r\n\r\n                if (currentFormat != options.numberFormat) {\r\n                    changeOptions = true;\r\n                    delta.numberFormat = options.numberFormat;\r\n                }\r\n\r\n                if (changeOptions) {\r\n                    $spinner.fxspinner(\"option\", delta);\r\n                }\r\n            }\r\n        };\r\n\r\n        ko.bindingHandlers.openLimitSpinner = {\r\n            init: function (element, valueAccessor, allBindingsAccessor) {\r\n                var options = allBindingsAccessor().spinnerOptions || {},\r\n                    $spinner = options.input.indexOf(\"#\") === 0 ? $(options.input) : $(element).find(options.input),\r\n                    btnId = $spinner.attr(\"id\"),\r\n                    target = valueAccessor(),\r\n                    $increment,\r\n                    $decrement,\r\n                    subscriber,\r\n                    min1Subscriber,\r\n                    max2Subscriber;\r\n\r\n                if (!$spinner.length) {\r\n                    return;\r\n                }\r\n\r\n                var handleDecrementButton = function () {\r\n                    if (!$decrement) {\r\n                        return;\r\n                    }\r\n\r\n                    var targetValue = parseFloat(target());\r\n\r\n                    if (isNaN(targetValue)) {\r\n                        $decrement.toggleClass(\"active\", true);\r\n                        return;\r\n                    }\r\n\r\n                    var value = Number(target()),\r\n                        minValue = allBindingsAccessor().spinnerOptions.min1();\r\n\r\n                    if (value <= minValue) {\r\n                        $decrement.toggleClass(\"active\", false);\r\n                    } else {\r\n                        $decrement.toggleClass(\"active\", true);\r\n                    }\r\n                };\r\n\r\n                var handleIncrementButton = function () {\r\n                    if (!$increment) {\r\n                        return;\r\n                    }\r\n\r\n                    var value = Number(target()),\r\n                        maxValue = allBindingsAccessor().spinnerOptions.max2();\r\n\r\n                    if (value >= maxValue) {\r\n                        $increment.toggleClass(\"active\", false);\r\n                    } else {\r\n                        $increment.toggleClass(\"active\", true);\r\n                    }\r\n                };\r\n\r\n                $spinner.fxspinner({\r\n                    step: ko.toJS(options.step),\r\n                    page: ko.toJS(options.page),\r\n                    numberFormat: ko.toJS(options.numberFormat),\r\n                    incremental: true,\r\n                    culture: ko.toJS(options.culture),\r\n                    create: function () {\r\n                        var min1Observable = allBindingsAccessor().spinnerOptions.min1,\r\n                            max2Observable = allBindingsAccessor().spinnerOptions.max2;\r\n\r\n                        $increment = $(element).find(\".ui-spinner-button.ui-spinner-up\");\r\n                        if ($increment.length) {\r\n                            $increment.addClass(\"increment active\");\r\n                            $increment.attr(\"id\", btnId.concat(\"BtnIncrement\"));\r\n                        }\r\n\r\n                        $decrement = $(element).find(\".ui-spinner-button.ui-spinner-down\");\r\n                        if ($decrement.length) {\r\n                            $decrement.addClass(\"decrement active\");\r\n                            $decrement.attr(\"id\", btnId.concat(\"BtnDecrement\"));\r\n                        }\r\n\r\n                        subscriber = target.subscribe(function () {\r\n                            handleIncrementButton();\r\n                            handleDecrementButton();\r\n                        });\r\n\r\n                        min1Subscriber = min1Observable.subscribe(handleDecrementButton);\r\n                        max2Subscriber = max2Observable.subscribe(handleIncrementButton);\r\n                    },\r\n                    spin: function (e, ui) {\r\n\r\n                        if (general.isNullOrUndefined($spinner)) {\r\n                            return false;\r\n                        }\r\n\r\n                        e.preventDefault();\r\n                        var value = $spinner.fxspinner(\"value\"),\r\n                            allBindings = allBindingsAccessor(),\r\n                            minValue1 = allBindings.spinnerOptions.min1(),\r\n                            maxValue1 = allBindings.spinnerOptions.max1(),\r\n                            minValue2 = allBindings.spinnerOptions.min2(),\r\n                            maxValue2 = allBindings.spinnerOptions.max2(),\r\n                            direction = ui.value > value ? \"up\" : \"down\",\r\n                            targetValue = parseFloat(target());\r\n\r\n                        if (direction === \"up\" && (isNaN(targetValue) || ui.value < minValue1)) {\r\n                            target(minValue2);\r\n                            $spinner.fxspinner(\"value\", minValue2);\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        if (direction === \"up\" && ui.value > maxValue1 && ui.value < minValue2) {\r\n                            target(minValue2);\r\n                            $spinner.fxspinner(\"value\", minValue2);\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        if (direction === \"down\" && (isNaN(targetValue) || ui.value > maxValue2)) {\r\n                            target(maxValue1);\r\n                            $spinner.fxspinner(\"value\", maxValue1);\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        if (direction === \"down\" && ui.value > maxValue1 && ui.value < minValue2) {\r\n                            target(maxValue1);\r\n                            $spinner.fxspinner(\"value\", maxValue1);\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        if (ui.value >= minValue1 && ui.value <= maxValue2) {\r\n                            if (value != ui.value) {\r\n                                // update only when the value has been changed\r\n                                target(ui.value);\r\n                                $spinner.fxspinner(\"value\", ui.value);\r\n                            }\r\n                        }\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                //handle disposal (if KO removes by the template binding)\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                    if (subscriber) {\r\n                        subscriber.dispose();\r\n                    }\r\n\r\n                    if (min1Subscriber) {\r\n                        min1Subscriber.dispose();\r\n                    }\r\n\r\n                    if (max2Subscriber) {\r\n                        max2Subscriber.dispose();\r\n                    }\r\n\r\n                    if (!general.isNullOrUndefined($spinner) && $spinner.length) {\r\n                        $spinner.fxspinner(\"destroy\");\r\n                        $spinner = null;\r\n                    }\r\n\r\n                    $decrement = null;\r\n                    $increment = null;\r\n                });\r\n            },\r\n            update: function (element, valueAccessor, allBindingsAccessor) {\r\n                var options = ko.toJS(allBindingsAccessor().spinnerOptions) || {},\r\n                    $spinner;\r\n\r\n                if (!options.input) {\r\n                    $spinner = $(element);\r\n                } else if (options.input.indexOf('#') === 0) {\r\n                    $spinner = $(options.input);\r\n                } else {\r\n                    $spinner = $(element).find(options.input);\r\n                }\r\n\r\n                if (!$spinner.length) {\r\n                    return;\r\n                }\r\n\r\n                var delta = {},\r\n                    currentStep = $spinner.fxspinner(\"option\", \"step\"),\r\n                    currentFormat = $spinner.fxspinner(\"option\", \"numberFormat\"),\r\n                    changeOptions = false;\r\n\r\n                if (currentStep != options.step) {\r\n                    changeOptions = true;\r\n                    delta.step = options.step;\r\n                }\r\n\r\n                if (currentFormat != options.numberFormat) {\r\n                    changeOptions = true;\r\n                    delta.numberFormat = options.numberFormat;\r\n                }\r\n\r\n                if (changeOptions) {\r\n                    $spinner.fxspinner(\"option\", delta);\r\n                }\r\n            }\r\n        };\r\n\r\n        ko.bindingHandlers.amountSpinner = {\r\n            init: function (element, valueAccessor, allBindingsAccessor) {\r\n                var options = allBindingsAccessor().spinnerOptions || {},\r\n                    $spinner,\r\n                    btnId,\r\n                    target = valueAccessor(),\r\n                    startSpinFromObservable = allBindingsAccessor().spinnerOptions.startSpinFrom,\r\n                    $increment,\r\n                    $decrement,\r\n                    subscriber,\r\n                    minSubscriber,\r\n                    maxSubscriber,\r\n                    startSpinFromSubscriber;\r\n\r\n                if (!options.input) {\r\n                    $spinner = $(element);\r\n                } else if (options.input.indexOf('#') === 0) {\r\n                    $spinner = $(options.input);\r\n                } else {\r\n                    $spinner = $(element).find(options.input);\r\n                }\r\n\r\n                if (!$spinner.length) {\r\n                    return;\r\n                }\r\n\r\n                btnId = $spinner.attr(\"id\") || $spinner.attr(\"name\") || \"\";\r\n\r\n                var handleDecrementButton = function () {\r\n                    if (!$decrement) {\r\n                        return;\r\n                    }\r\n\r\n                    var startSpinFrom = allBindingsAccessor().spinnerOptions.startSpinFrom();\r\n                    var targetValue = parseFloat(target());\r\n\r\n                    if (target() === \"NA\" && startSpinFrom === eStartSpinFrom.Above) {\r\n                        $decrement.toggleClass(\"active\", false);\r\n                        return;\r\n                    }\r\n\r\n                    if (isNaN(targetValue) && startSpinFrom === eStartSpinFrom.Below) {\r\n                        $decrement.toggleClass(\"active\", true);\r\n                        return;\r\n                    }\r\n\r\n                    var value = Number(target()),\r\n                        minValue = allBindingsAccessor().spinnerOptions.min();\r\n\r\n                    if (value <= minValue) {\r\n                        $decrement.toggleClass(\"active\", false);\r\n                    } else {\r\n                        $decrement.toggleClass(\"active\", true);\r\n                    }\r\n                };\r\n\r\n                var handleIncrementButton = function () {\r\n                    if (!$increment) {\r\n                        return;\r\n                    }\r\n\r\n                    var startSpinFrom = allBindingsAccessor().spinnerOptions.startSpinFrom();\r\n                    var targetValue = parseFloat(target());\r\n                    if (isNaN(targetValue) && startSpinFrom === eStartSpinFrom.Below) {\r\n                        $increment.toggleClass(\"active\", false);\r\n                        return;\r\n                    }\r\n\r\n                    var value = Number(target()),\r\n                        maxValue = allBindingsAccessor().spinnerOptions.max();\r\n\r\n                    if (value >= maxValue) {\r\n                        $increment.toggleClass(\"active\", false);\r\n                    } else {\r\n                        $increment.toggleClass(\"active\", true);\r\n                    }\r\n                };\r\n\r\n                var handleButtons = function () {\r\n                    handleIncrementButton();\r\n                    handleDecrementButton();\r\n                };\r\n\r\n                $spinner.fxspinner({\r\n                    step: ko.toJS(options.step),\r\n                    page: ko.toJS(options.page),\r\n                    numberFormat: ko.toJS(options.numberFormat),\r\n                    incremental: true,\r\n                    create: function () {\r\n                        var minObservable = allBindingsAccessor().spinnerOptions.min,\r\n                            maxObservable = allBindingsAccessor().spinnerOptions.max;\r\n\r\n                        $increment = $(element).find(\".ui-spinner-button.ui-spinner-up\");\r\n                        if ($increment.length) {\r\n                            $increment.addClass(\"increment active\");\r\n                            if (btnId) {\r\n                                $increment.attr(\"id\", btnId.concat(\"BtnIncrement\"));\r\n                            }\r\n                        }\r\n\r\n                        $decrement = $(element).find(\".ui-spinner-button.ui-spinner-down\");\r\n                        if ($decrement.length) {\r\n                            $decrement.addClass(\"decrement active\");\r\n                            if (btnId) {\r\n                                $decrement.attr(\"id\", btnId.concat(\"BtnDecrement\"));\r\n                            }\r\n                        }\r\n\r\n                        handleButtons();\r\n\r\n                        subscriber = target.subscribe(function () {\r\n                            handleButtons();\r\n                        });\r\n\r\n                        minSubscriber = minObservable.subscribe(handleDecrementButton);\r\n                        maxSubscriber = maxObservable.subscribe(handleIncrementButton);\r\n                        startSpinFromSubscriber = startSpinFromObservable.subscribe(handleButtons);\r\n                    },\r\n                    spin: function (e, ui) {\r\n\r\n                        if (general.isNullOrUndefined($spinner)) {\r\n                            return false;\r\n                        }\r\n                        e.preventDefault();\r\n\r\n                        var value = $spinner.fxspinner(\"value\"),\r\n                            minValue = allBindingsAccessor().spinnerOptions.min(),\r\n                            maxValue = allBindingsAccessor().spinnerOptions.max(),\r\n                            startSpinFrom = allBindingsAccessor().spinnerOptions.startSpinFrom(),\r\n                            direction = ui.value > value ? \"up\" : \"down\";\r\n\r\n                        var targetValue = parseFloat(target());\r\n                        if (isNaN(targetValue) && startSpinFrom === eStartSpinFrom.Below) {\r\n                            target(maxValue);\r\n                            $spinner.fxspinner(\"value\", maxValue);\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        if (isNaN(targetValue) && startSpinFrom === eStartSpinFrom.Above) {\r\n                            target(minValue);\r\n                            $spinner.fxspinner(\"value\", minValue);\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        if (direction === \"up\" && ui.value < minValue) {\r\n                            target(minValue);\r\n                            $spinner.fxspinner(\"value\", minValue);\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        if (direction === \"down\" && ui.value > maxValue) {\r\n                            target(maxValue);\r\n                            $spinner.fxspinner(\"value\", maxValue);\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        if (typeof target.isIncremental === \"function\" && target.isIncremental()) {\r\n                            // handle observables extended with incremental custom extender\r\n                            var newValue;\r\n\r\n                            if (direction === \"up\") {\r\n                                newValue = target.increment(true);\r\n                            }\r\n\r\n                            if (direction === \"down\") {\r\n                                newValue = target.decrement(true);\r\n                            }\r\n\r\n                            if (!isNaN(newValue) && newValue < minValue) {\r\n                                newValue = minValue;\r\n                            }\r\n\r\n                            if (!isNaN(newValue) && newValue > maxValue) {\r\n                                newValue = maxValue;\r\n                            }\r\n\r\n                            if (!isNaN(newValue) && newValue >= minValue && newValue <= maxValue) {\r\n                                target(newValue);\r\n                                $spinner.fxspinner(\"value\", newValue);\r\n                            }\r\n                        } else if (ui.value >= minValue && ui.value <= maxValue) {\r\n                            if (value != ui.value) {\r\n                                // update only when the value has been changed\r\n                                target(ui.value);\r\n                                $spinner.fxspinner(\"value\", ui.value);\r\n                            }\r\n                        }\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                //handle disposal (if KO removes by the template binding)\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                    if (subscriber) {\r\n                        subscriber.dispose();\r\n                    }\r\n\r\n                    if (minSubscriber) {\r\n                        minSubscriber.dispose();\r\n                    }\r\n\r\n                    if (maxSubscriber) {\r\n                        maxSubscriber.dispose();\r\n                    }\r\n\r\n                    if (startSpinFromSubscriber) {\r\n                        startSpinFromSubscriber.dispose();\r\n                    }\r\n\r\n                    if (!general.isNullOrUndefined($spinner) && $spinner.length) {\r\n                        $spinner.fxspinner(\"destroy\");\r\n                        $spinner = null;\r\n                    }\r\n\r\n                    $decrement = null;\r\n                    $increment = null;\r\n                });\r\n            },\r\n            update: function (element, valueAccessor, allBindingsAccessor) {\r\n                var rawValue = ko.utils.unwrapObservable(valueAccessor()),\r\n                    value = general.isStringType(rawValue) && rawValue !== \"\"\r\n                        ? Globalize.parseFloat(rawValue)\r\n                        : rawValue;\r\n\r\n                var options = ko.toJS(allBindingsAccessor().spinnerOptions) || {},\r\n                    $spinner;\r\n\r\n                if (!options.input) {\r\n                    $spinner = $(element);\r\n                } else if (options.input.indexOf('#') === 0) {\r\n                    $spinner = $(options.input);\r\n                } else {\r\n                    $spinner = $(element).find(options.input);\r\n                }\r\n\r\n                if (!$spinner.length) {\r\n                    return;\r\n                }\r\n\r\n                var delta = {},\r\n                    currentStep = $spinner.fxspinner(\"option\", \"step\"),\r\n                    currentFormat = $spinner.fxspinner(\"option\", \"numberFormat\"),\r\n                    changeOptions = false;\r\n\r\n                if (currentStep != options.step) {\r\n                    changeOptions = true;\r\n                    delta.step = options.step;\r\n                }\r\n\r\n                if (currentFormat != options.numberFormat) {\r\n                    changeOptions = true;\r\n                    delta.numberFormat = options.numberFormat;\r\n                }\r\n\r\n                if (changeOptions) {\r\n                    $spinner.fxspinner(\"option\", delta);\r\n                }\r\n\r\n                // update value\r\n                if (!general.isEmptyValue(value)) {\r\n                    var spinnerNumberFormat = $spinner.fxspinner(\"option\", \"numberFormat\"),\r\n                        currentValue = $spinner.val(),\r\n                        formattedValue = Globalize.format(value, spinnerNumberFormat);\r\n\r\n                    if (currentValue !== formattedValue && $spinner.get(0) !== document.activeElement) {\r\n                        clearTimeout($spinner.updateValueTimer);\r\n\r\n                        $spinner.updateValueTimer = setTimeout(function ($field, valueToSet) {\r\n                            var instance = $field.fxspinner(\"instance\");\r\n                            if (!instance) {\r\n                                return;\r\n                            }\r\n\r\n                            $field.fxspinner(\"value\", valueToSet);\r\n                            if (isNaN(parseFloat(valueToSet))) {\r\n                                $field.val('');\r\n                            }\r\n                            else {\r\n                                $field.val(valueToSet);\r\n                            }\r\n                            if ($field.is(\":focus\")) {\r\n                                $field.trigger(\"blur\");\r\n                            }\r\n\r\n                        }, 10, $spinner, formattedValue);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        ko.bindingHandlers.lowMarginSpinner = {\r\n            init: function (element, valueAccessor, allBindingsAccessor) {\r\n                var options = allBindingsAccessor().spinnerOptions || {},\r\n                    $spinner,\r\n                    btnId,\r\n                    target = valueAccessor(),\r\n                    startSpinFromObservable = allBindingsAccessor().spinnerOptions.startSpinFrom,\r\n                    $increment,\r\n                    $decrement,\r\n                    subscriber,\r\n                    minSubscriber,\r\n                    maxSubscriber,\r\n                    startSpinFromSubscriber,\r\n                    enabledSubscriber;\r\n\r\n                if (!options.input) {\r\n                    $spinner = $(element);\r\n                } else if (options.input.indexOf('#') === 0) {\r\n                    $spinner = $(options.input);\r\n                } else {\r\n                    $spinner = $(element).find(options.input);\r\n                }\r\n\r\n                if (!$spinner.length) {\r\n                    return;\r\n                }\r\n\r\n                btnId = $spinner.attr(\"id\") || $spinner.attr(\"name\") || \"\";\r\n\r\n                var handleDecrementButton = function () {\r\n                    if (!$decrement) {\r\n                        return;\r\n                    }\r\n\r\n                    var enabled = allBindingsAccessor().spinnerOptions.enabled();\r\n                    if (!enabled)\r\n                        return;\r\n\r\n                    var startSpinFrom = allBindingsAccessor().spinnerOptions.startSpinFrom();\r\n                    var targetValue = parseFloat(target());\r\n\r\n                    if (target() === \"NA\" && startSpinFrom === eStartSpinFrom.Above) {\r\n                        $decrement.toggleClass(\"active\", false);\r\n                        return;\r\n                    }\r\n\r\n                    if (isNaN(targetValue) && startSpinFrom === eStartSpinFrom.Below) {\r\n                        $decrement.toggleClass(\"active\", true);\r\n                        return;\r\n                    }\r\n\r\n                    var value = Number(target()),\r\n                        minValue = allBindingsAccessor().spinnerOptions.min();\r\n\r\n                    if (value <= minValue) {\r\n                        $decrement.toggleClass(\"active\", false);\r\n                    } else {\r\n                        $decrement.toggleClass(\"active\", true);\r\n                    }\r\n                };\r\n\r\n                var handleIncrementButton = function () {\r\n                    if (!$increment) {\r\n                        return;\r\n                    }\r\n                    var enabled = allBindingsAccessor().spinnerOptions.enabled();\r\n                    if (!enabled)\r\n                        return;\r\n\r\n                    var startSpinFrom = allBindingsAccessor().spinnerOptions.startSpinFrom();\r\n                    var targetValue = parseFloat(target());\r\n                    if (isNaN(targetValue) && startSpinFrom === eStartSpinFrom.Below) {\r\n                        $increment.toggleClass(\"active\", false);\r\n                        return;\r\n                    }\r\n\r\n                    var value = Number(target()),\r\n                        maxValue = allBindingsAccessor().spinnerOptions.max();\r\n\r\n                    if (value >= maxValue) {\r\n                        $increment.toggleClass(\"active\", false);\r\n                    } else {\r\n                        $increment.toggleClass(\"active\", true);\r\n                    }\r\n                };\r\n\r\n                var handleButtons = function () {\r\n                    handleIncrementButton();\r\n                    handleDecrementButton();\r\n                };\r\n\r\n                var enableChanged = function (value) {\r\n                    if ($increment) {\r\n                        $increment.toggleClass(\"active\", value);\r\n                        $increment.toggleClass(\"disabled\", !value);\r\n                    }\r\n                    if ($decrement) {\r\n                        $decrement.toggleClass(\"active\", value);\r\n                        $decrement.toggleClass(\"disabled\", !value);\r\n                    }\r\n\r\n                }\r\n                $spinner.fxspinner({\r\n                    step: ko.toJS(options.step),\r\n                    page: ko.toJS(options.page),\r\n                    numberFormat: ko.toJS(options.numberFormat),\r\n                    incremental: true,\r\n                    create: function () {\r\n                        var minObservable = allBindingsAccessor().spinnerOptions.min,\r\n                            maxObservable = allBindingsAccessor().spinnerOptions.max,\r\n                            enabledObservable = allBindingsAccessor().spinnerOptions.enabled;\r\n\r\n                        $increment = $(element).find(\".ui-spinner-button.ui-spinner-up\");\r\n                        if ($increment.length) {\r\n                            $increment.addClass(\"increment\");\r\n                            if (btnId) {\r\n                                $increment.attr(\"id\", btnId.concat(\"BtnIncrement\"));\r\n                            }\r\n                            if (enabledObservable())\r\n                                $increment.addClass(\"active\");\r\n                            else\r\n                                $increment.addClass(\"disabled\");\r\n                        }\r\n\r\n                        $decrement = $(element).find(\".ui-spinner-button.ui-spinner-down\");\r\n                        if ($decrement.length) {\r\n                            $decrement.addClass(\"decrement\");\r\n                            if (btnId) {\r\n                                $decrement.attr(\"id\", btnId.concat(\"BtnDecrement\"));\r\n                            }\r\n                            if (enabledObservable())\r\n                                $decrement.addClass(\"active\");\r\n                            else\r\n                                $decrement.addClass(\"disabled\");\r\n                        }\r\n\r\n                        handleButtons();\r\n\r\n                        subscriber = target.subscribe(function () {\r\n                            handleButtons();\r\n                        });\r\n\r\n                        minSubscriber = minObservable.subscribe(handleDecrementButton);\r\n                        maxSubscriber = maxObservable.subscribe(handleIncrementButton);\r\n                        startSpinFromSubscriber = startSpinFromObservable.subscribe(handleButtons);\r\n                        enabledSubscriber = enabledObservable.subscribe(enableChanged);\r\n                    },\r\n                    spin: function (e, ui) {\r\n\r\n                        if (general.isNullOrUndefined($spinner)) {\r\n                            return false;\r\n                        }\r\n                        e.preventDefault();\r\n\r\n                        var value = $spinner.fxspinner(\"value\"),\r\n                            minValue = allBindingsAccessor().spinnerOptions.min(),\r\n                            maxValue = allBindingsAccessor().spinnerOptions.max(),\r\n                            startSpinFrom = allBindingsAccessor().spinnerOptions.startSpinFrom(),\r\n                            direction = ui.value > value ? \"up\" : \"down\";\r\n\r\n                        var targetValue = parseFloat(target());\r\n                        if (isNaN(targetValue) && startSpinFrom === eStartSpinFrom.Below) {\r\n                            target(maxValue);\r\n                            $spinner.fxspinner(\"value\", maxValue);\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        if (isNaN(targetValue) && startSpinFrom === eStartSpinFrom.Above) {\r\n                            target(minValue);\r\n                            $spinner.fxspinner(\"value\", minValue);\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        if (direction === \"up\" && ui.value < minValue) {\r\n                            target(minValue);\r\n                            $spinner.fxspinner(\"value\", minValue);\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        if (direction === \"down\" && ui.value > maxValue) {\r\n                            target(maxValue);\r\n                            $spinner.fxspinner(\"value\", maxValue);\r\n\r\n                            return false;\r\n                        }\r\n\r\n                        if (typeof target.isIncremental === \"function\" && target.isIncremental()) {\r\n                            // handle observables extended with incremental custom extender\r\n                            var newValue;\r\n\r\n                            if (direction === \"up\") {\r\n                                newValue = target.increment(true);\r\n                            }\r\n\r\n                            if (direction === \"down\") {\r\n                                newValue = target.decrement(true);\r\n                            }\r\n\r\n                            if (!isNaN(newValue) && newValue < minValue) {\r\n                                newValue = minValue;\r\n                            }\r\n\r\n                            if (!isNaN(newValue) && newValue > maxValue) {\r\n                                newValue = maxValue;\r\n                            }\r\n\r\n                            if (!isNaN(newValue) && newValue >= minValue && newValue <= maxValue) {\r\n                                target(newValue);\r\n                                $spinner.fxspinner(\"value\", newValue);\r\n                            }\r\n                        } else if (ui.value >= minValue && ui.value <= maxValue) {\r\n                            if (value != ui.value) {\r\n                                // update only when the value has been changed\r\n                                target(ui.value);\r\n                                $spinner.fxspinner(\"value\", ui.value);\r\n                            }\r\n                        }\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                //handle disposal (if KO removes by the template binding)\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                    if (subscriber) {\r\n                        subscriber.dispose();\r\n                    }\r\n\r\n                    if (minSubscriber) {\r\n                        minSubscriber.dispose();\r\n                    }\r\n\r\n                    if (maxSubscriber) {\r\n                        maxSubscriber.dispose();\r\n                    }\r\n\r\n                    if (startSpinFromSubscriber) {\r\n                        startSpinFromSubscriber.dispose();\r\n                    }\r\n\r\n                    if (!general.isNullOrUndefined($spinner) && $spinner.length) {\r\n                        $spinner.fxspinner(\"destroy\");\r\n                        $spinner = null;\r\n                    }\r\n\r\n                    if (enabledSubscriber)\r\n                        enabledSubscriber.dispose();\r\n\r\n                    $decrement = null;\r\n                    $increment = null;\r\n                });\r\n            },\r\n            update: function (element, valueAccessor, allBindingsAccessor) {\r\n                var rawValue = ko.utils.unwrapObservable(valueAccessor()),\r\n                    value = general.isStringType(rawValue) && rawValue !== \"\"\r\n                        ? Globalize.parseFloat(rawValue)\r\n                        : rawValue;\r\n\r\n                var options = ko.toJS(allBindingsAccessor().spinnerOptions) || {},\r\n                    $spinner;\r\n\r\n                if (!options.input) {\r\n                    $spinner = $(element);\r\n                } else if (options.input.indexOf('#') === 0) {\r\n                    $spinner = $(options.input);\r\n                } else {\r\n                    $spinner = $(element).find(options.input);\r\n                }\r\n\r\n                if (!$spinner.length) {\r\n                    return;\r\n                }\r\n\r\n                var delta = {},\r\n                    currentStep = $spinner.fxspinner(\"option\", \"step\"),\r\n                    currentFormat = $spinner.fxspinner(\"option\", \"numberFormat\"),\r\n                    changeOptions = false;\r\n\r\n                if (currentStep != options.step) {\r\n                    changeOptions = true;\r\n                    delta.step = options.step;\r\n                }\r\n\r\n                if (currentFormat != options.numberFormat) {\r\n                    changeOptions = true;\r\n                    delta.numberFormat = options.numberFormat;\r\n                }\r\n\r\n                if (changeOptions) {\r\n                    $spinner.fxspinner(\"option\", delta);\r\n                }\r\n\r\n                // update value\r\n                if (!general.isEmptyValue(value)) {\r\n                    var spinnerNumberFormat = $spinner.fxspinner(\"option\", \"numberFormat\"),\r\n                        currentValue = $spinner.val(),\r\n                        formattedValue = Globalize.format(value, spinnerNumberFormat);\r\n\r\n                    if (currentValue !== formattedValue && $spinner.get(0) !== document.activeElement) {\r\n                        clearTimeout($spinner.updateValueTimer);\r\n\r\n                        $spinner.updateValueTimer = setTimeout(function ($field, valueToSet) {\r\n                            var instance = $field.fxspinner(\"instance\");\r\n                            if (!instance) {\r\n                                return;\r\n                            }\r\n\r\n                            $field.fxspinner(\"value\", valueToSet);\r\n                            $field.val(valueToSet);\r\n                            $field.trigger(\"blur\");\r\n                        }, 10, $spinner, formattedValue);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}