{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/FxNet/UILayer/ViewModels/UploadDocumentsPopUpsManager.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "﻿define(\r\n    'FxNet/UILayer/ViewModels/UploadDocumentsPopUpsManager',\r\n    [\r\n        'require',\r\n        'handlers/general',\r\n        'Dictionary',\r\n        'enums/alertenums',\r\n        'devicemanagers/AlertsManager',\r\n        'devicemanagers/StatesManager'\r\n    ],\r\n    function (require) {\r\n        var dictionary = require('Dictionary'),\r\n            general = require('handlers/general'),\r\n            alertTypes = require('enums/alertenums'),\r\n            alertsManager = require('devicemanagers/AlertsManager'),\r\n            statesManager = require('devicemanagers/StatesManager'),\r\n            resourceName = 'UploadDocumentsStatusPopUpMessages';\r\n\r\n        function UploadDocumentsPopUpsManager() {\r\n            /*\r\n                - Your {document type} document was uploaded successfully.\r\n                Visible to any category except “Other documents”.\r\n                - Your document was uploaded successfully.\r\n                For “Other documents” - the only text that should appear. None of the above should be added to it. \r\n            */\r\n            function addFirstMessage(messages, documentType) {\r\n                var messageRaw, messageParsed,\r\n                    uploadedDocupentTypeName = general.getKeyByValue(eUploadDocumentType, documentType);\r\n\r\n                switch (documentType) {\r\n                    case eUploadDocumentType.OtherDocuments:\r\n                        messageRaw = dictionary.GetItem('doc_load_success', resourceName);\r\n\r\n                        if (messageRaw) {\r\n                            messageParsed = messageRaw;\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        var document_type_name = dictionary.GetItem('docname_' + uploadedDocupentTypeName, resourceName);\r\n\r\n                        messageRaw = dictionary.GetItem('docname_load_success', resourceName);\r\n\r\n                        if (messageRaw) {\r\n                            messageParsed = messageRaw.replace('{0}', document_type_name);\r\n                        }\r\n                        break;\r\n                }\r\n\r\n                if (messageParsed) {\r\n                    messages.push(messageParsed);\r\n                }\r\n            }\r\n\r\n            /*\r\n                Please note {Proof of Residence/Proof of ID) document should be provided as well\r\n                AML<>Approved AND document status = (Not yet received, Incomplete), for either \r\n                proof of ID/Proof of residence categories, all brokers, \r\n                for “Browse” buttons of proof of ID AND Proof of residence only.\r\n            */\r\n            function addSecondMessage(messages, documentType) {\r\n                var messageParsed,\r\n                    arrDocumentStates = [eUploadDocumentStatus.Incomplete, eUploadDocumentStatus.AwaitingDocument];\r\n\r\n                if ((statesManager.States.AmlStatus() === eAMLStatus.Approved) ||\r\n                    (documentType !== eUploadDocumentType.ProofOfID && documentType !== eUploadDocumentType.ProofOfResidence)) {\r\n                    return;\r\n                }\r\n\r\n                if (0 > arrDocumentStates.indexOf(statesManager.States.docProofOfID()) &&\r\n                    0 > arrDocumentStates.indexOf(statesManager.States.docProofOfResidence())) {\r\n                    return;\r\n                }\r\n\r\n                var docupentTypeName,\r\n                    document_type,\r\n                    messageRaw = dictionary.GetItem('doc_shuld_be_provided', resourceName)\r\n\r\n                if (!messageRaw.trim()) {\r\n                    return;\r\n                }\r\n\r\n                switch (documentType) {\r\n                    case eUploadDocumentType.ProofOfID:\r\n                        if (0 <= arrDocumentStates.indexOf(statesManager.States.docProofOfResidence())) {\r\n                            docupentTypeName = general.getKeyByValue(eUploadDocumentType, eUploadDocumentType.ProofOfResidence);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case eUploadDocumentType.ProofOfResidence:\r\n                        if (0 <= arrDocumentStates.indexOf(statesManager.States.docProofOfID())) {\r\n                            docupentTypeName = general.getKeyByValue(eUploadDocumentType, eUploadDocumentType.ProofOfID);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    default:\r\n                        return;\r\n                }\r\n\r\n                if (!docupentTypeName) {\r\n                    return;\r\n                }\r\n\r\n                document_type = dictionary.GetItem('docname_' + docupentTypeName, resourceName);\r\n\r\n                messageParsed = messageRaw.replace('{0}', document_type);\r\n\r\n                if (messageParsed) {\r\n                    messages.push(messageParsed);\r\n                }\r\n            }\r\n\r\n            /*\r\n                You will be notified as soon as we have reviewed your document.\r\n                AML<>Approved, BR3 + BR33, for “Browse” buttons of proof of ID AND Proof of residence only\r\n            */\r\n            function addThirdMessage(messages, documentType) {\r\n                if ((statesManager.States.AmlStatus() === eAMLStatus.Approved) ||\r\n                    (documentType !== eUploadDocumentType.ProofOfID && documentType !== eUploadDocumentType.ProofOfResidence)) {\r\n                    return;\r\n                }\r\n\r\n                /* 'You will be notified as soon as we have reviewed your document.'*/\r\n                var messageRaw = dictionary.GetItem('notify_when_doc_reviewed', resourceName);\r\n\r\n                if (messageRaw.trim()) {\r\n                    messages.push(messageRaw);\r\n                }\r\n            }\r\n\r\n            function parseMessagesFor(documentType) {\r\n                var title,\r\n                    messages = [];\r\n\r\n                addFirstMessage(messages, documentType);\r\n                addSecondMessage(messages, documentType);\r\n                addThirdMessage(messages, documentType);\r\n\r\n                title = dictionary.GetItem('popup_title', resourceName);\r\n\r\n                return {\r\n                    title: title,\r\n                    messages: messages\r\n                };\r\n            }\r\n\r\n            function showPopUp(documentType, customMessage) {\r\n                var popUpData = parseMessagesFor(documentType);\r\n\r\n                if (!general.isEmptyValue(customMessage)) {\r\n                    popUpData.messages.push(customMessage);\r\n                }\r\n\r\n                if (popUpData.messages.length > 0) {\r\n                    var props = {\r\n                        theme: 'alerts-white-theme alerts-no-close-x spaced-list'\r\n                    };\r\n\r\n                    alertsManager.UpdateAlert(alertTypes.GeneralOkAlert, popUpData.title, popUpData.body, popUpData.messages, props);\r\n                    alertsManager.PopAlert(alertTypes.GeneralOkAlert);\r\n                }\r\n            }\r\n\r\n            return {\r\n                showPopUp: showPopUp\r\n            };\r\n        }\r\n\r\n        return new UploadDocumentsPopUpsManager();\r\n    }\r\n);",
  "isBase64": false
}