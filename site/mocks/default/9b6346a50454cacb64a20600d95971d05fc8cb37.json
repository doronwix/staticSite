{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/dataaccesslayer/dalCharts.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'dataaccess/dalCharts',\r\n    [\r\n        'require',\r\n        'handlers/general',\r\n        'handlers/Ajaxer',\r\n        'generalmanagers/ErrorManager',\r\n        'JSONHelper'\r\n    ],\r\n    function DalChartsDef(require) {\r\n        var general = require('handlers/general'),\r\n            TAjaxer = require('handlers/Ajaxer'),\r\n            ErrorManager = require('generalmanagers/ErrorManager'),\r\n            JSONHelper = require('JSONHelper');\r\n\r\n        var dalCharts = function DalChartsClass() {\r\n            function validateGetCandlesModel(model) {\r\n                if (!model || !model.instrumentId ||\r\n                    general.isEmptyValue(model.periodId) ||\r\n                    !model.numCandles ||\r\n                    general.isEmptyValue(model.rateType)) {\r\n                    throwError('TDALChartsData/getCandles', 'Missing parameter values');\r\n                }\r\n\r\n                if (!(general.isNumberType(model.instrumentId) &&\r\n                    general.isNumberType(model.periodId) &&\r\n                    general.isNumberType(model.numCandles))) {\r\n                    throwError('TDALChartsData/getCandles', 'Invalid parameter values');\r\n                }\r\n            }\r\n\r\n            function validateGetTicksModel(model) {\r\n                if (!model ||\r\n                    !model.instrumentId ||\r\n                    !model.numTicks ||\r\n                    general.isEmptyValue(model.rateType)) {\r\n                    throwError('TDALChartsData/getTicks', 'Missing parameter values');\r\n                }\r\n\r\n                if (!(general.isNumberType(model.instrumentId) &&\r\n                    general.isNumberType(model.numTicks))) {\r\n                    throwError('TDALChartsData/getTicks', 'Invalid parameter values');\r\n                }\r\n            }\r\n\r\n            function getTicks(model) {\r\n                validateGetTicksModel(model);\r\n\r\n                var ajaxer = new TAjaxer(),\r\n                    params = general.urlEncode({\r\n                        instrumentId: model.instrumentId,\r\n                        numTicks: model.numTicks,\r\n                        rateType: model.rateType,\r\n                        fromDate: model.fromDate,\r\n                        toDate: model.toDate,\r\n                    });\r\n\r\n                return ajaxer.promises\r\n                    .get('TDALChartsData/getTicks', 'FeedsHistory/GetTicks', params)\r\n                    .then(analyzeResponse)\r\n                    .fail(function onGetTicksError(error) {\r\n                        throwError('TDALChartsData/getTicks', error);\r\n                    });\r\n            }\r\n\r\n            function getCandles(model) {\r\n                validateGetCandlesModel(model);\r\n\r\n                var ajaxer = new TAjaxer(),\r\n                    params = general.urlEncode({\r\n                        instrumentId: model.instrumentId,\r\n                        periodId: model.periodId,\r\n                        numCandles: model.numCandles,\r\n                        rateType: model.rateType,\r\n                        fromDate: model.fromDate,\r\n                        toDate: model.toDate,\r\n                    });\r\n\r\n                return ajaxer.promises\r\n                    .get('TDALChartsData/getCandles',\r\n                        'FeedsHistory/GetCandles',\r\n                        params,\r\n                        null,\r\n                        null,\r\n                        1,\r\n                        2\r\n                    )\r\n                    .then(analyzeResponse)\r\n                    .fail(function onGetCandlesError(error) {\r\n                        throwError('TDALChartsData/getCandles', error);\r\n                    });\r\n            }\r\n\r\n            function getPeriods() {\r\n                var ajaxer = new TAjaxer();\r\n\r\n                return ajaxer.promises\r\n                    .get('TDALChartsData/getPeriods', 'FeedsHistory/GetCandlePeriods')\r\n                    .then(analyzeResponse)\r\n                    .fail(function onGetPeriodsError(error) {\r\n                        throwError('TDALChartsData/getPeriods', error);\r\n                    });\r\n            }\r\n\r\n            function throwError(caller, error) {\r\n                ErrorManager.onError(caller, '', eErrorSeverity.high);\r\n\r\n                throw error;\r\n            }\r\n\r\n            function analyzeResponse(responseText) {\r\n                var response = JSONHelper.STR2JSON(\r\n                    'dalCharts:analyzeResponse',\r\n                    responseText\r\n                );\r\n\r\n                if (general.isNullType(response) || response.status === 'ServerError') {\r\n                    throw new Error('Cannot get chart data');\r\n                }\r\n\r\n                return response.result || response;\r\n            }\r\n\r\n            return {\r\n                GetCandles: getCandles,\r\n                GetTicks: getTicks,\r\n                GetPeriods: getPeriods,\r\n            };\r\n        };\r\n\r\n        return new dalCharts();\r\n    }\r\n);\r\n",
  "isBase64": false
}