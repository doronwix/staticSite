{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/managers/AdvinionChart/AdvinionChartWrapper.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿/* global eResourcesNames */\r\ndefine(\r\n    'managers/AdvinionChart/AdvinionChartWrapper',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'helpers/KoComponentViewModel',\r\n        'Q',\r\n        'managers/AdvinionChart/AdvinionChartsManager',\r\n        'managers/AdvinionChart/AdvinionChartInitilizer',\r\n        'managers/AdvinionChart/AdvinionLanguagesMapper',\r\n        'managers/AdvinionChart/TradingChartsManager',\r\n        'managers/ChartStudySettings',\r\n        'managers/ChartZoomSettingsManager',\r\n        'managers/ChartLayoutSettings',\r\n        'Dictionary',\r\n        'generalmanagers/RegistrationManager',\r\n        'managers/instrumentTranslationsManager',\r\n        'LoadDictionaryContent!charts_resources',\r\n        'handlers/Logger',\r\n        'StateObject!Transaction',\r\n        'initdatamanagers/InstrumentsManager',\r\n        'AdvinionChartCustomizations/ChartSignals/tc/pivot.lib',\r\n        'initdatamanagers/Customer',\r\n        'handlers/Cookie',\r\n        'handlers/general',\r\n        \"configuration/initconfiguration\",\r\n        'global/debounce'\r\n    ],\r\n    function (require) {\r\n        var ko = require('knockout'),\r\n            koComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            Q = require('Q'),\r\n            advinionChartsManager = require('managers/AdvinionChart/AdvinionChartsManager'),\r\n            advinionChartInitializer = require('managers/AdvinionChart/AdvinionChartInitilizer'),\r\n            advinionLanguagesMapper = require('managers/AdvinionChart/AdvinionLanguagesMapper'),\r\n            tradingChartsManager = require('managers/AdvinionChart/TradingChartsManager'),\r\n            chartStudySettings = require('managers/ChartStudySettings'),\r\n            chartLayoutSettings = require('managers/ChartLayoutSettings'),\r\n            chartZoomSettingsManager = require('managers/ChartZoomSettingsManager'),\r\n            registrationManager = require('generalmanagers/RegistrationManager'),\r\n            instrumentTranslationsManager = require('managers/instrumentTranslationsManager'),\r\n            instrumentsManager = require('initdatamanagers/InstrumentsManager'),\r\n            dictionary = require('Dictionary'),\r\n            logger = require('handlers/Logger'),\r\n            stateObject = require('StateObject!Transaction'),\r\n            chartPivotLibrary = require('AdvinionChartCustomizations/ChartSignals/tc/pivot.lib'),\r\n            customer = require('initdatamanagers/Customer'),\r\n            cookieHandler = require('handlers/Cookie'),\r\n            general = require('handlers/general'),\r\n            advinionChartSettings = require(\"configuration/initconfiguration\").AdvinionChartConfiguration,\r\n            debounce = require(\"global/debounce\"),\r\n            jsPushRequestTypes = {\r\n                GetRecentHistory: \"GetRecentHistory\",\r\n                GetMultiRT: \"GetMultiRT\",\r\n                GetSymbolsByGroup: \"GetSymbolsByGroup\",\r\n                FindSymbols: \"FindSymbols\",\r\n                GetHistoryByDates: \"GetHistoryByDates\"\r\n            };\r\n\r\n        chartStudySettings.Init();\r\n\r\n        var AdvinionChartWrapper = general.extendClass(koComponentViewModel, function () {\r\n            var self = this,\r\n                parent = this.parent,                       // inherited from DealBaseViewModel\r\n                data = this.Data,                           // inherited from DealBaseViewModel\r\n                objChartMain = {},\r\n                isChartLoadedDeferred = Q.defer(),\r\n                isChartLoaded = isChartLoadedDeferred.promise,\r\n                chartParams = {},\r\n                extraInitComplete = null,\r\n                extraCreateComplete = null,\r\n                extraPreloadFinished = null,\r\n                extraOnPriceLineDragged = null,\r\n                chartZoomSettingsManagerInstance = null,\r\n                previousCcyAskValues = {},\r\n                guid = general.createGuid(),\r\n                chartLoaderRejectReasons = {\r\n                    chartDisposed: 'Chart disposed',\r\n                    chartNotLoaded: 'Chart not loaded'\r\n                },\r\n                rejectedPromiseStateText = 'rejected';\r\n\r\n            self.priceLines = {};\r\n\r\n            chartLayoutSettings.Init();\r\n\r\n            function onPromiseRejected() {\r\n                //used on rejected promise on fail when don't want to do nothing\r\n            }\r\n\r\n            function init(customSettings) {\r\n                var additionalStartArgs = customSettings.additionalStartArgs || {},\r\n                    tcChartSignalsKey = 'tc-chart-signals' + additionalStartArgs.containerSuffix;\r\n                \r\n                data['tc-chart-signals'] = stateObject.set(tcChartSignalsKey, ko.observable({\r\n                    disabled: true,\r\n                    active: false\r\n                }));\r\n\r\n                parent.init.call(self, customSettings); // inherited from KoComponentViewModel\r\n\r\n                chartZoomSettingsManagerInstance = new chartZoomSettingsManager(additionalStartArgs.containerSuffix);\r\n\r\n                chartParams.additionalStartArgs = additionalStartArgs || {};\r\n                chartParams.additionalStartArgs.isLoadingData = chartParams.additionalStartArgs.isLoadingData ||general.emptyFn;\r\n                chartParams.startSettings = advinionChartInitializer.getStartSettings(customSettings.additionalStartArgs.instanceType, customSettings.additionalStartArgs);\r\n\r\n                chartParams.startSettings.ChartLayoutContainer = chartParams.startSettings.ChartLayoutContainer + customSettings.additionalStartArgs.containerSuffix;\r\n                chartParams.startSettings.ParentRelativeObjectID = chartParams.startSettings.ParentRelativeObjectID + customSettings.additionalStartArgs.containerSuffix;\r\n\r\n                extraInitComplete = customSettings.onExtraInitComplete ||general.emptyFn;\r\n                extraCreateComplete = customSettings.onExtraCreateComplete ||general.emptyFn;\r\n                extraPreloadFinished = customSettings.onExtraPreloadFinished ||general.emptyFn;\r\n                extraOnPriceLineDragged = customSettings.additionalStartArgs.onPriceLineDragged ||general.emptyFn;\r\n\r\n                tradingChartsManager.subscribe(guid);\r\n\r\n                if (!advinionChartsManager.IsChartManagerLoaded()) {\r\n                    advinionChartsManager.Init(advinionChartSettings);\r\n                }\r\n\r\n                advinionChartsManager.IsLoaded\r\n                    .then(tradingChartsManager.GetTimeScalesAsync)\r\n                    .then(start)\r\n                    .then(setSubscribers)\r\n                    .fail(onFailWhileStarting)\r\n                    .done();\r\n\r\n                isChartLoaded\r\n                    .then(getMajors)\r\n                    .fail(onPromiseRejected)\r\n                    .done();\r\n            }\r\n\r\n            function onFailWhileStarting() {\r\n                logger.log(\"AdvinionChartWrapper\", 'advinionChartsManager not loadded!', null, eErrorSeverity.critical);\r\n\r\n                isChartLoadedDeferred.reject(chartLoaderRejectReasons.chartNotLoaded);\r\n            }\r\n\r\n            function start(timeframe) {\r\n                ko.postbox.publish(eFxNetEvents.ChartInit);\r\n\r\n                //Init the layout\r\n                objChartMain = ProChart_InitLayout(chartParams.startSettings.ChartLayoutContainer, chartParams.startSettings.Layout, chartParams.startSettings.Template, general.isEmptyValue(chartParams.additionalStartArgs.containerSuffix) ? \"singlechart-stationkey\" : \"fourcharts-stationkey\", 1);\r\n\r\n                // extra data may be to late here for the chart chartInstanceKey\r\n                objChartMain.ExtraData = chartParams.ExtraData = {\r\n                    startSettings: chartParams.startSettings,\r\n                    additionalStartArgs: chartParams.additionalStartArgs,\r\n                    historyCandlesCount: chartParams.startSettings.chart.HistoryCandlesCount\r\n                };\r\n\r\n                var userSavedChartSettings = getCustomerSavedChartSettings();\r\n                if (userSavedChartSettings) {\r\n                    chartParams.ExtraData.TimeScale = userSavedChartSettings.TimeScale;\r\n                }\r\n\r\n                objChartMain.api.props.chart.gui.legend.font_darklight_auto = false;\r\n                objChartMain.api.props.chart.gui.legend.font_darklight_percent = 0;\r\n                objChartMain.api.props.chart.gui.favorites.compares = chartStudySettings.ComparesFavorites() || [];\r\n                objChartMain.api.props.chart.gui.favorites.indicators = chartStudySettings.IndicatorsFavorites() || [];\r\n\r\n                objChartMain.api.props.chart.gui.zoom.interval_font_size = chartParams.startSettings.api.props.chart.gui.zoom.interval_font_size || objChartMain.api.props.chart.gui.zoom.interval_font_size;\r\n                objChartMain.api.props.chart.gui.zoom.interval_font_bold = chartParams.startSettings.api.props.chart.gui.zoom.interval_font_bold || objChartMain.api.props.chart.gui.zoom.interval_font_bold;\r\n                objChartMain.api.props.chart.gui.zoom.interval_font_color = chartParams.startSettings.api.props.chart.gui.zoom.interval_font_color || objChartMain.api.props.chart.gui.zoom.interval_font_color;\r\n\r\n                //Set the path to the package root into the GUI object\r\n                objChartMain.guiinit.rootpath = chartParams.startSettings.rootPath;\r\n                objChartMain.apiinit.customLayoutFile = objChartMain.guiinit.rootpath + '/' + chartParams.startSettings.CustomLayoutFile;\r\n\r\n                //objChartMain.guiinit.cache = true;\r\n                objChartMain.navigator.properties.alvaysXMLHttpRequest = true;\r\n                objChartMain.navigator.properties.xdrMinIE = 11;\r\n                objChartMain.apiinit.timeupdateVersiongui = \"time456\";\r\n                objChartMain.apiinit.savedIndicatorsSetting = chartStudySettings.GetSettings() || [];\r\n                objChartMain.apiinit.localization.languages = chartParams.startSettings.languages;\r\n                objChartMain.apiinit.timeframes = getVisibleTimeFramesItems(chartParams.startSettings.timeframes, timeframe);\r\n\r\n                objChartMain.gui.init.localizationlang = advinionLanguagesMapper.getChartLanguage();\r\n\r\n                //Connect events\r\n                objChartMain.events.layout.readyComplete = onReadyComplete;\r\n                objChartMain.events.layout.initComplete = onInitComplete;\r\n                objChartMain.events.layout.onPreloadStart = onPreloadStart;\r\n                objChartMain.events.layout.onPreloadFinished = onPreloadFinished;\r\n\r\n                objChartMain.events.chart.createComplete = onCreateComplete;\r\n\r\n                objChartMain.events.chart.onCanSaveTA = saveChartSettings;\r\n                objChartMain.events.chart.onCanLoadTA = loadChartSettingsOnce;\r\n\r\n                objChartMain.events.chart.onChangeComparesFavorites = chartStudySettings.ComparesFavorites;\r\n                objChartMain.events.chart.onChangeIndicatorsFavorites = chartStudySettings.IndicatorsFavorites;\r\n\r\n                objChartMain.events.study.onChangeDefaultSettings = closeChartDialogAfterChangeDefaultSettings;\r\n                objChartMain.events.study.onDialogAddStudy = chartParams.startSettings.events.onDialogAddStudy;\r\n\r\n                objChartMain.events.onDetectMobileMode = chartParams.startSettings.isMobile;\r\n\r\n                //Load layout\r\n                objChartMain.gui.loadLayout();\r\n\r\n                configureTracking();\r\n            }\r\n\r\n            function getVisibleTimeFramesItems(allTimeFrames, visibleTimeFrames) {\r\n                return allTimeFrames.filter(\r\n                    function (advinionTimeFrameItem) {\r\n                        var timeFrameItem = visibleTimeFrames.find(\r\n                            function (item) {\r\n                                return item.id.toLowerCase() === advinionTimeFrameItem.id.toLowerCase();\r\n                            }\r\n                        );\r\n                        return general.isDefinedType(timeFrameItem);\r\n                    });\r\n            }\r\n\r\n            function closeChartDialogAfterChangeDefaultSettings() {\r\n                chartStudySettings.SetSettings.apply(null, arguments);\r\n                objChartMain.apiactions.common.closeDialog();\r\n            }\r\n\r\n            function onCustomButtonClickHandle(source) {\r\n                switch (source) {\r\n                    case 'menu-compareform':\r\n                        if (chartStudySettings.ComparesFavorites().length > 0) {\r\n                            objChartMain.apiactions.ta.openCompareSmart();\r\n                        } else {\r\n                            objChartMain.apiactions.ta.openCompareSearch();\r\n                        }\r\n                        break;\r\n\r\n                    case 'menu-indicatorform':\r\n                        if (chartStudySettings.IndicatorsFavorites().length > 0) {\r\n                            objChartMain.apiactions.indicators.openWizardFavorites();\r\n                        } else {\r\n                            objChartMain.apiactions.indicators.openWizardSmart();\r\n                        }\r\n                        break;\r\n\r\n                    case 'tc-signals-button':\r\n                        toggleSignals(null, true);\r\n                        break;\r\n\r\n                    default:\r\n                        chartParams.additionalStartArgs.toggleDealSlipViewCallback.apply(this, arguments);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            function getMajors() {\r\n                if (objChartMain.chart && objChartMain.chart.symbols) {\r\n                    objChartMain.chart.symbols.GetSymbolsByGroup({ guiparent: null, guigroup: 'majors' }, 'majors');\r\n                }\r\n            }\r\n\r\n            function drawCurrentPriceLine(priceData) {\r\n                if (priceData && priceData.length > 0) {\r\n                    drawPriceLine(eChartPriceLineType.CurrentRate, priceData[priceData.length - 1].close, chartParams.additionalStartArgs.currentRateKey);\r\n                }\r\n            }\r\n\r\n            function keepSyncPreviousCcyAskValues(rateData) {\r\n                var responseData = [];\r\n\r\n                for (var idx = 0; idx < rateData.length; idx++) {\r\n                    var currentCcyAskValue = rateData[idx].data[0].ask,\r\n                        symbolId = rateData[idx].id;\r\n\r\n                    if (previousCcyAskValues[symbolId] == currentCcyAskValue) {\r\n                        continue;\r\n                    }\r\n\r\n                    previousCcyAskValues[symbolId] = currentCcyAskValue;\r\n                    responseData.push(rateData[idx]);\r\n                }\r\n\r\n                return responseData;\r\n            }\r\n\r\n            function getRecentHistory(objChartContext, objRequestContext, objParameters) {\r\n                var request = {\r\n                    timeFrame: objParameters.strTimeFrame,\r\n                    instrumentId: objParameters.strSymbol,\r\n                    orderDir: chartParams.ExtraData.additionalStartArgs.orderDir,\r\n                    historyLength: chartParams.ExtraData.historyCandlesCount,\r\n                    fromDate: objParameters.strFromDate,\r\n                    toDate: objParameters.strToDate\r\n                };\r\n\r\n                chartParams.isLoadingHistory = true;\r\n\r\n                previousCcyAskValues = {};\r\n                deletePriceLine(eChartPriceLineType.CurrentRate);\r\n\r\n                ko.postbox.publish(eFxNetEvents.ChartGetHistoryRequest);\r\n\r\n                tradingChartsManager.GetRecentHistory(request)\r\n                    .then(function (responseData) {\r\n                        ko.postbox.publish(eFxNetEvents.ChartGetHistoryResponse);\r\n\r\n                        if (responseData) {\r\n                            responseData.data = general.isEmptyValue(responseData.data) ? [] : responseData.data;\r\n\r\n                            if (objChartMain && objChartMain.chart && general.isFunctionType(objChartMain.chart.Push) &&\r\n                                isChartLoaded && general.isFunctionType(isChartLoaded.inspect) && isChartLoaded.inspect().state !== rejectedPromiseStateText) {\r\n                                objChartMain.chart.Push(objChartContext, objRequestContext, jsPushRequestTypes.GetRecentHistory, responseData);\r\n                            }\r\n\r\n                            drawCurrentPriceLine(responseData.data);\r\n\r\n                            forceRedrawPriceLine(eChartPriceLineType.LimitLevel);\r\n                        }\r\n                    })\r\n                    .finally(function () {\r\n                        chartParams.isLoadingHistory = false;\r\n                    })\r\n                    .done();\r\n\r\n                registerInstrument(objParameters.strSymbol);\r\n            }\r\n\r\n            function getMultiRT(objChartContext, objRequestContext, objParameters) {\r\n                if (chartParams.isLoadingHistory == true) {\r\n                    return;\r\n                }\r\n\r\n                var orderDir = chartParams.ExtraData.additionalStartArgs.orderDir,\r\n                    symbols = objParameters.strSymbols,\r\n                    strSeparator = objParameters.strSeparator,\r\n                    instrumentIds = symbols.toString().split(strSeparator);\r\n\r\n                var rateData = tradingChartsManager.GetMultiRT(guid, instrumentIds, orderDir);\r\n\r\n                if (general.isEmptyType(rateData)) {\r\n                    return;\r\n                }\r\n\r\n                var responseData = [];\r\n                if (objParameters.strTimeFrame === eChartTimeFramesIds.tick) {\r\n                    responseData = keepSyncPreviousCcyAskValues(rateData);\r\n                } else {\r\n                    responseData = rateData;\r\n                }\r\n\r\n                if (responseData.length > 0) {\r\n                    isChartLoaded\r\n                        .then(function () {\r\n                            objChartMain.chart.Push(objChartContext, objRequestContext, jsPushRequestTypes.GetMultiRT, responseData);\r\n                        })\r\n                        .fail(onPromiseRejected)\r\n                        .done();\r\n                }\r\n\r\n                if (rateData[0].data && rateData[0].data.length > 0) {\r\n                    drawPriceLine(eChartPriceLineType.CurrentRate, rateData[0].data[0].ask, chartParams.additionalStartArgs.currentRateKey);\r\n                }\r\n\r\n                ko.postbox.publish(\"GetMultiRT\");\r\n            }\r\n\r\n            function getSymbolsByGroup(objChartContext, objRequestContext, objParameters) {\r\n                var strGroup = objParameters.strGroup,\r\n                    instrumentId = objRequestContext.UI.instrumentId,\r\n                    comparisonInstrumentsNumber = chartParams.startSettings.comparisonInstrumentsNumber,\r\n                    instrumentsNumber = chartParams.startSettings.instrumentsNumber;\r\n\r\n                var symbolsByGroup = tradingChartsManager.GetSymbolsByGroup(strGroup, instrumentId, comparisonInstrumentsNumber, instrumentsNumber);\r\n\r\n                isChartLoaded\r\n                    .then(function () {\r\n                        objChartMain.chart.Push(objChartContext, objRequestContext, jsPushRequestTypes.GetSymbolsByGroup, symbolsByGroup);\r\n                    })\r\n                    .fail(onPromiseRejected)\r\n                    .done();\r\n            }\r\n\r\n            function findSymbols(objChartContext, objRequestContext, objParameters) {\r\n                var isForCompares = objRequestContext.UI.guiparent === 'dialogcompares';\r\n                var foundData = tradingChartsManager.FindSymbols(objParameters.strText, chartParams.startSettings.searchInstrumentsNumber, isForCompares);\r\n\r\n                isChartLoaded\r\n                    .then(function () {\r\n                        objChartMain.chart.Push(objChartContext, objRequestContext, jsPushRequestTypes.FindSymbols, foundData);\r\n                    })\r\n                    .fail(onPromiseRejected)\r\n                    .done();\r\n            }\r\n\r\n            function getHistoryByDates(objChartContext, objRequestContext, objParameters) {\r\n                var request = {\r\n                    timeFrame: objParameters.strTimeFrame,\r\n                    instrumentId: objParameters.strSymbol,\r\n                    orderDir: chartParams.ExtraData.additionalStartArgs.orderDir,\r\n                    historyLength: chartParams.ExtraData.historyCandlesCount,\r\n                    fromDate: objParameters.strFromDate,\r\n                    toDate: objParameters.strToDate\r\n                };\r\n\r\n                previousCcyAskValues = {};\r\n                ko.postbox.publish(eFxNetEvents.ChartGetHistoryRequest);\r\n\r\n                tradingChartsManager.GetRecentHistory(request)\r\n                    .then(function (response) {\r\n                        ko.postbox.publish(eFxNetEvents.ChartGetHistoryResponse);\r\n\r\n                        isChartLoaded\r\n                            .then(function () {\r\n                                if (response && !general.isEmptyValue(response.data)) {\r\n                                    objChartMain.chart.Push(objChartContext, objRequestContext, jsPushRequestTypes.GetHistoryByDates, response);\r\n                                    drawCurrentPriceLine(response.data);\r\n                                } else {\r\n                                    objChartMain.chart.Push(objChartContext, objRequestContext, jsPushRequestTypes.GetHistoryByDates, null);\r\n                                    chartParams.ExtraData.additionalStartArgs.isLoadingData(false);\r\n                                }\r\n                            })\r\n                            .fail(onPromiseRejected)\r\n                            .done();\r\n                    })\r\n                    .fail(onPromiseRejected)\r\n                    .done();\r\n\r\n                registerInstrument(objParameters.strSymbol);\r\n            }\r\n\r\n            function jsPushCallbackFunction(objChartContext, objRequestContext, strRequest, objParameters) {\r\n                if (!objChartMain || !objChartMain.chart) {\r\n                    return;\r\n                }\r\n\r\n                // in case of open option we need to build a line with the last  of the open option\r\n                switch (strRequest) {\r\n                    case jsPushRequestTypes.GetRecentHistory:\r\n                        getRecentHistory(objChartContext, objRequestContext, objParameters);\r\n                        break;\r\n\r\n                    case jsPushRequestTypes.GetMultiRT:\r\n                        getMultiRT(objChartContext, objRequestContext, objParameters);\r\n                        break;\r\n\r\n                    case jsPushRequestTypes.GetSymbolsByGroup:\r\n                        getSymbolsByGroup(objChartContext, objRequestContext, objParameters);\r\n                        break;\r\n\r\n                    case jsPushRequestTypes.FindSymbols:\r\n                        findSymbols(objChartContext, objRequestContext, objParameters);\r\n                        break;\r\n\r\n                    case jsPushRequestTypes.GetHistoryByDates:\r\n                        getHistoryByDates(objChartContext, objRequestContext, objParameters);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            function changeSymbol(instrumentId, newOrderDir) {\r\n                function changeSymbolInternal() {\r\n                    var symbol = tradingChartsManager.GetAdvinionInstrument(instrumentId);\r\n\r\n                    changeOrderDir(newOrderDir);\r\n\r\n                    objChartMain.chart.ChangeSymbol(symbol);\r\n                }\r\n\r\n                isChartLoaded\r\n                    .then(changeSymbolInternal)\r\n                    .fail(onPromiseRejected)\r\n                    .done();\r\n            }\r\n\r\n            function changeOrderDir(newOrderDir) {\r\n                chartParams.ExtraData.additionalStartArgs.orderDir = general.isDefinedType(newOrderDir) ? newOrderDir : chartParams.ExtraData.additionalStartArgs.orderDir;\r\n            }\r\n\r\n            function getCustomerSavedChartSettings() {\r\n                var containerSuffix = chartParams.additionalStartArgs.containerSuffix;\r\n                var settings = chartLayoutSettings.GetSettings(containerSuffix);\r\n\r\n                if (general.isNullOrUndefined(settings)) {\r\n                    return null;\r\n                }\r\n\r\n                return settings.chartSettings || settings;\r\n            }\r\n\r\n            function loadChartSettingsOnce() {\r\n                objChartMain.events.chart.onCanLoadTA = null;\r\n\r\n                var userSavedChartSettings = getCustomerSavedChartSettings();\r\n\r\n                if (userSavedChartSettings) {\r\n                    objChartMain.chart.SetTAObject(userSavedChartSettings, true, true);\r\n                }\r\n\r\n                ko.postbox.publish(eFxNetEvents.ChartStartComplete);\r\n                ko.postbox.publish('chart-performance', { event: 'chart-start-completed', chartType: chartParams.additionalStartArgs.chartInstanceType, instrument: objChartMain.chart.SymbolName });\r\n\r\n                objChartMain.events.chart.onChangeTimeframe = saveChartSettings;\r\n                objChartMain.events.chart.onPriceTypeChange = saveChartSettings;\r\n                objChartMain.events.chart.onChangeSymbol = onChageSymbolHandler;\r\n            }\r\n\r\n            function forceRedrawPriceLine(lineType) {\r\n                var previousLineData = self.priceLines[lineType];\r\n\r\n                if (!previousLineData) {\r\n                    return;\r\n                }\r\n\r\n                deletePriceLine(lineType);\r\n                drawPriceLine(lineType, previousLineData.rate, previousLineData.contentKey);\r\n            }\r\n\r\n            function drawPriceLine(lineType, rateValue, contentKey) {\r\n                if ((!rateValue || rateValue == 0)) {\r\n                    deletePriceLine(lineType);\r\n\r\n                    return;\r\n                }\r\n\r\n                function drawPriceLineFunction() {\r\n                    var lineSettings = chartParams.startSettings.priceLines[lineType];\r\n\r\n                    drawPriceLineInternal(lineType, rateValue, lineSettings, contentKey);\r\n                }\r\n\r\n                isChartLoaded\r\n                    .then(drawPriceLineFunction)\r\n                    .fail(onPromiseRejected)\r\n                    .done();\r\n            }\r\n\r\n            function onPriceLineMoved(rate, priceLineId) {\r\n                var priceLineSettings = general.objectFirst(self.priceLines, function (priceLine) { return priceLine.id === priceLineId; });\r\n\r\n                if (!priceLineSettings) {\r\n                    return;\r\n                }\r\n\r\n                extraOnPriceLineDragged(priceLineSettings.lineType, rate);\r\n            }\r\n\r\n            function drawPriceLineInternal(lineType, rate, lineSettings, contentKey) {\r\n                var shapeSettingsArray = chartParams.startSettings.getPriceBoxSettings(lineType, dictionary.GetItem(contentKey + '_Short', eResourcesNames.ChartsResources, ' '));\r\n\r\n                if (self.priceLines[lineType]) {\r\n                    objChartMain.chart.Shapes.UpdateShape(lineSettings.panelId, self.priceLines[lineType].id, [\"value\", rate], true);\r\n\r\n                    self.priceLines[lineType].rate = rate;\r\n\r\n                    return;\r\n                }\r\n\r\n                var priceLineId = objChartMain.chart.Shapes.AddHLine(lineSettings.panelId,\r\n                    rate,\r\n                    dictionary.GetItem(contentKey, eResourcesNames.ChartsResources),\r\n                    lineSettings.lineColor,\r\n                    lineSettings.lineWidth,\r\n                    lineSettings.dashStyle,\r\n                    lineSettings.labelColor,\r\n                    lineSettings.labelfont,\r\n                    lineSettings.labelAlignment,\r\n                    lineSettings.horizontalPadding,\r\n                    lineSettings.margin,\r\n                    lineSettings.inPriceRange,\r\n                    lineSettings.labelBackgroundColor);\r\n\r\n                self.priceLines[lineType] = {\r\n                    id: priceLineId,\r\n                    rate: rate,\r\n                    contentKey: contentKey,\r\n                    lineType: lineType\r\n                };\r\n\r\n                objChartMain.chart.Shapes.UpdateShape(lineSettings.panelId, self.priceLines[lineType].id, shapeSettingsArray, true);\r\n\r\n                if (lineSettings.allowDragLine && chartParams.additionalStartArgs.allowDragLine) {\r\n                    objChartMain.chart.Shapes.UpdateShape(lineSettings.panelId, self.priceLines[lineType].id, [\"movewithmouse\", true, \"callback\", onPriceLineMoved]);\r\n                }\r\n            }\r\n\r\n            function deletePriceLine(lineType) {\r\n                function deletePriceLineFunction() {\r\n                    var lineSettings = chartParams.startSettings.priceLines[lineType];\r\n\r\n                    if (self.priceLines[lineType]) {\r\n                        objChartMain.chart.Shapes.DeleteHLine(lineSettings.panelId, self.priceLines[lineType].id);\r\n\r\n                        delete self.priceLines[lineType];\r\n                    }\r\n                }\r\n\r\n                isChartLoaded\r\n                    .then(deletePriceLineFunction)\r\n                    .fail(onPromiseRejected)\r\n                    .done();\r\n            }\r\n\r\n            var signalsOn = false;\r\n            function tcSignalsOn(instrument) {\r\n                if (!objChartMain.pivotLib) {\r\n                    objChartMain.pivotLib = new chartPivotLibrary(objChartMain, {\r\n                        onClearView: function onClearView() {\r\n                            data['tc-chart-signals'](Object.assign(data['tc-chart-signals'](), {\r\n                                active: false\r\n                            }));\r\n\r\n                            signalsOn = false;\r\n\r\n                            if (null !== stateObject.get('showChartSignals')) {\r\n                                stateObject.update('showChartSignals', signalsOn);\r\n                            }\r\n\r\n                        },\r\n                        onRenderTC: function onRenderTC() {\r\n                            data['tc-chart-signals'](Object.assign(data['tc-chart-signals'](), {\r\n                                active: true\r\n                            }));\r\n\r\n                            signalsOn = true;\r\n\r\n                            if (null !== stateObject.get('showChartSignals')) {\r\n                                stateObject.update('showChartSignals', signalsOn);\r\n                            }\r\n\r\n                        }\r\n                    });\r\n                }\r\n\r\n                objChartMain.tradingCentral.init.styleConfigpath = objChartMain.guiinit.rootpath + \"/ChartSignals/tc/tradingcentral.config.js\";\r\n\r\n                var strSymbol = instrument.signalName.trim();\r\n                var url = \"/webpl3/api/tradingsignals/GetChartTradingSignal/\" + strSymbol;\r\n\r\n                objChartMain.tradingCentral.api.render(url);\r\n            }\r\n\r\n            function tcSignalsOff() {\r\n                objChartMain.tradingCentral.api.hide();\r\n            }\r\n\r\n            function hasAgreedDisclaimer() {\r\n                var tsComplianceDate = cookieHandler.ReadCookie(\"TsComplianceDate\");\r\n                return tsComplianceDate !== null;\r\n            }\r\n\r\n            function toggleSignals(on, fromUserInteraction) {\r\n                var instrument = instrumentsManager.GetInstrument(objChartMain.chart.GetSymbol().id);\r\n\r\n                if (instrument.hasSignal && instrument.signalName && hasAgreedDisclaimer() && customer.prop.AreSignalsAllowed) {\r\n                    data['tc-chart-signals'](Object.assign(data['tc-chart-signals'](), {\r\n                        disabled: false\r\n                    }));\r\n                } else {\r\n                    tcSignalsOff()\r\n                    data['tc-chart-signals'](Object.assign(data['tc-chart-signals'](), {\r\n                        disabled: true\r\n                    }));\r\n                    return;\r\n                }\r\n\r\n                signalsOn = general.isBooleanType(on) ? on : !signalsOn;\r\n\r\n                if (!signalsOn) {\r\n                    tcSignalsOff();\r\n                } else {\r\n                    tcSignalsOn(instrument);\r\n                }\r\n\r\n                if (fromUserInteraction) {\r\n                    ko.postbox.publish(chartParams.startSettings.tracking.eventName, {\r\n                        'element': signalsOn ? eFxNetEvents.Trading_Central_Added : eFxNetEvents.Trading_Central_Removed\r\n                    });\r\n                }\r\n            }\r\n\r\n            function onChageSymbolHandler(parentid, symbolInfo) {\r\n                toggleSignals(signalsOn);\r\n                saveChartSettings({ instrumentId: symbolInfo.id });\r\n            }\r\n\r\n            function saveChartSettings(changes) {\r\n                if (!objChartMain.chart || !objChartMain.chart.GetTAObject) {\r\n                    return;\r\n                }\r\n\r\n                var settings;\r\n\r\n                if ('' === chartParams.additionalStartArgs.containerSuffix) {\r\n                    settings = getChartSettings();\r\n                } else {\r\n                    settings = chartLayoutSettings.GetSettings(chartParams.additionalStartArgs.containerSuffix);\r\n                    settings.chartSettings = getChartSettings();\r\n\r\n                    if (changes && changes.instrumentId) {\r\n                        settings.instrumentId = changes.instrumentId;\r\n                    }\r\n                }\r\n\r\n                chartLayoutSettings.UpdateSettings(chartParams.additionalStartArgs.containerSuffix, settings);\r\n            }\r\n\r\n            function getChartSettings() {\r\n                if (!objChartMain.chart.GetTAObject) {\r\n                    return null;\r\n                }\r\n\r\n                var config = {\r\n                    symbol: false,\r\n                    timeScale: true,\r\n                    drawing: true,\r\n                    indicators: true,\r\n                    priceType: true\r\n                };\r\n\r\n                return objChartMain.chart.GetTAObject(config.symbol, config.timeScale, config.drawing, config.indicators, config.priceType);\r\n            }\r\n\r\n            function registerInstrument(instrumentId) {\r\n                registrationManager.Update(eRegistrationListName.SingleQuote, instrumentId);\r\n            }\r\n\r\n            function onReadyComplete() {\r\n                //Init  indicator  favorites\r\n                var indicators = chartStudySettings.IndicatorsFavorites();\r\n\r\n                objChartMain.apiinit.indicators =general.isArrayType(indicators) && indicators.length ? indicators : chartParams.ExtraData.startSettings.appiinit_indicators;\r\n                objChartMain.apiinit.parentRelativeObjectID = chartParams.ExtraData.startSettings.ParentRelativeObjectID;\r\n            }\r\n\r\n            function onInitComplete() {\r\n                var defaultInstrument = tradingChartsManager.GetDefaultInstrument(chartParams.startSettings.SelectedInstrumentId),\r\n                    defaultInstrumentId;\r\n\r\n                if (!general.isEmptyType(defaultInstrument)) {\r\n                    defaultInstrumentId = defaultInstrument.id;\r\n                    objChartMain.chart.Precision = defaultInstrument.DecimalDigit; // calculate decimal digit based on bid and ask\r\n                } else {\r\n                    defaultInstrumentId = chartParams.startSettings.SelectedInstrumentId;\r\n                }\r\n\r\n                objChartMain.chart.TwoFingersPriceSlide = chartParams.startSettings.chart.TwoFingersPriceSlide;\r\n\r\n                objChartMain.chart.StudiesById.momentum.min = null;\r\n                objChartMain.chart.StudiesById.momentum.max = null;\r\n\r\n                // all these details should be changed only by methods\r\n                objChartMain.chart.Symbol = defaultInstrumentId;\r\n                objChartMain.chart.SymbolName = instrumentTranslationsManager.Long(defaultInstrumentId);\r\n                objChartMain.chart.Name = objChartMain.chart.SymbolName;\r\n\r\n                objChartMain.chart.AlignToLeft = chartParams.startSettings.chart.AlignToLeft; //Chart is aligned to left instead of centered\r\n                var chartSettings = getCustomerSavedChartSettings();\r\n                objChartMain.chart.TimeScale = chartSettings && chartSettings.TimeScale || chartParams.startSettings.chart.DefaultTimeScale;\r\n\r\n                objChartMain.chart.BigValuesFormat = null;\r\n                objChartMain.chart.DynMobileWick = chartParams.startSettings.chart.DynWick;\r\n                objChartMain.chart.DynWebWick = chartParams.startSettings.chart.DynWick;\r\n                objChartMain.chart.TimeZone = chartParams.startSettings.chart.TimeZone;\r\n                objChartMain.chart.ShowBarData = chartParams.startSettings.chart.ShowBarData;\r\n                objChartMain.chart.PriceChartType = chartParams.startSettings.chart.PriceChartType;\r\n                objChartMain.chart.WaterMark = chartParams.startSettings.chart.WaterMark;\r\n                objChartMain.chart.RequestTimeout = chartParams.startSettings.dataFeedSettings.requestTimeout;\r\n                objChartMain.chart.WaterMarkOnSnapshot = false;\r\n\r\n                objChartMain.chart.StudiesToLoad = []; //Don't load studies\r\n                objChartMain.chart.LineLastCloseMarkRadius = chartParams.startSettings.chart.LineLastCloseMarkRadius; //Turn on (integer value>0) last close marker by settings its radius to positive numner.\r\n\r\n                objChartMain.chart.DateFormat = chartParams.startSettings.dateFormatSettings;\r\n\r\n                objChartMain.chart.vAxis.boxWidth = 70;\r\n                objChartMain.chart.vAxis.hidePriceMarker = true;\r\n                objChartMain.chart.vAxis.hideCutLabel = true;\r\n\r\n                objChartMain.chart.LegendOnlyWithCrosshair = chartParams.startSettings.chart.LegendOnlyWithCrosshair;\r\n                objChartMain.patterns.panels.legend_study = objChartMain.patterns.panels.legend_study.replace(\"</span>:\", \"</span><span class='legend-study-separator1'>:<span>\");\r\n\r\n                chartZoomSettingsManagerInstance.Start(objChartMain);\r\n\r\n                objChartMain.chart.JSPush = {\r\n                    enableHistory: true,\r\n                    enableRT: true,\r\n                    enableSymbols: true,\r\n                    enableStudies: true,\r\n                    enableTemplates: true,\r\n                    funcFetchData: jsPushCallbackFunction\r\n                };\r\n\r\n                extraInitComplete();\r\n\r\n                ko.postbox.publish(eFxNetEvents.ChartInitComplete);\r\n            }\r\n\r\n            function onCreateComplete() {\r\n                extraCreateComplete();\r\n\r\n                objChartMain.events.toolbar.onCustomButtonClick = onCustomButtonClickHandle;\r\n\r\n                if (chartParams.startSettings.enableCrosshairMode) {\r\n                    objChartMain.chart.SetCrosshairMode(true);\r\n                }\r\n\r\n                isChartLoaded\r\n                    .then(toggleSignals.bind(null, stateObject.get('showChartSignals') || false))\r\n                    .fail(onPromiseRejected)\r\n                    .done();\r\n            }\r\n\r\n            function onPreloadStart() {\r\n                ko.postbox.publish(eFxNetEvents.ChartStart);\r\n\r\n                chartParams.ExtraData.additionalStartArgs.isLoadingData(true);\r\n            }\r\n\r\n            function onEndLoadingData() {\r\n                chartParams.ExtraData.additionalStartArgs.isLoadingData(false);\r\n\r\n                isChartLoadedDeferred.resolve();\r\n            }\r\n\r\n            function onPreloadFinished() {\r\n                extraPreloadFinished();\r\n\r\n                chartZoomSettingsManagerInstance\r\n                    .IsZoomRestored\r\n                    .then(function(){\r\n                        onEndLoadingData();\r\n                    })\r\n                    .done();\r\n            }\r\n\r\n            function configureTracking() {\r\n                if (!general.isObjectType(objChartMain.bi)) {\r\n                    return;\r\n                }\r\n\r\n                objChartMain.bi.stop();\r\n                objChartMain.bi.clear();\r\n\r\n                if (!general.isObjectType(chartParams.startSettings.tracking)) {\r\n                    return;\r\n                }\r\n\r\n                var doStart = false;\r\n\r\n                if (general.isStringType(chartParams.startSettings.tracking.eventName)) {\r\n                    doStart = true;\r\n\r\n                    objChartMain.events.bi.onGetBI = function (eventsArr) {\r\n                        ko.postbox.publish(chartParams.startSettings.tracking.eventName, { element: eventsArr[0].title });\r\n                    };\r\n                }\r\n\r\n                if (doStart) {\r\n                    objChartMain.bi.start(1);\r\n                }\r\n            }\r\n\r\n            var resizeChart = debounce(function resizeChartHandler() {\r\n                var chartContainer = document.getElementById(chartParams.startSettings.ParentRelativeObjectID);\r\n\r\n                if (!chartContainer) {\r\n                    return;\r\n                }\r\n\r\n                objChartMain.api.layout.changeSize(chartContainer.offsetWidth, chartContainer.offsetHeight);\r\n            }, 100);\r\n\r\n            function changeMode(mode) {\r\n                isChartLoaded\r\n                    .then(function changeModeInternal() {\r\n                        objChartMain.api.layout.changeMode(mode);\r\n                    })\r\n                    .fail(onPromiseRejected)\r\n                    .done();\r\n            }\r\n\r\n            function twoFingersPriceSlide(info) {\r\n                switch (info.element) {\r\n                    case 'expand-button':\r\n                        objChartMain.chart.EnableTwoFingersPriceSlide(false);\r\n                        break;\r\n\r\n                    case 'collapse-button':\r\n                        objChartMain.chart.EnableTwoFingersPriceSlide(true);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            function setSubscribers() {\r\n                self.subscribeTo(chartStudySettings.ComparesFavorites, function (compares) {\r\n                    objChartMain.api.props.chart.gui.favorites.compares = compares;\r\n                });\r\n\r\n                self.subscribeTo(chartStudySettings.IndicatorsFavorites, function (indicators) {\r\n                    objChartMain.api.props.chart.gui.favorites.indicators = indicators;\r\n                });\r\n\r\n                if (chartParams.startSettings.chart.TwoFingersPriceSlide) {\r\n                    self.addDisposable(ko.postbox.subscribe(\"deal-slip-chart-interaction\", twoFingersPriceSlide));\r\n                }\r\n            }\r\n\r\n            function disposeChartObjectDependents() {\r\n                if (chartZoomSettingsManagerInstance) {\r\n                    chartZoomSettingsManagerInstance.Dispose();\r\n                }\r\n            }\r\n\r\n            function stop() {\r\n                saveChartSettings();\r\n\r\n                objChartMain.events.chart.onCanSaveTA = null;\r\n                objChartMain.events.chart.onCanLoadTA = null;\r\n                objChartMain.events.chart.onChangeTimeframe = null;\r\n                objChartMain.events.chart.onPriceTypeChange = null;\r\n                objChartMain.events.chart.onChangeSymbol = null;\r\n                objChartMain.chart.JSPush = null;\r\n\r\n                objChartMain.chart.CleanUp(objChartMain);\r\n                objChartMain = null;\r\n            }\r\n\r\n            function dispose() {\r\n                if (chartParams) {\r\n                    if (chartParams.hasOwnProperty('additionalStartArgs') &&\r\n                        !general.isNullOrUndefined(chartParams.additionalStartArgs) &&\r\n                        chartParams.additionalStartArgs.hasOwnProperty('containerSuffix') &&\r\n                        !general.isNullOrUndefined(chartParams.additionalStartArgs.containerSuffix)) {\r\n                            var tcChartSignalsKey = 'tc-chart-signals-' + chartParams.additionalStartArgs.containerSuffix;\r\n                            stateObject.unset(tcChartSignalsKey);\r\n                    }\r\n                }\r\n\r\n                if (objChartMain.chart && objChartMain.chart.StopRTRequests) {\r\n                    objChartMain.chart.StopRTRequests();\r\n                }\r\n\r\n                tradingChartsManager.unsubscribe(guid);\r\n\r\n                disposeChartObjectDependents();\r\n\r\n                isChartLoaded\r\n                    .then(stop)\r\n                    .fail(onPromiseRejected)\r\n                    .finally(function () {\r\n                        parent.dispose.call(self);                  // inherited from DealViewModel\r\n                    })\r\n                    .done();\r\n\r\n                isChartLoadedDeferred\r\n                    .reject(chartLoaderRejectReasons.chartDisposed);\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Data: data,\r\n                ChangeSymbol: changeSymbol,\r\n                DeletePriceLine: deletePriceLine,\r\n                DrawPriceLine: drawPriceLine,\r\n                ResizeChart: resizeChart,\r\n                ChangeMode: changeMode\r\n            };\r\n        });\r\n\r\n        return AdvinionChartWrapper;\r\n    }\r\n);",
  "isBase64": false
}