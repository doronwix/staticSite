{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/Deals/ConvertedAmountViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/Deals/ConvertedAmountViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'FxNet/LogicLayer/Deal/DealMarginCalculator',\r\n        'initdatamanagers/Customer'\r\n    ],\r\n    function (require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            dealMarginCalculator = require('FxNet/LogicLayer/Deal/DealMarginCalculator'),\r\n            customer = require('initdatamanagers/Customer');\r\n\r\n        var ConvertedAmountViewModel = general.extendClass(KoComponentViewModel, function ConvertedAmountViewModelClass(_newDealData) {\r\n            var self = this,\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = this.Data, // inherited from KoComponentViewModel\r\n                newDealData = _newDealData || {};\r\n\r\n            var init = function (settings) {\r\n                parent.init.call(self, settings);   // inherited from KoComponentViewModel\r\n\r\n                setObservables();\r\n                setComputables();\r\n            };\r\n\r\n            var setObservables = function () {\r\n                var symbolName = ko.utils.unwrapObservable(newDealData.customerSymbolName);\r\n                data.currencySymbol = ko.observable(symbolName);\r\n                data.customerSymbolId = ko.observable(customer.prop.baseCcyId());\r\n            };\r\n\r\n            var setComputables = function () {\r\n                data.convertedDealAmount = self.createComputed(function () {\r\n                    var params = {\r\n                        'dealAmount': general.toNumeric(newDealData.selectedDealAmount()),\r\n                        'dealRate': general.toNumeric(newDealData.orderDir() == eOrderDir.Sell ? newDealData.bid() : newDealData.ask()),\r\n                        'quoteForOtherCcyToAccountCcy': newDealData.quoteForOtherCcyToAccountCcy(),\r\n                        'otherSymbol': newDealData.amountSymbol(),\r\n                        'baseSymbol': newDealData.hasOwnProperty('baseSymbol') ? newDealData.baseSymbol() : newDealData.baseSymbolId()\r\n                    };\r\n\r\n                    return dealMarginCalculator.DealAmount(params);\r\n                }).extend({ empty: true });\r\n\r\n                data.isCompleted = self.createComputed(function () {\r\n                    return !data.convertedDealAmount.isEmpty();\r\n                });\r\n\r\n                data.isBaseEqualWithCustomerCcy = self.createComputed(function () {\r\n                    var isBaseEqualWithCustomerCcy;\r\n                    newDealData.hasOwnProperty('baseSymbol') ? (isBaseEqualWithCustomerCcy = newDealData.baseSymbol() === customer.prop.baseCcyId()) :\r\n                        (isBaseEqualWithCustomerCcy = newDealData.baseSymbolId() === customer.prop.baseCcyId());\r\n                    return isBaseEqualWithCustomerCcy;\r\n\r\n                });\r\n            };\r\n\r\n            var dispose = function () {\r\n                parent.dispose.call(self);\r\n            };\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose\r\n            };\r\n        });\r\n\r\n        var createViewModel = function (params) {\r\n            var viewModel = new ConvertedAmountViewModel(params);\r\n            viewModel.init();\r\n\r\n            return viewModel;\r\n        };\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            }\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}