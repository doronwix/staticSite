{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/ChangePasswordViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/ChangePasswordViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'registration/ChangePasswordModule',\r\n        'modules/permissionsmodule',\r\n        'initdatamanagers/Customer',\r\n        'devicemanagers/ViewModelsManager',\r\n        'StateObject!Setting'\r\n    ],\r\n    function (require) {\r\n        var ko = require('knockout'),\r\n            ChangePassword = require('registration/ChangePasswordModule'),\r\n            permissionsModule = require('modules/permissionsmodule'),\r\n            customer = require(\"initdatamanagers/Customer\"),\r\n            viewModelsManager = require('devicemanagers/ViewModelsManager'),\r\n            settingStateObject = require('StateObject!Setting');\r\n\r\n        function createViewModel() {\r\n            var isCollapsed = ko.observable(true);\r\n\r\n            ChangePassword.init(true);\r\n\r\n            isOpenCollapsed();\r\n\r\n            if (!settingStateObject.get(\"AccountHubSetting\")) {\r\n                settingStateObject.set(\"AccountHubSetting\", null);\r\n            }\r\n\r\n            settingStateObject.subscribe(\"AccountHubSetting\", function (view) {\r\n                isCollapsed(view !== eViewTypes.vChangePassword);\r\n            });\r\n\r\n            function isOpenCollapsed() {\r\n                if (customer.prop.isDemo) {\r\n                    return isCollapsed(true);\r\n                }\r\n\r\n                if (viewModelsManager.VManager.GetViewArgs(eViewTypes.vChangePassword) === eViewTypes.vChangePassword) {\r\n                    isCollapsed(false);\r\n                }\r\n            }\r\n\r\n            function collapsedToggle() {\r\n                if (customer.prop.isDemo) {\r\n                    viewModelsManager.VManager.RedirectToForm(eForms.Settings, eViewTypes.vChangePassword);\r\n                    return;\r\n                }\r\n\r\n                var isPermitted = permissionsModule.CheckPermissions(\"changePassword\");\r\n\r\n                if (!isPermitted) {\r\n                    AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, Dictionary.GetItem(\"GenericAlert\"), Dictionary.GetItem('Forbidden'), null);\r\n                    AlertsManager.PopAlert(AlertTypes.ServerResponseAlert);\r\n                }\r\n                else {\r\n                    isCollapsed(!isCollapsed());\r\n                }\r\n            }\r\n\r\n            function isVisible() {\r\n                return permissionsModule.CheckPermissions(\"changePassword\");\r\n            }\r\n\r\n            return {\r\n                dispose: ChangePassword.unsetDomEvents,\r\n                CollapsedToggle: collapsedToggle,\r\n                isCollapsed: isCollapsed,\r\n                IsVisible: isVisible\r\n            };\r\n        }\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            }\r\n        };\r\n    }\r\n);",
  "isBase64": false
}