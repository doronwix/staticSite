{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/devices/web/uilayer/viewmodels/Deals/Modules/EditClosingLimitModule.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'deviceviewmodels/Deals/Modules/EditClosingLimitModule',\r\n    [\r\n        'require',\r\n        'Dictionary',\r\n        'knockout',\r\n        'handlers/general',\r\n        'managers/CustomerProfileManager',\r\n        'cachemanagers/activelimitsmanager',\r\n        'StateObject!Transaction',\r\n        'viewmodels/Deals/EditClosingLimitBaseViewModel'\r\n    ],\r\n    function EditClosingLimitModuleDefault(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            Dictionary = require('Dictionary'),\r\n            customerProfileManager = require('managers/CustomerProfileManager'),\r\n            activeLimitsManager = require('cachemanagers/activelimitsmanager'),\r\n            stateObject = require('StateObject!Transaction'),\r\n            EditClosingLimitBaseViewModel = require('viewmodels/Deals/EditClosingLimitBaseViewModel');\r\n\r\n        var EditClosingLimitModule = general.extendClass(EditClosingLimitBaseViewModel, function EditClosingLimitModuleClass() {\r\n            var self = this,\r\n                parent = this.parent, // inherited from EditClosingLimitBaseViewModel\r\n                data = this.Data, // inherited from EditClosingLimitBaseViewModel\r\n                validationModel = {},\r\n                expirationDateModel = parent.ExpirationDate,\r\n                setLimitsModel = parent.SetLimitsModel;\r\n\r\n            var init = function (customSettings) {\r\n                if (!stateObject.containsKey(\"stateObjectIsReadyDefer\")) {\r\n                    stateObject.set('stateObjectIsReadyDefer', Q.defer());\r\n                }\r\n\r\n                parent.init.call(self, customSettings);\r\n\r\n                setObservables();\r\n                setComputables();\r\n                setSubscribers();\r\n\r\n                updateViewModelData();\r\n\r\n                setLimitsModel.Start(setLimitsModelDependencies);\r\n\r\n                setViewByUserProfile();\r\n\r\n                stateObject.get('stateObjectIsReadyDefer').resolve();\r\n            };\r\n\r\n            var setObservables = function () {\r\n                data.enableSLLimit = ko.observable(false);\r\n                data.enableTPLimit = ko.observable(false);\r\n                data.showTools = stateObject.set('showTools', ko.observable(false));\r\n            };\r\n\r\n            var setComputables = function () {\r\n                data.focusOnSlRate = self.createComputed(function () {\r\n                    return setLimitsModel.Data.curSlActiveTab() === eSetLimitsTabs.Rate;\r\n                });\r\n\r\n                data.focusOnTpRate = self.createComputed(function () {\r\n                    return setLimitsModel.Data.curTpActiveTab() === eSetLimitsTabs.Rate;\r\n                });\r\n            };\r\n\r\n            var setSubscribers = function () {\r\n                self.subscribeTo(data.showTools, function (isExpanded) {\r\n                    var profileCustomer = customerProfileManager.ProfileCustomer();\r\n                    profileCustomer.editClosingLimitTools = Number(isExpanded);\r\n                    customerProfileManager.ProfileCustomer(profileCustomer);\r\n                });\r\n            };\r\n\r\n            var updateViewModelData = function () {\r\n                parent.updateViewModelData();\r\n\r\n                if (data.selectedDeal()) {\r\n                    var closingLimitId;\r\n\r\n                    if (data.limitType() === eLimitType.StopLoss) {\r\n                        closingLimitId = data.selectedDeal().slID;\r\n                    }\r\n                    else {\r\n                        closingLimitId = data.selectedDeal().tpID;\r\n                    }\r\n\r\n                    data.closingLimit(activeLimitsManager.limits.GetItem(closingLimitId));\r\n\r\n                    if (!general.isNullOrUndefined(data.closingLimit()) && !general.isEmptyValue(data.closingLimit().expirationDate)) {\r\n                        expirationDateModel.SetOrder(closingLimitId);\r\n                    }\r\n                }\r\n            };\r\n\r\n            var setViewByUserProfile = function () {\r\n                var profileCustomer = customerProfileManager.ProfileCustomer();\r\n                data.showTools(profileCustomer.editClosingLimitTools === 1);\r\n            };\r\n\r\n            var setLimitsModelDependencies = function () {\r\n                validationModel.Limits = parent.getLimitsValidationModel();\r\n\r\n                parent.createAmountFieldsWrappers();\r\n\r\n                var slRateTooltip = ko.observable(false);\r\n                var tpRateTooltip = ko.observable(false);\r\n\r\n                // SL rate tooltip validation\r\n                setLimitsModel.Data.stopLossRate.extend({\r\n                    tooltipValidation: {\r\n                        message: Dictionary.GetItem(\"txtRateValidationTooltip\", null, \"\"),\r\n                        showTooltip: function () {\r\n                            return (setLimitsModel.Data.curSlActiveTab() === eSetLimitsTabs.Rate || setLimitsModel.Data.curSlActiveTab() === setLimitsModel.Data.defaultTab) && slRateTooltip();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsModel.Data.stopLossRate.tooltipClosed, function (isClosed) {\r\n                    if (isClosed) {\r\n                        slRateTooltip(false);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsModel.Data.stopLossRate, function () {\r\n                    slRateTooltip(false);\r\n                });\r\n\r\n                // TP rate tooltip validation\r\n                setLimitsModel.Data.takeProfitRate.extend({\r\n                    tooltipValidation: {\r\n                        message: Dictionary.GetItem(\"txtRateValidationTooltip\", null, \"\"),\r\n                        showTooltip: function () {\r\n                            return (setLimitsModel.Data.curTpActiveTab() === eSetLimitsTabs.Rate || setLimitsModel.Data.curTpActiveTab() === setLimitsModel.Data.defaultTab) && tpRateTooltip();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsModel.Data.takeProfitRate.tooltipClosed, function (isClosed) {\r\n                    if (isClosed) {\r\n                        tpRateTooltip(false);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsModel.Data.takeProfitRate, function () {\r\n                    tpRateTooltip(false);\r\n                });\r\n\r\n                // reset toolpip visibility\r\n                self.addDisposable(\r\n                    ko.postbox.subscribe('edit-deal-limit-show-validation-tooltips', function () {\r\n                        slRateTooltip(true);\r\n                        tpRateTooltip(true);\r\n                    })\r\n                );\r\n\r\n                // ------------------------------------------------------------\r\n                // Stop Loss\r\n                // ------------------------------------------------------------\r\n                self.subscribeTo(setLimitsModel.Data.stopLossPercent, function (stopLossPercent) {\r\n                    data.displaySlPercentSymbol(!general.isEmptyValue(stopLossPercent) && stopLossPercent !== \"NA\");\r\n                });\r\n\r\n                self.subscribeTo(data.stopLossInCustomerCcy, function (stopLossInCustomerCcy) {\r\n                    data.displaySlAmountCcySymbol(!general.isEmptyValue(stopLossInCustomerCcy) && stopLossInCustomerCcy !== \"NA\");\r\n                });\r\n\r\n                // ------------------------------------------------------------\r\n                // Take Profit\r\n                // ------------------------------------------------------------\r\n                self.subscribeTo(setLimitsModel.Data.takeProfitPercent, function (takeProfitPercent) {\r\n                    data.displayTpPercentSymbol(!general.isEmptyValue(takeProfitPercent) && takeProfitPercent !== \"NA\");\r\n                });\r\n\r\n                self.subscribeTo(data.takeProfitInCustomerCcy, function (takeProfitInCustomerCcy) {\r\n                    data.displayTpAmountCcySymbol(!general.isEmptyValue(takeProfitInCustomerCcy) && takeProfitInCustomerCcy !== \"NA\");\r\n                });\r\n\r\n                data.limitsReady(true);\r\n            };\r\n\r\n            var dispose = function () {\r\n                parent.dispose.call(self);\r\n            };\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Data: data,\r\n                TPField: setLimitsModel.TPField,\r\n                SLField: setLimitsModel.SLField,\r\n                SetLimitsInfo: setLimitsModel.Data,\r\n                SetLimitsViewProperties: setLimitsModel.ViewProperties\r\n            };\r\n        });\r\n\r\n        return {\r\n            ViewModel: EditClosingLimitModule\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}