{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/Limits/AmountFieldsWrapper.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/Limits/AmountFieldsWrapper',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'calculators/LimitValuesCalculator'\r\n    ],\r\n    function AmountFieldsWrapperDef(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            LimitValuesCalculator = require('calculators/LimitValuesCalculator');\r\n\r\n        var AmountFieldsWrapper = general.extendClass(KoComponentViewModel, function AmountFieldsWrapperClass() {\r\n            var self = this,\r\n                parent = this.parent,\r\n                data = this.Data,\r\n                setLimitsModel,\r\n                parentData,\r\n                slAmount = ko.observable(\"\"),\r\n                tpAmount = ko.observable(\"\"),\r\n                slAmountIsUpdating = ko.observable(false),\r\n                tpAmountIsUpdating = ko.observable(false);\r\n\r\n            function init(limitsModel, dealData) {\r\n                setLimitsModel = limitsModel;\r\n                parentData = dealData;\r\n\r\n                setComputables();\r\n                setSubscribers();\r\n                setValidation();\r\n            }\r\n\r\n            function setComputables() {\r\n                data.stopLossInCustomerCcy = self.createComputed({\r\n                    read: function read() {\r\n                        var isAmountTabSelected = setLimitsModel.Data.curSlActiveTab() == eSetLimitsTabs.Amount || setLimitsModel.Data.curSlActiveTab() == setLimitsModel.Data.defaultTab,\r\n                            rawValue,\r\n                            amount = \"\";\r\n\r\n                        if (!isAmountTabSelected) {\r\n                            rawValue = setLimitsModel.Data.ccySLAmount();\r\n                        }\r\n                        else {\r\n                            rawValue = slAmount();\r\n                        }\r\n\r\n                        if (rawValue === \"NA\") {\r\n                            return rawValue;\r\n                        }\r\n\r\n                        if (rawValue !== \"\" && !isNaN(rawValue)) {\r\n                            amount = Math.abs(Number(rawValue));\r\n                            amount = Math.ceil(amount);\r\n                        }\r\n\r\n                        return amount;\r\n                    },\r\n                    write: function write(value) {\r\n                        var isAmountTabSelected = setLimitsModel.Data.curSlActiveTab() == eSetLimitsTabs.Amount || setLimitsModel.Data.curSlActiveTab() == setLimitsModel.Data.defaultTab,\r\n                            isEmptyValue = value === \"\" || 'NA'.indexOf(value) > -1 || (general.isStringType(value) && value.indexOf(\"NA\") > -1),\r\n                            isValidValue = !isNaN(value),\r\n                            quoteForAccountCcyToOtherCcy = parentData.quoteForAccountCcyToOtherCcy(),\r\n                            amount = \"\",\r\n                            previousAmount = slAmount(),\r\n                            previousResult = setLimitsModel.Data.stopLossAmount(),\r\n                            result;\r\n\r\n                        if (!isAmountTabSelected) {\r\n                            return;\r\n                        }\r\n\r\n                        if (isEmptyValue) {\r\n                            result = \"\";\r\n                        }\r\n                        else if (isValidValue) {\r\n                            amount = parseFloat(value);\r\n                        }\r\n                        else {\r\n                            amount = previousAmount;\r\n                        }\r\n\r\n                        if (!isEmptyValue && amount !== \"\" && !isNaN(amount)) {\r\n                            // Convert only if there is a valid value\r\n                            result = LimitValuesCalculator.CalculateAmount(amount, quoteForAccountCcyToOtherCcy, eLimitType.StopLoss);\r\n                            result = Math.abs(result);\r\n                        }\r\n\r\n                        slAmountIsUpdating(true);\r\n                        slAmount(amount);\r\n\r\n                        if (amount === previousAmount) {\r\n                            slAmount.notifySubscribers(amount);\r\n                        }\r\n\r\n                        setLimitsModel.Data.stopLossAmount(result);\r\n\r\n                        if (result === previousResult) {\r\n                            setLimitsModel.Data.stopLossAmount.notifySubscribers(result);\r\n                        }\r\n\r\n                        slAmountIsUpdating(false);\r\n                    }\r\n                });\r\n\r\n                data.takeProfitInCustomerCcy = self.createComputed({\r\n                    read: function read() {\r\n                        var isAmountTabSelected = setLimitsModel.Data.curTpActiveTab() == eSetLimitsTabs.Amount || setLimitsModel.Data.curTpActiveTab() == setLimitsModel.Data.defaultTab,\r\n                            rawValue,\r\n                            amount = \"\";\r\n\r\n                        if (!isAmountTabSelected) {\r\n                            rawValue = setLimitsModel.Data.ccyTPAmount();\r\n                        } else {\r\n                            rawValue = tpAmount();\r\n                        }\r\n\r\n                        if (rawValue === \"NA\") {\r\n                            return rawValue;\r\n                        }\r\n\r\n                        if (rawValue !== \"\" && !isNaN(rawValue)) {\r\n                            amount = Math.abs(Number(rawValue));\r\n                            amount = Math.ceil(amount);\r\n                        }\r\n\r\n                        return amount;\r\n                    },\r\n                    write: function write(value) {\r\n                        var isAmountTabSelected = setLimitsModel.Data.curTpActiveTab() == eSetLimitsTabs.Amount || setLimitsModel.Data.curTpActiveTab() == setLimitsModel.Data.defaultTab,\r\n                            isEmptyValue = value === \"\" || 'NA'.indexOf(value) > -1 || (general.isStringType(value) && value.indexOf(\"NA\") > -1),\r\n                            isValidValue = !isNaN(value),\r\n                            quoteForAccountCcyToOtherCcy = parentData.quoteForAccountCcyToOtherCcy(),\r\n                            amount = \"\",\r\n                            previousAmount = tpAmount(),\r\n                            previousResult = setLimitsModel.Data.takeProfitAmount(),\r\n                            result;\r\n\r\n                        if (!isAmountTabSelected) {\r\n                            return;\r\n                        }\r\n\r\n                        if (isEmptyValue) {\r\n                            result = \"\";\r\n                        }\r\n                        else if (isValidValue) {\r\n                            amount = parseFloat(value);\r\n                        }\r\n                        else {\r\n                            amount = previousAmount;\r\n                        }\r\n\r\n                        if (!isEmptyValue && amount !== \"\" && !isNaN(amount)) {\r\n                            // Convert only if there is a valid value\r\n                            result = LimitValuesCalculator.CalculateAmount(amount, quoteForAccountCcyToOtherCcy, eLimitType.TakeProfit);\r\n                            result = Math.abs(result);\r\n                        }\r\n\r\n                        tpAmountIsUpdating(true);\r\n                        tpAmount(amount);\r\n\r\n                        if (amount === previousAmount) {\r\n                            tpAmount.notifySubscribers(amount);\r\n                        }\r\n\r\n                        setLimitsModel.Data.takeProfitAmount(result);\r\n\r\n                        if (result === previousResult) {\r\n                            setLimitsModel.Data.takeProfitAmount.notifySubscribers(result);\r\n                        }\r\n\r\n                        tpAmountIsUpdating(false);\r\n                    }\r\n                });\r\n            }\r\n\r\n            function setSubscribers() {\r\n                // Stop Loss\r\n                self.subscribeTo(setLimitsModel.Data.ccySLAmount, function onCcySLAmountChanged(value) {\r\n                    var isAmountTabSelected = setLimitsModel.Data.curSlActiveTab() == eSetLimitsTabs.Amount ||\r\n                        setLimitsModel.Data.curSlActiveTab() == setLimitsModel.Data.defaultTab;\r\n\r\n                    if (!slAmountIsUpdating()) {\r\n                        if ((isAmountTabSelected && (general.isEmpty(slAmount()) || isNaN(slAmount()))) || !isAmountTabSelected) {\r\n                            slAmount(value);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Take Profit\r\n                self.subscribeTo(setLimitsModel.Data.ccyTPAmount, function onCcyTPAmountChanged(value) {\r\n                    var isAmountTabSelected = setLimitsModel.Data.curTpActiveTab() == eSetLimitsTabs.Amount ||\r\n                        setLimitsModel.Data.curTpActiveTab() == setLimitsModel.Data.defaultTab;\r\n\r\n                    if (!tpAmountIsUpdating()) {\r\n                        if ((isAmountTabSelected && (general.isEmpty(tpAmount()) || isNaN(tpAmount()))) || !isAmountTabSelected) {\r\n                            tpAmount(value);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            function setValidation() {\r\n                // apply validator\r\n                data.stopLossInCustomerCcy.extend({\r\n                    validation: {\r\n                        validator: function validate() {\r\n                            return setLimitsModel.Data.stopLossAmount.isValid();\r\n                        },\r\n                        params: setLimitsModel.Data.stopLossAmount\r\n                    }\r\n                });\r\n\r\n                data.stopLossInCustomerCcy.extend({\r\n                    incremental: {\r\n                        ranges: [\r\n                            { from: 0, to: 10, step: 1 },                    // units\r\n                            { from: 10, to: 100, step: 5 },                  // tens\r\n                            { from: 100, to: 1000, step: 50 },               // hundreds\r\n                            { from: 1000, to: Number.MAX_VALUE, step: 500 }  // thousands\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                data.stopLossInCustomerCcy.extend({\r\n                    notify: \"always\"\r\n                });\r\n\r\n                // apply validator\r\n                data.takeProfitInCustomerCcy.extend({\r\n                    validation: {\r\n                        validator: function validate() {\r\n                            return setLimitsModel.Data.takeProfitAmount.isValid();\r\n                        },\r\n                        params: setLimitsModel.Data.takeProfitAmount\r\n                    }\r\n                });\r\n\r\n                data.takeProfitInCustomerCcy.extend({\r\n                    incremental: {\r\n                        ranges: [\r\n                            { from: 0, to: 10, step: 1 },                    // units\r\n                            { from: 10, to: 100, step: 5 },                  // tens\r\n                            { from: 100, to: 1000, step: 50 },               // hundreds\r\n                            { from: 1000, to: Number.MAX_VALUE, step: 500 }  // thousands\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                data.takeProfitInCustomerCcy.extend({\r\n                    notify: \"always\"\r\n                });\r\n            }\r\n\r\n            function dispose() {\r\n                parent.dispose.call(self);\r\n\r\n                setLimitsModel = null;\r\n                parentData = null;\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                Data: data,\r\n                dispose: dispose\r\n            };\r\n        });\r\n\r\n        return AmountFieldsWrapper;\r\n    }\r\n);\r\n",
  "isBase64": false
}