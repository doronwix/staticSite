{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/FxNet/LogicLayer/GeneralManager/TradingInfoConnManager.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'FxNet/LogicLayer/GeneralManager/TradingInfoConnManager',\r\n    [\r\n        'generalmanagers/ErrorManager',\r\n        'dataaccess/DalTradingInfoSrv',\r\n        'configuration/initconfiguration',\r\n        'modules/systeminfo',\r\n        'initdatamanagers/Customer'\r\n    ],\r\n    function (ErrorManager, DalTradingInfoSrv, config, systemInfo, customer) {\r\n        var economicCalendarConfig = config.EconomicCalendarConfiguration,\r\n            sentimentsConfig = config.MarketInfoConfiguration,\r\n            timerId,\r\n            isDisposing = false,\r\n            reconnectCounter = 0,\r\n            dalSrv;\r\n\r\n        function disconnect() {\r\n            dalSrv.Disconnect();\r\n        }\r\n\r\n        function unsubscribe(hubName, args) {\r\n            dalSrv.Unsubscribe(hubName, args);\r\n        }\r\n\r\n        function subscribe(hubName, args) {\r\n            dalSrv.Subscribe(hubName, args);\r\n        }\r\n\r\n        function subscribeByGroup(hubName, args, groupid) {\r\n            dalSrv.SubscribeByGroup(hubName, args, groupid);\r\n        }\r\n\r\n        function connect() {\r\n            ErrorManager.onWarning(\"TradingInfoConnManager/connect\", \"connect\")\r\n            customer.GetToken().then(dalSrv.Connect);\r\n        }\r\n\r\n        function init() {\r\n            dalSrv = new DalTradingInfoSrv(systemInfo.get('tradingInfoSrvUrl'));\r\n\r\n            var disconnectCallback = function () {\r\n                ErrorManager.onWarning(\"TradingInfoConnManager/disconnectCallback\", \"isDisposing=\" + isDisposing + \" timerId=\" + timerId + \" reconnectCounter=\" + reconnectCounter)\r\n\r\n                if (isDisposing) {\r\n                    return;\r\n                }\r\n\r\n                if (timerId) {\r\n                    clearTimeout(timerId);\r\n                }\r\n\r\n                timerId = setTimeout(function () {\r\n                    reconnectCounter++;\r\n\r\n                    //max 5 reconnects for all hubs\r\n                    if (reconnectCounter < 5) {\r\n                        customer.GetToken().then(dalSrv.Connect);\r\n                    }\r\n                }, 5000); // Restart connection after 5 seconds.\r\n            };\r\n\r\n            dalSrv.InitConnection(disconnectCallback);\r\n            dalSrv.CreateHub(economicCalendarConfig.hubname);\r\n            dalSrv.CreateHub(sentimentsConfig.hubname);\r\n\r\n            connect();\r\n        }\r\n\r\n        function updateCallbacks(hubName, messageReceivedCallback, serviceAvailableCallback) {\r\n            dalSrv.UpdateCallbacks(hubName, messageReceivedCallback, serviceAvailableCallback);\r\n        }\r\n\r\n        function dispose() {\r\n            isDisposing = true;\r\n\r\n            disconnect();\r\n        }\r\n\r\n        init();\r\n\r\n        return {\r\n            UpdateCallbacks: updateCallbacks,\r\n            Subscribe: subscribe,\r\n            SubscribeByGroup: subscribeByGroup,\r\n            Unsubscribe: unsubscribe,\r\n            Dispose: dispose,\r\n            Connect: connect\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}