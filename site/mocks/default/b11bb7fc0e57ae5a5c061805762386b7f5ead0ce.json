{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/FxNet/LogicLayer/Deal/SentimentsConnManager.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'FxNet/LogicLayer/Deal/SentimentsConnManager',\r\n    [\r\n        'configuration/initconfiguration',\r\n        'FxNet/LogicLayer/GeneralManager/TradingInfoConnManager',\r\n        'StateObject!SentimentsConnManager',\r\n    ],\r\n    function SentimentsConnManager(initConfiguration, tradingInfoConnManager, stateObject) {\r\n        var hubname = initConfiguration.MarketInfoConfiguration.hubname,\r\n            clientCallback,\r\n            subscribeGroups = {}; //the key is instrumentid\r\n\r\n        function messageReceivedCallback(message, instrumentid) {\r\n            if (!subscribeGroups[instrumentid]) {\r\n                return;\r\n            }\r\n\r\n            subscribeGroups[instrumentid].done = true;\r\n\r\n            if (!message) {\r\n                return;\r\n            }\r\n\r\n            if (typeof clientCallback === \"function\") {\r\n                clientCallback(message);\r\n            }\r\n        }\r\n\r\n        function setMessageReceivedCallback(callback) {\r\n            clientCallback = callback;\r\n        }\r\n\r\n        function reSubscribe() {\r\n            for (var instrumentId in subscribeGroups) {\r\n                if (subscribeGroups.hasOwnProperty(instrumentId)) {\r\n                    subscribeGroups[instrumentId].done = false;\r\n                    tradingInfoConnManager.Subscribe(hubname, subscribeGroups[instrumentId].args);\r\n                }\r\n            }\r\n        }\r\n\r\n        function subscribe(brokerId, instrumentId) {\r\n            var args = [brokerId, instrumentId];\r\n\r\n            subscribeGroups[instrumentId] = {\r\n                args: args,\r\n                done: false\r\n            };\r\n\r\n            tradingInfoConnManager.Subscribe(hubname, args);\r\n        }\r\n\r\n        function unsubscribe(brokerId, instrumentId) {\r\n            var args = [brokerId, instrumentId];\r\n\r\n            tradingInfoConnManager.Unsubscribe(hubname, args);\r\n        }\r\n\r\n        function dispose() {\r\n            stateObject.unset('IsServiceAvailable');\r\n            tradingInfoConnManager.Dispose();\r\n        }\r\n\r\n        function serviceAvailableCallback(stateAvalilableValue) {\r\n            var serviceAvailablilityPreviousStatus = stateObject.get('IsServiceAvailable'),\r\n                serviceAvailablilityCurrentStatus = !!stateAvalilableValue;\r\n\r\n            stateObject.update('IsServiceAvailable', serviceAvailablilityCurrentStatus);\r\n\r\n            if (!serviceAvailablilityPreviousStatus && serviceAvailablilityCurrentStatus) {\r\n                reSubscribe();\r\n            }\r\n        }\r\n\r\n        function init() {\r\n            stateObject.set('IsServiceAvailable', false);\r\n            tradingInfoConnManager.UpdateCallbacks(hubname, messageReceivedCallback, serviceAvailableCallback);\r\n        }\r\n\r\n        init();\r\n\r\n        return {\r\n            SetMessageReceivedCallback: setMessageReceivedCallback,\r\n            Subscribe: subscribe,\r\n            Unsubscribe: unsubscribe,\r\n            Dispose: dispose\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}