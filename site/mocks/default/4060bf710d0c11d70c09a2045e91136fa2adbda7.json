{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/Deals/InstrumentInfoViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/Deals/InstrumentInfoViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'Q',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'initdatamanagers/InstrumentsManager',\r\n        'initdatamanagers/Customer',\r\n        'dataaccess/dalInstruments',\r\n        'dataaccess/dalorder',\r\n        'modules/BuilderForInBetweenQuote',\r\n        'StateObject!Transaction',\r\n        'StateObject!ScheduleGroup',\r\n        'FxNet/LogicLayer/Deal/DealMarginCalculator',\r\n        'FxNet/LogicLayer/Deal/DealAmountLabel',\r\n        'FxNet/LogicLayer/Deal/InstrumentInfoLines'\r\n    ],\r\n    function InstrumentInfoDef(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            Q = require('Q'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            instrumentsManager = require('initdatamanagers/InstrumentsManager'),\r\n            customer = require('initdatamanagers/Customer'),\r\n            dalInstruments = require('dataaccess/dalInstruments'),\r\n            dalOrders = require('dataaccess/dalorder'),\r\n            BuilderForInBetweenQuote = require('modules/BuilderForInBetweenQuote'),\r\n            stateObject = require('StateObject!Transaction'),\r\n            scheduleGroupStateObject = require('StateObject!ScheduleGroup'),\r\n            dealMarginCalculator = require('FxNet/LogicLayer/Deal/DealMarginCalculator'),\r\n            DealAmountLabel = require('FxNet/LogicLayer/Deal/DealAmountLabel'),\r\n            instrumentInfoLines = require('FxNet/LogicLayer/Deal/InstrumentInfoLines');\r\n\r\n        var InstrumentInfoViewModel = general.extendClass(KoComponentViewModel, function InstrumentInfoClass() {\r\n            var self = this,\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = this.Data, // inherited from KoComponentViewModel\r\n                usdId = 47,\r\n                cachedOvernightFinancingKey = 'cachedOvernightFinancing',\r\n                newDealData = stateObject.getAll(),\r\n                minDealAmountPrefixKey = 'minDealAmountLabel_',\r\n                maxDealAmountPrefixKey = 'maxDealAmountLabel_';\r\n\r\n            function init() {\r\n                data.isNotIslamicDealPermit = customer.prop.dealPermit != eDealPermit.Islamic;\r\n\r\n                setObservables();\r\n                setComputables();\r\n                setSubscribers();\r\n\r\n                setInBetweenRate();\r\n                getDealMarginDetails();\r\n\r\n                var currentInstrumentId = ko.utils.unwrapObservable(newDealData.selectedInstrument);\r\n                updateObservables(currentInstrumentId);\r\n            }\r\n\r\n            function setObservables() {\r\n                data.principalOfLong = ko.observable();\r\n                data.principalOfShort = ko.observable();\r\n                data.conversionRate = ko.observable();\r\n\r\n                var symbolName = ko.utils.unwrapObservable(newDealData.customerSymbolName);\r\n                data.currencySymbol = ko.observable(symbolName);\r\n                data.customerSymbolId = ko.observable(customer.prop.baseCcyId());\r\n\r\n                data.dividendDate = ko.observable('');\r\n                data.dividendAmount = ko.observable('');\r\n                data.displayToleranceInSecondTable = ko.observable(false);\r\n                data.otherInstrumentSymbol = ko.observable();\r\n                data.rolloverDate = ko.observable('');\r\n                data.marketPriceTolerance = ko.observable('');\r\n                data.overnightFinancingPercentageSell = ko.observable();\r\n                data.overnightFinancingPercentageBuy = ko.observable();\r\n                data.principalOfLongPercentage = ko.observable();\r\n                data.principalOfShortPercentage = ko.observable();\r\n                data.overnightFinancingTimeGMT = ko.observable('');\r\n                data.weekendFinancingType = ko.observable(eWeekendFinancingTypes.None);\r\n                data.maxDealAmountLabel = ko.observable('');\r\n                data.minDealAmountLabel = ko.observable('');\r\n\r\n                data.requiredMargin = ko.observable('');\r\n                data.offHoursRequiredMargin = ko.observable('');\r\n                data.maximumLeverage = ko.observable('');\r\n                data.pipValue = ko.observable('');\r\n                data.maxAmount = ko.observable('');\r\n                data.minAmount = ko.observable('');\r\n                data.displayOffHoursRequiredMargin = ko.observable(false);\r\n                data.isStock = ko.observable(false);\r\n            }\r\n\r\n            function setInBetweenRate() {\r\n                BuilderForInBetweenQuote\r\n                    .GetInBetweenQuote(usdId, customer.prop.baseCcyId())\r\n                    .then(function onInBetweenQuoteReceived(response) {\r\n                        data.conversionRate(response.bid());\r\n                    })\r\n                    .done();\r\n            }\r\n\r\n            function updateObservables(instrumentId) {\r\n                var instrument = instrumentsManager.GetInstrument(instrumentId);\r\n\r\n                if (instrument) {\r\n                    data.dividendDate(instrument.getInstrumentDividendDate());\r\n                    data.dividendAmount(instrument.getInstrumentDividendAmount());\r\n                    data.otherInstrumentSymbol(instrument.otherSymbol);\r\n                    data.rolloverDate(instrument.getInstrumentRolloverDate());\r\n                    data.pipValue(1 / Math.pow(10, instrument.PipDigit));\r\n                    data.isStock(instrument.isStock);\r\n\r\n                    var priceTolerance = instrument.marketPriceTolerance * data.pipValue();\r\n                    data.marketPriceTolerance(priceTolerance == 0 ? 0 : Format.toRate(priceTolerance, true, instrumentId));\r\n\r\n                    updatePositionsInTable();\r\n\r\n                    instrumentsManager\r\n                        .GetUpdatedInstrumentWithDealMinMaxAmounts(instrumentId)\r\n                        .then(function onUpdatedInstrumentsReceived(response) {\r\n                            data.minAmount(Format.formatDealAmount(response.dealMinMaxAmounts[0]));\r\n                            data.maxAmount(Format.formatDealAmount(response.dealMinMaxAmounts[1]));\r\n                        })\r\n                        .done();\r\n\r\n                    var maxResult = DealAmountLabel.Translate(instrument, maxDealAmountPrefixKey);\r\n                    data.maxDealAmountLabel(maxResult.label);\r\n\r\n                    var minResult = DealAmountLabel.Translate(instrument, minDealAmountPrefixKey);\r\n                    data.minDealAmountLabel(minResult.label);\r\n                }\r\n            }\r\n\r\n            function setSubscribers() {\r\n                self.subscribeTo(newDealData.selectedInstrument, function onInstrumentChanged(instrumentId) {\r\n                    updateObservables(instrumentId);\r\n                    getDealMarginDetails();\r\n                });\r\n            }\r\n\r\n            function hasValuesOverNightFinancing(cachedOvernightFinancing) {\r\n                return (\r\n                    cachedOvernightFinancing &&\r\n                    cachedOvernightFinancing.long &&\r\n                    cachedOvernightFinancing.short &&\r\n                    cachedOvernightFinancing.longPercentage &&\r\n                    cachedOvernightFinancing.shortPercentage &&\r\n                    (cachedOvernightFinancing.time - new Date().getTime() <= 3600000)\r\n                );\r\n            }\r\n\r\n            function setCachedOverNightFinancing(overnightFinancingItem, instrumentKey) {\r\n                if (general.isNullOrUndefined(overnightFinancingItem)) {\r\n                    return;\r\n                }\r\n\r\n                var cachedOvernightFinancing = null;\r\n\r\n                if (!stateObject.containsKey(cachedOvernightFinancingKey)) {\r\n                    cachedOvernightFinancing = {};\r\n                    cachedOvernightFinancing[instrumentKey] = overnightFinancingItem;\r\n                    stateObject.set(cachedOvernightFinancingKey, cachedOvernightFinancing);\r\n                } else {\r\n                    cachedOvernightFinancing = stateObject.get(cachedOvernightFinancingKey);\r\n                    cachedOvernightFinancing[instrumentKey] = overnightFinancingItem;\r\n                    stateObject.update(cachedOvernightFinancingKey, cachedOvernightFinancing);\r\n                }\r\n            }\r\n\r\n            function getOvernightFinancingPrincipal(dealAmount, instrumentId) {\r\n                var defer = Q.defer();\r\n                var cachedOvernightFinancingItem = null;\r\n                var instrumentKey = instrumentId + '_' + dealAmount;\r\n\r\n                if (stateObject.containsKey(cachedOvernightFinancingKey)) {\r\n                    var cachedOvernightFinancing = stateObject.get(cachedOvernightFinancingKey);\r\n                    cachedOvernightFinancingItem = cachedOvernightFinancing && cachedOvernightFinancing[instrumentKey];\r\n                }\r\n\r\n                if (hasValuesOverNightFinancing(cachedOvernightFinancingItem)) {\r\n                    defer.resolve(cachedOvernightFinancingItem);\r\n                }\r\n                else {\r\n                    dalOrders\r\n                        .GetOvernightFinancing(instrumentId, dealAmount)\r\n                        .then(function onOvernightFinancingReceived(result) {\r\n                            // update cache\r\n                            var overnightFinancing = {\r\n                                long: result[0].Result.LongOvernightFinancing,\r\n                                short: result[0].Result.ShortOvernightFinancing,\r\n                                longPercentage: result[0].Result.LongOvernightFinancingPercentage,\r\n                                shortPercentage: result[0].Result.ShortOvernightFinancingPercentage,\r\n                                time: new Date().getTime()\r\n                            }\r\n\r\n                            setCachedOverNightFinancing(overnightFinancing, instrumentKey);\r\n                            defer.resolve(overnightFinancing);\r\n                        })\r\n                        .done();\r\n                }\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            var setComputables = function () {\r\n                data.principal = self.createComputed(function computePrincipal() {\r\n                    var instrument = instrumentsManager.GetInstrument(newDealData.selectedInstrument()),\r\n                        dealAmount = general.toNumeric(newDealData.selectedDealAmount());\r\n\r\n                    if (!general.isDefinedType(instrument) || !(data.isNotIslamicDealPermit && instrument.isOvernightFinancing()) || !general.isDefinedType(dealAmount) || isNaN(dealAmount)) {\r\n                        return;\r\n                    }\r\n\r\n                    getOvernightFinancingPrincipal(dealAmount, instrument.id)\r\n                        .then(function onOvernightFinancingPrincipalReceived(result) {\r\n                            data.principalOfLong(result.long);\r\n                            data.principalOfShort(result.short);\r\n                            data.principalOfLongPercentage(result.longPercentage);\r\n                            data.principalOfShortPercentage(result.shortPercentage);\r\n                        })\r\n                        .done();\r\n                }, self, false);\r\n\r\n                data.overnightFinancingLong = self.createComputed(function computeOvernightFinancingLong() {\r\n                    var value;\r\n\r\n                    if (!general.isDefinedType(data.principalOfLong())) {\r\n                        return '';\r\n                    }\r\n\r\n                    value = data.principalOfLong();\r\n\r\n                    if (data.conversionRate() > 10) {\r\n                        value = parseFloat(value.toFixed(0)) === -0 ? 0 : parseFloat(value.toFixed(0));\r\n                    } else {\r\n                        value = parseFloat(value.toFixed(2)) === -0 ? 0 : parseFloat(value.toFixed(2));\r\n                    }\r\n\r\n                    return value;\r\n                });\r\n\r\n                data.overnightFinancingShort = self.createComputed(function computeOvernightFinancingShort() {\r\n                    var value;\r\n\r\n                    if (!general.isDefinedType(data.principalOfShort())) {\r\n                        return '';\r\n                    }\r\n\r\n                    value = data.principalOfShort();\r\n\r\n                    if (data.conversionRate() > 10) {\r\n                        value = parseFloat(value.toFixed(0)) === -0 ? 0 : parseFloat(value.toFixed(0));\r\n                    } else {\r\n                        value = parseFloat(value.toFixed(2)) === -0 ? 0 : parseFloat(value.toFixed(2));\r\n                    }\r\n\r\n                    return value;\r\n                });\r\n\r\n                data.overnightFinancingPercentageSell = self.createComputed(function computeOvernightFinancingPercentageSell() {\r\n                    var instrument = instrumentsManager.GetInstrument(newDealData.selectedInstrument()),\r\n                        dealAmount = general.toNumeric(newDealData.selectedDealAmount());\r\n\r\n                    if (!general.isDefinedType(instrument) || !general.isDefinedType(dealAmount)) {\r\n                        return;\r\n                    }\r\n\r\n                    return Format.toPercentWithPrecision(data.principalOfShortPercentage(), 5);\r\n                });\r\n\r\n                data.overnightFinancingPercentageBuy = self.createComputed(function computeOvernightFinancingPercentageBuy() {\r\n                    var instrument = instrumentsManager.GetInstrument(newDealData.selectedInstrument()),\r\n                        dealAmount = general.toNumeric(newDealData.selectedDealAmount());\r\n\r\n                    if (!general.isDefinedType(instrument) || !general.isDefinedType(dealAmount)) {\r\n                        return;\r\n                    }\r\n\r\n                    return Format.toPercentWithPrecision(data.principalOfLongPercentage(), 5);\r\n                });\r\n\r\n                data.OfCalculationTimeGMT = self.createComputed(function computeOfCalculationTimeGMT() {\r\n                    var instrument = instrumentsManager.GetInstrument(newDealData.selectedInstrument()),\r\n                        scheduleGroupGMTCloseTime,\r\n                        GMTCloseTime;\r\n\r\n                    dalInstruments.GetScheduleGroup(instrument.id)\r\n                        .then(function onGetScheduleGroupReceived(result) {\r\n                            scheduleGroupGMTCloseTime = result[0].GMTCloseTime;\r\n                            GMTCloseTime = scheduleGroupGMTCloseTime.split(' ')[1];\r\n                            data.overnightFinancingTimeGMT(GMTCloseTime);\r\n                            data.weekendFinancingType(result[0].WeekendFinancingType);\r\n                            updatePositionsInTable();\r\n                            setScheduleGroupData(result[0]);\r\n                        })\r\n                        .done();\r\n                }, self, false);\r\n\r\n                data.pipWorth = self.createComputed(function computePipWorth() {\r\n                    var instrument = instrumentsManager.GetInstrument(newDealData.selectedInstrument());\r\n                    var value = dealMarginCalculator.PipWorth(general.toNumeric(newDealData.selectedDealAmount()),\r\n                        instrument.PipDigit, newDealData.quoteForOtherCcyToAccountCcy(), data.conversionRate());\r\n\r\n                    return value;\r\n                }).extend({ empty: true });\r\n\r\n                data.infoLines = self.createComputed(function computeInfoLines() {\r\n                    var instrument = instrumentsManager.GetInstrument(newDealData.selectedInstrument());\r\n\r\n                    return instrumentInfoLines.GetInfoLines(instrument, data);\r\n                });\r\n            };\r\n\r\n            function setScheduleGroupData(receivedData) {\r\n                scheduleGroupStateObject.update('ScheduleGroupData', receivedData);\r\n            }\r\n\r\n            function updatePositionsInTable() {\r\n                if (!general.isNullOrUndefined(customer.prop.maintenanceMarginPercentage) && customer.prop.maintenanceMarginPercentage > 0) {\r\n                    data.displayOffHoursRequiredMargin(false);\r\n                } else {\r\n                    data.displayOffHoursRequiredMargin(true);\r\n                }\r\n            }\r\n\r\n            function getDealMarginDetails() {\r\n                var offHoursRequiredMarginResult,\r\n                    maximumLeverageResult = 0,\r\n                    maxNormalMargin,\r\n                    requiredMarginResult;\r\n\r\n                dalOrders\r\n                    .GetDealMarginDetails(newDealData.selectedInstrument())\r\n                    .then(function onDealMarginDetailsReceived(result) {\r\n                        maxNormalMargin = result[0].Result.MaxNormalMargin;\r\n                        requiredMarginResult = maxNormalMargin * 100;\r\n                        offHoursRequiredMarginResult = result[0].Result.MaxOffHoursMargin * 100;\r\n\r\n                        if (maxNormalMargin != 0) {\r\n                            maximumLeverageResult = 1 / maxNormalMargin;\r\n                        }\r\n\r\n                        data.requiredMargin(parseFloat(requiredMarginResult.toFixed(2)) + '%');\r\n                        data.offHoursRequiredMargin(parseFloat(offHoursRequiredMarginResult.toFixed(2)) + '%');\r\n                        data.maximumLeverage('1:' + maximumLeverageResult.toFixed(0));\r\n                    })\r\n                    .done();\r\n            }\r\n\r\n            function dispose() {\r\n                parent.dispose.call(self);\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                NewDealData: newDealData\r\n            };\r\n        });\r\n\r\n        var createViewModel = function (params) {\r\n            var viewModel = new InstrumentInfoViewModel(params);\r\n            viewModel.init();\r\n\r\n            return viewModel;\r\n        };\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            }\r\n        };\r\n    }\r\n);",
  "isBase64": false
}