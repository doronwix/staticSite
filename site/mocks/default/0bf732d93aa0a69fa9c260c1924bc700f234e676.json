{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/devices/web/uilayer/viewmodels/Deals/Modules/NewDealModule.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'deviceviewmodels/Deals/Modules/NewDealModule',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'Q',\r\n        'configuration/initconfiguration',\r\n        'Dictionary',\r\n        'initdatamanagers/Customer',\r\n        'devicemanagers/StatesManager',\r\n        'initdatamanagers/InstrumentsManager',\r\n        'devicemanagers/ViewModelsManager',\r\n        'managers/CustomerProfileManager',\r\n        'modules/permissionsmodule',\r\n        'FxNet/LogicLayer/Deal/DealLifeCycle',\r\n        'viewmodels/Limits/AmountFieldsWrapper',\r\n        'FxNet/LogicLayer/Deal/NewDealValidator',\r\n        'viewmodels/Deals/DealBaseViewModel',\r\n        'StateObject!Transaction',\r\n        'LoadDictionaryContent!deals_newdeal'\r\n    ],\r\n    function NewDealModuleDefault(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            Q = require('Q'),\r\n            settings = require('configuration/initconfiguration').NewDealConfiguration,\r\n            Dictionary = require('Dictionary'),\r\n            Customer = require('initdatamanagers/Customer'),\r\n            statesManager = require('devicemanagers/StatesManager'),\r\n            instrumentsManager = require('initdatamanagers/InstrumentsManager'),\r\n            customerProfileManager = require('managers/CustomerProfileManager'),\r\n            permissionsModule = require('modules/permissionsmodule'),\r\n            newDealValidator = require('FxNet/LogicLayer/Deal/NewDealValidator'),\r\n            dealLifeCycle = require('FxNet/LogicLayer/Deal/DealLifeCycle'),\r\n            AmountFieldsWrapper = require('viewmodels/Limits/AmountFieldsWrapper'),\r\n            DealBaseViewModel = require('viewmodels/Deals/DealBaseViewModel'),\r\n            stateObject = require('StateObject!Transaction');\r\n\r\n        var NewDealModule = general.extendClass(DealBaseViewModel, function NewDealModuleClass() {\r\n            var self = this,\r\n                parent = this.parent,                       // inherited from DealBaseViewModel\r\n                data = this.Data,                           // inherited from DealBaseViewModel\r\n                validationModel = {},\r\n                baseOrder = parent.BaseOrder,\r\n                fieldWrappers = new AmountFieldsWrapper(),\r\n                setLimitsModel = parent.SetLimitsModel,\r\n                selectedInstrumentWrapper;\r\n\r\n            function init(customSettings) {\r\n                if (!stateObject.containsKey('stateObjectIsReadyDefer')) {\r\n                    stateObject.set('stateObjectIsReadyDefer', Q.defer());\r\n                }\r\n\r\n                parent.init.call(self, customSettings);     // inherited from DealBaseViewModel\r\n\r\n                data.chartStationPage = customSettings.chartStationPage;\r\n                newDealValidator.Init(baseOrder);\r\n\r\n                setObservables();\r\n                setComputables();\r\n                setSubscribers();\r\n                setValidators();\r\n\r\n                parent.registerToDispatcher();\r\n                setLimitsModel.Start(setLimitsModelDependencies);\r\n                setChartProperties();\r\n                stateObject.get('stateObjectIsReadyDefer').resolve();\r\n                stateObject.update('currentRateDirectionSwitch', settings.currentRateDirectionSwitch);\r\n\r\n                ko.postbox.publish('deal-slip-view', {\r\n                    instrument: data.ccyPair(),\r\n                    instrumentStatus: data.isActiveQuote() ? 'live' : 'disabled',\r\n                    tabName: general.getKeyByValue(eNewDealTool, data.initialToolTab()),\r\n                    limit: data.showLimits() ? 'maximized' : 'minimized',\r\n                    tools: data.showTools() ? 'maximized' : 'minimized',\r\n                    id: data.selectedInstrument(),\r\n                    orderDir: data.orderDir()\r\n                });\r\n            }\r\n\r\n            function setObservables() {\r\n                data.expirationDate = ko.observable('');\r\n                data.sharesDividendDate = ko.observable();\r\n                data.corporateActionDate = ko.observable();\r\n                data.showShareCorporateActionDealInfo = ko.observable();\r\n                data.showShareDividendDealInfo = ko.observable();\r\n                data.showFutureRolloverDealInfo = ko.observable('');\r\n                data.futuresRolloverDate = ko.observable('');\r\n                data.showLimits = ko.observable(customerProfileManager.ProfileCustomer().limits === 1).extend({ notify: 'always' });\r\n                data.showLimitsSlideCompleted = ko.observable(false);\r\n                data.toggleLimitsSection = function () {\r\n                    var currentValue = !!data.showLimits();\r\n\r\n                    data.showLimits(!currentValue);\r\n                };\r\n            }\r\n\r\n            function setValidators() {\r\n                data.selectedInstrument.extend({ validatable: false });\r\n                data.selectedInstrument.extend({\r\n                    validation: {\r\n                        validator: function (selectedInstrument) {\r\n                            var isQuoteActive = data.isActiveQuote();\r\n\r\n                            return general.isEmptyValue(selectedInstrument) || general.isEmptyValue(isQuoteActive) || (!statesManager.States.IsMarketClosed() && isQuoteActive);\r\n                        },\r\n                        message: Dictionary.GetItem('InstrumentInactive')\r\n                    }\r\n                });\r\n\r\n                data.selectedInstrument.extend({\r\n                    tooltipValidation: {\r\n                        notify: 'always'\r\n                    }\r\n                });\r\n            }\r\n\r\n            function setComputables() {\r\n                data.DealButtonEnabled = self.createComputed(function () {\r\n                    var isMarketClosed = statesManager.States.IsMarketClosed(),\r\n                        isValidInstrument = data.selectedInstrument.isValid(),\r\n                        viewModelReady = data.hasInstrument() && data.limitsReady() && data.quotesAvailable(),\r\n                        isActiveQuote = data.isActiveQuote(),\r\n                        isOrderDirSelected = data.isShowBuyBox() || data.isShowSellBox(),\r\n                        hasDealMinMaxAmounts = data.dealMinMaxAmounts().length > 0;\r\n\r\n                    return (!data.isProcessing() && hasDealMinMaxAmounts && !isMarketClosed && isActiveQuote &&\r\n                        isOrderDirSelected && isValidInstrument && viewModelReady);\r\n                });\r\n\r\n                data.showForexNonIslamicDealInfo = self.createComputed(function () {\r\n                    return data.isForex() && Customer.prop.dealPermit !== eDealPermit.Islamic;\r\n                });\r\n\r\n                data.isOvernightOnForex = self.createComputed(function () {\r\n                    return Customer.prop.isOvernightOnForex;\r\n                });\r\n\r\n                data.showSLSummary = self.createComputed(function () {\r\n                    var displaySummary = !!ko.utils.unwrapObservable(setLimitsModel.Data.displaySLSummary);\r\n\r\n                    return !data.showLimits() && data.enableSLLimit() && displaySummary;\r\n                });\r\n\r\n                data.showTPSummary = self.createComputed(function () {\r\n                    var displaySummary = !!ko.utils.unwrapObservable(setLimitsModel.Data.displayTPSummary);\r\n\r\n                    return !data.showLimits() && data.enableTPLimit() && displaySummary;\r\n                });\r\n\r\n                data.showLimitsSummary = self.createComputed(function () {\r\n                    return data.showSLSummary() || data.showTPSummary();\r\n                });\r\n\r\n                data.focusOnSlRate = self.createComputed(function () {\r\n                    return data.enableSLLimit() && setLimitsModel.Data.curSlActiveTab() === eSetLimitsTabs.Rate;\r\n                });\r\n\r\n                data.focusOnSlAmount = self.createComputed(function () {\r\n                    // Focus by default the amount field\r\n                    return data.enableSLLimit() && (setLimitsModel.Data.curSlActiveTab() === eSetLimitsTabs.Amount || setLimitsModel.Data.curSlActiveTab() === setLimitsModel.Data.defaultTab);\r\n                });\r\n\r\n                data.focusOnSlPercent = self.createComputed(function () {\r\n                    return data.enableSLLimit() && setLimitsModel.Data.curSlActiveTab() === eSetLimitsTabs.Percent;\r\n                });\r\n\r\n                data.focusOnTpRate = self.createComputed(function () {\r\n                    return data.enableTPLimit() && setLimitsModel.Data.curTpActiveTab() === eSetLimitsTabs.Rate;\r\n                });\r\n\r\n                data.focusOnTpAmount = self.createComputed(function () {\r\n                    // Focus by default the amount field\r\n                    return data.enableTPLimit() && (setLimitsModel.Data.curTpActiveTab() === eSetLimitsTabs.Amount || setLimitsModel.Data.curTpActiveTab() === setLimitsModel.Data.defaultTab);\r\n                });\r\n\r\n                data.focusOnTpPercent = self.createComputed(function () {\r\n                    return data.enableTPLimit() && setLimitsModel.Data.curTpActiveTab() === eSetLimitsTabs.Percent;\r\n                });\r\n\r\n                selectedInstrumentWrapper = self.createComputed(function () {\r\n                    return data.selectedInstrument();\r\n                });\r\n            }\r\n\r\n            function setSubscribers() {\r\n                self.subscribeAndNotify(selectedInstrumentWrapper, function (instrumentId) {\r\n                    var instrument = instrumentsManager.GetInstrument(instrumentId);\r\n\r\n                    if (instrument) {\r\n                        if (!data.chartStationPage) {\r\n                            parent.setLimitTabsFromClientProfile();\r\n                        }\r\n\r\n                        data.expirationDate(instrument.expirationDate);\r\n                        data.sharesDividendDate(general.str2Date(instrument.eventDate, 'd/m/Y H:M'));\r\n                        data.corporateActionDate(general.str2Date(instrument.getCorporateActionDate(), 'd/m/Y H:M'));\r\n                        data.futuresRolloverDate(general.str2Date(instrument.eventDate, 'd/m/Y H:M'));\r\n\r\n                        data.showShareCorporateActionDealInfo(dealLifeCycle.sharesIsCorporateActionDateSignificant_BeforeDeal(Customer.prop.dealPermit, instrument.assetTypeId, instrument.getCorporateActionDate()));\r\n                        data.showShareDividendDealInfo(dealLifeCycle.sharesIsDividendDateSignificant_BeforeDeal(Customer.prop.dealPermit, instrument.assetTypeId, instrument.getCorporateActionDate(), instrument.getInstrumentDividendDate()));\r\n                        data.showFutureRolloverDealInfo(dealLifeCycle.futuresIsRolloverDateSignificant_BeforeDeal(Customer.prop.dealPermit, instrument.assetTypeId, instrument.getInstrumentRolloverDate()));\r\n                    }\r\n\r\n                    if (data.ViewModelReady()) {\r\n                        ko.postbox.publish('deal-slip-switch-instrument', { id: data.selectedInstrument(), instrument: data.ccyPair() });\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(data.showLimits, function (isExpanded) {\r\n                    var profileCustomer = customerProfileManager.ProfileCustomer();\r\n                    profileCustomer.limits = Number(isExpanded);\r\n                    customerProfileManager.ProfileCustomer(profileCustomer);\r\n\r\n                    data.showLimitsSlideCompleted(false);\r\n\r\n                    if (!isExpanded && data.ViewModelReady()) {\r\n                        // SL\r\n                        setLimitsModel.Data.stopLossRate.closeTooltip();\r\n                        fieldWrappers.Data.stopLossInCustomerCcy.closeTooltip();\r\n                        setLimitsModel.Data.stopLossPercent.closeTooltip();\r\n\r\n                        // TP\r\n                        setLimitsModel.Data.takeProfitRate.closeTooltip();\r\n                        fieldWrappers.Data.takeProfitInCustomerCcy.closeTooltip();\r\n                        setLimitsModel.Data.takeProfitPercent.closeTooltip();\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(data.showLimitsSlideCompleted, function (slideCompleted) {\r\n                    if (slideCompleted && data.showLimits()) {\r\n                        // SL\r\n                        setLimitsModel.Data.stopLossRate.resetTooltip();\r\n                        fieldWrappers.Data.stopLossInCustomerCcy.resetTooltip();\r\n                        setLimitsModel.Data.stopLossPercent.resetTooltip();\r\n\r\n                        // TP\r\n                        setLimitsModel.Data.takeProfitRate.resetTooltip();\r\n                        fieldWrappers.Data.takeProfitInCustomerCcy.resetTooltip();\r\n                        setLimitsModel.Data.takeProfitPercent.resetTooltip();\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(data.showTools, function (isExpanded) {\r\n                    var profileCustomer = customerProfileManager.ProfileCustomer();\r\n                    profileCustomer.tools = Number(isExpanded);\r\n                    customerProfileManager.ProfileCustomer(profileCustomer);\r\n                });\r\n            }\r\n\r\n            function setLimitsModelDependencies() {\r\n                validationModel.Limits = ko.validatedObservable({\r\n                    stopLossAmount: setLimitsModel.Data.stopLossAmount,\r\n                    takeProfitAmount: setLimitsModel.Data.takeProfitAmount,\r\n                    ccySLAmount: setLimitsModel.Data.ccySLAmount,\r\n                    ccyTPAmount: setLimitsModel.Data.ccyTPAmount,\r\n                    stopLossRate: setLimitsModel.Data.stopLossRate,\r\n                    takeProfitRate: setLimitsModel.Data.takeProfitRate,\r\n                    stopLossPercent: setLimitsModel.Data.stopLossPercent,\r\n                    takeProfitPercent: setLimitsModel.Data.takeProfitPercent\r\n                });\r\n\r\n                fieldWrappers.init(setLimitsModel, data);\r\n\r\n                var slAmountTooltip = ko.observable(false);\r\n                var slRateTooltip = ko.observable(false);\r\n                var slPercentTooltip = ko.observable(false);\r\n                var tpAmountTooltip = ko.observable(false);\r\n                var tpRateTooltip = ko.observable(false);\r\n                var tpPercentTooltip = ko.observable(false);\r\n\r\n                // SL amount tooltip validation\r\n                fieldWrappers.Data.stopLossInCustomerCcy.extend({\r\n                    tooltipValidation: {\r\n                        message: Dictionary.GetItem('txtRateValidationTooltip', null, ''),\r\n                        showTooltip: function () {\r\n                            return (setLimitsModel.Data.curSlActiveTab() == eSetLimitsTabs.Amount || setLimitsModel.Data.curSlActiveTab() == setLimitsModel.Data.defaultTab) && slAmountTooltip();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(fieldWrappers.Data.stopLossInCustomerCcy.tooltipClosed, function (isClosed) {\r\n                    if (isClosed) {\r\n                        slAmountTooltip(false);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(fieldWrappers.Data.stopLossInCustomerCcy, function () {\r\n                    slAmountTooltip(false);\r\n                });\r\n\r\n                // SL rate tooltip validation\r\n                setLimitsModel.Data.stopLossRate.extend({\r\n                    tooltipValidation: {\r\n                        message: Dictionary.GetItem('txtRateValidationTooltip', null, ''),\r\n                        showTooltip: function () {\r\n                            return (setLimitsModel.Data.curSlActiveTab() == eSetLimitsTabs.Rate || setLimitsModel.Data.curSlActiveTab() == setLimitsModel.Data.defaultTab) && slRateTooltip();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsModel.Data.stopLossRate.tooltipClosed, function (isClosed) {\r\n                    if (isClosed) {\r\n                        slRateTooltip(false);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsModel.Data.stopLossRate, function () {\r\n                    slRateTooltip(false);\r\n                });\r\n\r\n                // SL percent tooltip validation\r\n                setLimitsModel.Data.stopLossPercent.extend({\r\n                    tooltipValidation: {\r\n                        message: Dictionary.GetItem('txtRateValidationTooltip', null, ''),\r\n                        showTooltip: function () {\r\n                            return (setLimitsModel.Data.curSlActiveTab() === eSetLimitsTabs.Percent || setLimitsModel.Data.curSlActiveTab() === setLimitsModel.Data.defaultTab) && slPercentTooltip();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsModel.Data.stopLossPercent.tooltipClosed, function (isClosed) {\r\n                    if (isClosed) {\r\n                        slPercentTooltip(false);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsModel.Data.stopLossPercent, function () {\r\n                    slPercentTooltip(false);\r\n                });\r\n\r\n                // TP amount tooltip validation\r\n                fieldWrappers.Data.takeProfitInCustomerCcy.extend({\r\n                    tooltipValidation: {\r\n                        message: Dictionary.GetItem('txtRateValidationTooltip', null, ''),\r\n                        showTooltip: function () {\r\n                            return (setLimitsModel.Data.curTpActiveTab() === eSetLimitsTabs.Amount || setLimitsModel.Data.curTpActiveTab() == setLimitsModel.Data.defaultTab) && tpAmountTooltip();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(fieldWrappers.Data.takeProfitInCustomerCcy.tooltipClosed, function (isClosed) {\r\n                    if (isClosed) {\r\n                        tpAmountTooltip(false);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(fieldWrappers.Data.takeProfitInCustomerCcy, function () {\r\n                    tpAmountTooltip(false);\r\n                });\r\n\r\n                // TP rate tooltip validation\r\n                setLimitsModel.Data.takeProfitRate.extend({\r\n                    tooltipValidation: {\r\n                        message: Dictionary.GetItem('txtRateValidationTooltip', null, ''),\r\n                        showTooltip: function () {\r\n                            return (setLimitsModel.Data.curTpActiveTab() == eSetLimitsTabs.Rate || setLimitsModel.Data.curTpActiveTab() == setLimitsModel.Data.defaultTab) && tpRateTooltip();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsModel.Data.takeProfitRate.tooltipClosed, function (isClosed) {\r\n                    if (isClosed) {\r\n                        tpRateTooltip(false);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsModel.Data.takeProfitRate, function () {\r\n                    tpRateTooltip(false);\r\n                });\r\n\r\n                // TP percent tooltip validation\r\n                setLimitsModel.Data.takeProfitPercent.extend({\r\n                    tooltipValidation: {\r\n                        message: Dictionary.GetItem('txtRateValidationTooltip', null, ''),\r\n                        showTooltip: function () {\r\n                            return (setLimitsModel.Data.curTpActiveTab() === eSetLimitsTabs.Percent || setLimitsModel.Data.curTpActiveTab() === setLimitsModel.Data.defaultTab) && tpPercentTooltip();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsModel.Data.takeProfitPercent.tooltipClosed, function (isClosed) {\r\n                    if (isClosed) {\r\n                        tpPercentTooltip(false);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsModel.Data.takeProfitPercent, function () {\r\n                    tpPercentTooltip(false);\r\n                });\r\n\r\n                // reset toolpip visibility\r\n                self.addDisposable(\r\n                    ko.postbox.subscribe('deal-slip-show-validation-tooltips', function () {\r\n                        slAmountTooltip(true);\r\n                        slRateTooltip(true);\r\n                        slPercentTooltip(true);\r\n                        tpAmountTooltip(true);\r\n                        tpRateTooltip(true);\r\n                        tpPercentTooltip(true);\r\n                    })\r\n                );\r\n\r\n                setStopLossDependencies();\r\n                setTakeProfitDependencies();\r\n\r\n                data.limitsReady(true);\r\n                parent.setLimitTabsFromClientProfile();\r\n            }\r\n\r\n            function setStopLossDependencies() {\r\n                self.subscribeTo(data.enableSLLimit, function (enabled) {\r\n                    if (enabled) {\r\n                        return;\r\n                    }\r\n\r\n                    setLimitsModel.Data.stopLossRate('');\r\n                    setLimitsModel.Data.stopLossAmount('');\r\n                    setLimitsModel.Data.stopLossPercent('');\r\n                    fieldWrappers.Data.stopLossInCustomerCcy('');\r\n                });\r\n\r\n                self.subscribeTo(setLimitsModel.Data.curSlActiveTab, function (activeTab) {\r\n                    data.isSlRateActiveTab(activeTab === eSetLimitsTabs.Rate);\r\n                    data.isSlAmountActiveTab(activeTab === eSetLimitsTabs.Amount);\r\n                    data.isSlPercentActiveTab(activeTab === eSetLimitsTabs.Percent);\r\n                });\r\n\r\n                self.subscribeTo(setLimitsModel.Data.stopLossPercent, function (stopLossPercent) {\r\n                    data.displaySlPercentSymbol(!general.isEmptyValue(stopLossPercent) && stopLossPercent !== 'NA');\r\n                });\r\n\r\n                self.subscribeTo(fieldWrappers.Data.stopLossInCustomerCcy, function (stopLossInCustomerCcy) {\r\n                    data.displaySlAmountCcySymbol(!general.isEmptyValue(stopLossInCustomerCcy) && stopLossInCustomerCcy !== 'NA');\r\n                });\r\n            }\r\n\r\n            function setTakeProfitDependencies() {\r\n                self.subscribeTo(data.enableTPLimit, function (enabled) {\r\n                    if (enabled) {\r\n                        return;\r\n                    }\r\n\r\n                    setLimitsModel.Data.takeProfitRate('');\r\n                    setLimitsModel.Data.takeProfitAmount('');\r\n                    setLimitsModel.Data.takeProfitPercent('');\r\n                    fieldWrappers.Data.takeProfitInCustomerCcy('');\r\n                });\r\n\r\n                self.subscribeTo(setLimitsModel.Data.curTpActiveTab, function (activeTab) {\r\n                    data.isTpRateActiveTab(activeTab === eSetLimitsTabs.Rate);\r\n                    data.isTpAmountActiveTab(activeTab === eSetLimitsTabs.Amount);\r\n                    data.isTpPercentActiveTab(activeTab === eSetLimitsTabs.Percent);\r\n                });\r\n\r\n                self.subscribeTo(setLimitsModel.Data.takeProfitPercent, function (takeProfitPercent) {\r\n                    data.displayTpPercentSymbol(!general.isEmptyValue(takeProfitPercent) && takeProfitPercent !== 'NA');\r\n                });\r\n\r\n                self.subscribeTo(fieldWrappers.Data.takeProfitInCustomerCcy, function (takeProfitInCustomerCcy) {\r\n                    data.displayTpAmountCcySymbol(!general.isEmptyValue(takeProfitInCustomerCcy) && takeProfitInCustomerCcy !== 'NA');\r\n                });\r\n            }\r\n\r\n            function dealButtonHandler() {\r\n                if (!data.DealButtonEnabled()) {\r\n                    return;\r\n                }\r\n\r\n                if (general.isDefinedType(baseOrder.ViewProperties)) {\r\n                    if (!data.isActiveQuote()) {\r\n                        baseOrder.ViewProperties.InactiveInstrumentAlert(data.selectedInstrument());\r\n\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                if (!newDealValidator.Validate(data.selectedInstrument())) {\r\n                    return;\r\n                }\r\n\r\n                if (!permissionsModule.CheckActionAllowed('newDeal', true, { register: registerParams.traderInstrumentId + data.selectedInstrument() + registerParams.traderOrderDir + (data.orderDir() === 0 ? 'Sell' : 'Buy') }))\r\n                    return;\r\n\r\n                var isSelectedDealAmountValid = general.isFunctionType(data.selectedDealAmount.isValid) ? data.selectedDealAmount.isValid() : false,\r\n                    limitsErrors = setLimitsModel.Validate();\r\n\r\n                if (limitsErrors.length || !isSelectedDealAmountValid) {\r\n                    // expand set limits section if there are errors\r\n                    if (limitsErrors.length) {\r\n                        data.showLimits(true);\r\n                    }\r\n\r\n                    ko.postbox.publish('deal-slip-show-validation-tooltips');\r\n                    return;\r\n                }\r\n\r\n                parent.openDeal();\r\n            }\r\n\r\n            function setChartProperties() {\r\n                stateObject.update('stopLossRate', setLimitsModel.Data.stopLossRate);\r\n                stateObject.update('takeProfitRate', setLimitsModel.Data.takeProfitRate);\r\n                stateObject.update('switchToRate', switchToRate);\r\n                stateObject.update('chart', settings.chart);\r\n\r\n                stateObject.set('transactionType', ko.observable());\r\n                stateObject.get('transactionType')(eTransactionSwitcher.NewDeal);\r\n            }\r\n\r\n            function switchToRate() {\r\n                setLimitsModel.SetActiveTab(eSetLimitsTabs.Rate);\r\n            }\r\n\r\n            function dispose() {\r\n                stateObject.unset('currentRateDirectionSwitch');\r\n                setLimitsModel.Stop();\r\n                fieldWrappers.dispose();\r\n                fieldWrappers = null;\r\n                parent.dispose.call(self);                  // inherited from DealViewModel\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Data: data,\r\n                BaseOrder: baseOrder,\r\n                DealButtonHandler: dealButtonHandler,\r\n\r\n                TPField: setLimitsModel.TPField,\r\n                SLField: setLimitsModel.SLField,\r\n\r\n                SetLimitsInfo: setLimitsModel.ObservableSetLimitsObject,\r\n                SetLimitsViewProperties: setLimitsModel.ViewProperties,\r\n                FieldWrappers: fieldWrappers\r\n            };\r\n        });\r\n\r\n        return {\r\n            ViewModel: NewDealModule\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}