{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fp-web.js.map",
  "contentType": "text/plain",
  "method": "GET",
  "statusCode": 200,
  "data": "{\n  \"version\": 3,\n  \"sources\": [\n    \"fxnet/uilayer/uilayerhelpers/KoComponentViewModel.js\",\n    \"FxNet/devices/web/uilayer/viewmodels/PresetDropdownListViewModel.js\",\n    \"fxnet/uilayer/managers/SpinnerManager.js\",\n    \"fxnet/uilayer/modules/InstrumentsSearchModule.js\",\n    \"fxnet/uilayer/objects/AutocompleteWidget.js\",\n    \"fxnet/uilayer/uilayerhelpers/CustomKOBindings/AutocompleteBinding.js\",\n    \"FxNet/uilayer/viewmodels/InstrumentPriceAlertViewModel.js\",\n    \"AccountHub!StateObject\",\n    \"userFlow!StateObject\",\n    \"Setting!StateObject\",\n    \"FxNet/uilayer/viewmodels/accounthub/AccountHubCardViewModel.js\",\n    \"HelpcHub!StateObject\",\n    \"FxNet/uilayer/viewmodels/accounthub/AccountHeaderViewModel.js\",\n    \"FxNet/uilayer/viewmodels/WalletModuleBase.js\",\n    \"FxNet/devices/web/uilayer/viewmodels/WalletModule.js\",\n    \"FxNet/uilayer/viewmodels/WalletViewModel.js\",\n    \"DealsTabs!StateObject\",\n    \"FxNet/uilayer/viewmodels/TabsViewModel.js\",\n    \"HelpCenterWalkthroughs!LoadDictionaryContent\",\n    \"HelpCenterTradingGuide!LoadDictionaryContent\",\n    \"fxnet/uilayer/managers/HelpCenterContentManager.js\",\n    \"fxnet/uilayer/Modules/WalkthroughsModule.js\",\n    \"fx_personal_guide!LoadDictionaryContent\",\n    \"FxNet/UILayer/ChatBot/PersonalGuideManager.js\",\n    \"fxnet/devices/web/uilayer/managers/HelpCenterMenuPersonalGuideManager.js\",\n    \"FxNet/devices/web/uilayer/viewmodels/HelpCenterViewModel.js\",\n    \"FxNet/uilayer/viewmodels/HelpCenter/HelpCenterActionViewModel.js\",\n    \"FxNet/uilayer/viewmodels/BaseInstrumentSearchViewModel.js\",\n    \"FxNet/devices/web/uilayer/viewmodels/PresetInstrumentSearchViewModel.js\",\n    \"fxnet/dataaccesslayer/dalDemoAccount.js\",\n    \"fxnet/common/utils/handlers/AmountConverter.js\",\n    \"fxnet/dataaccesslayer/dalConversion.js\",\n    \"fxnet/uilayer/modules/BuilderForInBetweenQuote.js\",\n    \"FxNet/uilayer/viewmodels/demoDeposit/demo-deposit-icon.js\",\n    \"fxnet/devices/web/uilayer/alerts/MinEquityAlert.js\",\n    \"TradingEnabled!StateObject\",\n    \"FxNet/devices/web/uilayer/viewmodels/BaseOrder.js\",\n    \"FxNet/uilayer/viewmodels/Limits/ActiveLimitsModule.js\",\n    \"FxNet/devices/web/uilayer/viewmodels/LimitsViewModel.js\",\n    \"FxNet/devices/web/uilayer/viewmodels/account/UserFlowCTA.js\",\n    \"fxnet/logiclayer/userflows/UserFlowManager.js\",\n    \"FxNet/uilayer/viewmodels/AccountSummaryNotActiveViewModel.js\",\n    \"FxNet/LogicLayer/Deal/DealPermissions.js\",\n    \"FxNet/uilayer/viewmodels/OpenDealsViewModelBase.js\",\n    \"OpenedDeals!StateObject\",\n    \"FxNet/devices/web/uilayer/viewmodels/OpenDealsModule.js\",\n    \"Positions!StateObject\",\n    \"FxNet/devices/web/uilayer/viewmodels/OpenDealsViewModel.js\",\n    \"FxNet/uilayer/viewmodels/menuviewmodel.js\",\n    \"fxnet/dataaccesslayer/dalClosedDeals.js\",\n    \"FxNet/uilayer/viewmodels/Deals/ClosedDealsModule.js\",\n    \"FxNet/devices/web/uilayer/viewmodels/AccountClosedDealsViewModel.js\",\n    \"../../../../../../../../../../../module-create.js\"\n  ],\n  \"names\": [],\n  \"mappingsjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChplSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjzhlZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjDA;AACA,ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC1EA;AACA,ACDA;AACA,ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClrHA;AACA,ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACllUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvtptgpzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvgjdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxFA;AACA;AACA\",\n  \"file\": \"fp-web.js\",\n  \"sourcesContent\": [\n    \"define('helpers/KoComponentViewModel',[\\\"knockout\\\"], function (ko) {\\r\\n\\tfunction KoComponentViewModel() {\\r\\n\\t\\tthis._settings = {};\\r\\n\\t\\tthis._disposables = [];\\r\\n\\t\\tthis.Data = {};\\r\\n\\t\\tthis._valid = true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * Creates a computable and adds it to the _disposables array\\r\\n\\t * @param {Function/Object} handler the definition of the computable (same signature as ko.computed | ko.pureComputed)\\r\\n\\t * @param {Object} context The context of the computed (reference for this)\\r\\n\\t * @param {Boolean} isPure Indicates if the returned computable is ko.pureComputed or ko.computed\\r\\n\\t * @returns {ko.computed}\\r\\n\\t */\\r\\n\\tKoComponentViewModel.prototype.createComputed = function (\\r\\n\\t\\thandler,\\r\\n\\t\\tcontext,\\r\\n\\t\\tisPure /* default/undefined is true */\\r\\n\\t) {\\r\\n\\t\\tvar computed,\\r\\n\\t\\t\\tconfig = {\\r\\n\\t\\t\\t\\towner: context || this,\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\tif (typeof handler === \\\"function\\\") {\\r\\n\\t\\t\\tconfig.read = handler;\\r\\n\\t\\t} else if (typeof handler === \\\"object\\\") {\\r\\n\\t\\t\\tko.utils.extend(config, handler);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tthrow new Error(\\\"Argument mismatch, object literal was expected\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (isPure === false) {\\r\\n\\t\\t\\tcomputed = ko.computed(config);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// default\\r\\n\\t\\t\\tcomputed = ko.pureComputed(config);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis._disposables.push(computed);\\r\\n\\r\\n\\t\\treturn computed;\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Subscribe to a subscriable object, adds its reference to _disposables array\\r\\n\\t * @param {ko.susbscriable} observable\\r\\n\\t * @param {Function} handler\\r\\n\\t * @param {Object} context\\r\\n\\t * @param {String} event\\r\\n\\t * @returns {ko.subscription}\\r\\n\\t */\\r\\n\\tKoComponentViewModel.prototype.subscribeTo = function (observable, handler, context, event) {\\r\\n\\t\\tvar subscriber = observable.subscribe(handler, context || this, event);\\r\\n\\t\\tthis._disposables.push(subscriber);\\r\\n\\r\\n\\t\\treturn subscriber;\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Subscribe to a subscriable object, adds its reference to _disposables array and notify\\r\\n\\t * @param {ko.susbscriable} observable\\r\\n\\t * @param {Function} handler\\r\\n\\t * @param {Object} context\\r\\n\\t * @param {String} event\\r\\n\\t * @returns {ko.subscription}\\r\\n\\t */\\r\\n\\tKoComponentViewModel.prototype.subscribeAndNotify = function (observable, handler, context, event) {\\r\\n\\t\\tvar subscriber = this.subscribeTo(observable, handler, context, event);\\r\\n\\r\\n\\t\\tobservable.notifySubscribers(observable());\\r\\n\\r\\n\\t\\treturn subscriber;\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Subscribe for previous and current values\\r\\n\\t * @param {} observable\\r\\n\\t * @param {} handler\\r\\n\\t * @returns {}\\r\\n\\t */\\r\\n\\tKoComponentViewModel.prototype.subscribeChanged = function (observable, handler) {\\r\\n\\t\\tvar previousValue,\\r\\n\\t\\t\\tsubscriberBeforeChange = observable.subscribe(\\r\\n\\t\\t\\t\\tfunction (_previousValue) {\\r\\n\\t\\t\\t\\t\\tpreviousValue = _previousValue;\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\tnull,\\r\\n\\t\\t\\t\\t\\\"beforeChange\\\"\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\tthis._disposables.push(subscriberBeforeChange);\\r\\n\\r\\n\\t\\tvar subscriber = observable.subscribe(function (latestValue) {\\r\\n\\t\\t\\thandler(latestValue, previousValue);\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\tthis._disposables.push(subscriber);\\r\\n\\r\\n\\t\\treturn subscriber;\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Save settings to current instance\\r\\n\\t * @param {Object} customSettings\\r\\n\\t * @param {Object} defaultSettings\\r\\n\\t * @returns {void}\\r\\n\\t */\\r\\n\\tKoComponentViewModel.prototype.setSettings = function (customSettings, defaultSettings) {\\r\\n\\t\\tvar _customSettings = customSettings || {};\\r\\n\\t\\tvar _defaultSettings = defaultSettings || {};\\r\\n\\r\\n\\t\\tko.utils.extend(this._settings, _defaultSettings);\\r\\n\\t\\tko.utils.extend(this._settings, _customSettings);\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Get settings\\r\\n\\t * @returns {Object}\\r\\n\\t */\\r\\n\\tKoComponentViewModel.prototype.getSettings = function () {\\r\\n\\t\\t// return a copy of settings object\\r\\n\\t\\treturn ko.utils.extend({}, this._settings);\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Abstract: Initialize the view model instance\\r\\n\\t *\\r\\n\\t * Usually this method should be overriden\\r\\n\\t * @param {Object} settings\\r\\n\\t * @returns {void}\\r\\n\\t */\\r\\n\\tKoComponentViewModel.prototype.init = function (settings) {\\r\\n\\t\\tthis.setSettings(settings);\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Adds a \\\"disposable\\\" object to _disposables array\\r\\n\\t * @param {Object} disposable\\r\\n\\t * @returns {void}\\r\\n\\t */\\r\\n\\tKoComponentViewModel.prototype.addDisposable = function (disposable) {\\r\\n\\t\\tif (disposable && typeof disposable.dispose === \\\"function\\\") {\\r\\n\\t\\t\\tthis._disposables.push(disposable);\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Dispose all disposable objects associated to current instance:\\r\\n\\t * from _disposables array\\r\\n\\t * and disposables members of current instance\\r\\n\\t *\\r\\n\\t * This method can be overriden, in the extended class DO NOT FORGET to call parent.dispose.call(this);\\r\\n\\t * @returns {void}\\r\\n\\t */\\r\\n\\tKoComponentViewModel.prototype.dispose = function () {\\r\\n\\t\\tvar dispose = function (disposable) {\\r\\n\\t\\t\\tif (disposable && typeof disposable.dispose === \\\"function\\\") {\\r\\n\\t\\t\\t\\tdisposable.dispose();\\r\\n\\t\\t\\t}\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tko.utils.arrayForEach(this._disposables, function (object) {\\r\\n\\t\\t\\tdispose(object);\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\tthis._disposables.length = 0;\\r\\n\\r\\n\\t\\tko.utils.objectForEach(this, function (propName, object) {\\r\\n\\t\\t\\tdispose(object);\\r\\n\\t\\t});\\r\\n\\t};\\r\\n\\r\\n\\treturn KoComponentViewModel;\\r\\n});\\r\\n\\n\",\n    \"define('deviceviewmodels/PresetDropdownListViewModel',[\\\"require\\\", \\\"knockout\\\", \\\"handlers/general\\\", \\\"helpers/KoComponentViewModel\\\"], function (require) {\\r\\n\\tvar ko = require(\\\"knockout\\\"),\\r\\n\\t\\tgeneral = require(\\\"handlers/general\\\"),\\r\\n\\t\\tKoComponentViewModel = require(\\\"helpers/KoComponentViewModel\\\");\\r\\n\\r\\n\\tvar PresetDropdownListViewModel = general.extendClass(KoComponentViewModel, function PresetDropdownListViewModel() {\\r\\n\\t\\tvar self = this,\\r\\n\\t\\t\\tparent = this.parent, // inherited from KoComponentViewModel\\r\\n\\t\\t\\tdata = parent.Data;\\r\\n\\r\\n\\t\\tfunction init(settings) {\\r\\n\\t\\t\\tparent.init.call(self, settings);\\r\\n\\r\\n\\t\\t\\tsetObservables();\\r\\n\\t\\t\\tsetInitialData(settings);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setInitialData(presetData) {\\r\\n\\t\\t\\tdata.category = presetData.data();\\r\\n\\t\\t\\tdata.selectedPreset = presetData.selected();\\r\\n\\t\\t\\tdata.key = presetData.data().Key.toLowerCase();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setObservables() {\\r\\n\\t\\t\\tdata.isVisible = ko.observable(false);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction toggleVisibility() {\\r\\n\\t\\t\\tdata.isVisible(!data.isVisible());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction selectPreset(groupedPreset) {\\r\\n\\t\\t\\tdata.isVisible(false);\\r\\n\\t\\t\\tgroupedPreset.Select(groupedPreset.Id);\\r\\n\\t\\t\\tko.postbox.publish(\\\"sub-tab-click\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction hide() {\\r\\n\\t\\t\\tdata.isVisible(false);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction dispose() {\\r\\n\\t\\t\\tparent.dispose.call(self); // inherited from KoComponentViewModel\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tinit: init,\\r\\n\\t\\t\\tdispose: dispose,\\r\\n\\t\\t\\tData: data,\\r\\n\\t\\t\\tToggleVisibility: toggleVisibility,\\r\\n\\t\\t\\tSelectPreset: selectPreset,\\r\\n\\t\\t\\tHide: hide,\\r\\n\\t\\t};\\r\\n\\t});\\r\\n\\r\\n\\tvar createViewModel = function (params) {\\r\\n\\t\\tvar viewModel = new PresetDropdownListViewModel();\\r\\n\\r\\n\\t\\tviewModel.init(params);\\r\\n\\r\\n\\t\\treturn viewModel;\\r\\n\\t};\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tviewModel: {\\r\\n\\t\\t\\tcreateViewModel: createViewModel,\\r\\n\\t\\t},\\r\\n\\t};\\r\\n});\\r\\n\\n\",\n    \"define('managers/SpinnerManager',[\\r\\n\\t\\\"require\\\",\\r\\n\\t\\\"knockout\\\",\\r\\n\\t\\\"enums/enums\\\",\\r\\n\\t\\\"helpers/KoComponentViewModel\\\",\\r\\n\\t\\\"handlers/general\\\",\\r\\n], function SpinnerBoxDef(require) {\\r\\n\\tvar ko = require(\\\"knockout\\\"),\\r\\n\\t\\tKoComponentViewModel = require(\\\"helpers/KoComponentViewModel\\\"),\\r\\n\\t\\tgeneral = require(\\\"handlers/general\\\");\\r\\n\\r\\n\\tvar SpinnerBox = general.extendClass(KoComponentViewModel, function spinnerBoxViewModel() {\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tisSpinnerVisible: ko.observable().subscribeTo(ePostboxTopic.SetSpinnerVisibility),\\r\\n\\t\\t};\\r\\n\\t});\\r\\n\\r\\n\\tvar createViewModel = function () {\\r\\n\\t\\tvar viewModel = new SpinnerBox();\\r\\n\\r\\n\\t\\tviewModel.init();\\r\\n\\r\\n\\t\\treturn viewModel;\\r\\n\\t};\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tviewModel: {\\r\\n\\t\\t\\tcreateViewModel: createViewModel,\\r\\n\\t\\t},\\r\\n\\t};\\r\\n});\\r\\n\\n\",\n    \"define(\\r\\n    'modules/InstrumentsSearchModule',\\r\\n    [\\r\\n        'require',\\r\\n        'knockout',\\r\\n        'handlers/general',\\r\\n        'vendor/latinize'\\r\\n    ],\\r\\n    function (require) {\\r\\n        var ko = require('knockout'),\\r\\n            general = require('handlers/general'),\\r\\n            latinize = require('vendor/latinize'),\\r\\n            binaryEnum = {\\r\\n                bx10000000: parseInt('10000000', 2),\\r\\n                bx01000000: parseInt('01000000', 2),\\r\\n                bx00100000: parseInt('00100000', 2),\\r\\n                bx00010000: parseInt('00010000', 2),\\r\\n\\r\\n                bx00001000: parseInt('00001000', 2),\\r\\n                bx00000100: parseInt('00000100', 2),\\r\\n                bx00000010: parseInt('00000010', 2),\\r\\n                bx00000001: parseInt('00000001', 2)\\r\\n            },\\r\\n            scoresConfig = [\\r\\n                {\\r\\n                    field: 'instrumentName',\\r\\n                    startWithScore: binaryEnum.bx10000000,\\r\\n                    middleOfScore: binaryEnum.bx00001000\\r\\n                },\\r\\n                {\\r\\n                    field: 'symbolName',\\r\\n                    startWithScore: binaryEnum.bx01000000,\\r\\n                    middleOfScore: binaryEnum.bx00000100\\r\\n                }, {\\r\\n                    field: 'fullName',\\r\\n                    startWithScore: binaryEnum.bx00100000,\\r\\n                    middleOfScore: binaryEnum.bx00000010\\r\\n                }, {\\r\\n                    field: 'fullText',\\r\\n                    startWithScore: binaryEnum.bx00010000,\\r\\n                    middleOfScore: binaryEnum.bx00000001\\r\\n                }\\r\\n            ],\\r\\n            charactersToEscapeRegex = /[-[\\\\]{}()*+?.,\\\\\\\\/^$|#\\\\s]/g;\\r\\n\\r\\n        function InstrumentsSearchModuleClass(instruments) {\\r\\n            var allInstruments = instruments || ko.observableArray([]),\\r\\n                prevSearchString = \\\"\\\",\\r\\n                searchResult = ko.observableArray();\\r\\n\\r\\n            function getInstrumentIndex(instrument) {\\r\\n                var index = allInstruments().findIndex(function (item) {\\r\\n                    return item.id === instrument.id;\\r\\n                });\\r\\n\\r\\n                return index;\\r\\n            }\\r\\n\\r\\n            function buildScores(arrayToSearchFor, searchString) {\\r\\n                var latinizedSearchString = latinize(searchString)\\r\\n                    .replace(charactersToEscapeRegex, '\\\\\\\\$&');\\r\\n\\r\\n                var matchRegex = new RegExp('(' + latinizedSearchString + ')', 'im');\\r\\n\\r\\n                var scores = arrayToSearchFor.map(function (instrument) {\\r\\n                    var index = getInstrumentIndex(instrument),\\r\\n                        score = 0;\\r\\n\\r\\n                    scoresConfig.forEach(function (scoreConfig) {\\r\\n                        if (!instrument[scoreConfig.field]) {\\r\\n                            return;\\r\\n                        }\\r\\n\\r\\n                        var match = latinize(instrument[scoreConfig.field]).match(matchRegex);\\r\\n\\r\\n                        if (!general.isNullOrUndefined(match)) {\\r\\n                            if (match.index === 0) {\\r\\n                                score = scoreConfig.startWithScore | score;\\r\\n                            }\\r\\n\\r\\n                            if (match.index > 0) {\\r\\n                                score = scoreConfig.middleOfScore | score;\\r\\n                            }\\r\\n                        }\\r\\n                    });\\r\\n\\r\\n                    return {\\r\\n                        idx: index,\\r\\n                        ccyOrder: instrument.ccyOrder,\\r\\n                        score: score\\r\\n                    };\\r\\n                });\\r\\n\\r\\n                return scores;\\r\\n            }\\r\\n\\r\\n            function getResultsFromScores(scores) {\\r\\n                return scores.map(function (element) {\\r\\n                    return allInstruments()[element.idx];\\r\\n                });\\r\\n            }\\r\\n\\r\\n            function searchInternal(arrayToSearchFor, searchString) {\\r\\n                var scores = buildScores(arrayToSearchFor, searchString);\\r\\n\\r\\n                scores = scores.filter(function (element) {\\r\\n                    return element.score && element.score > 0;\\r\\n                });\\r\\n\\r\\n                scores.sort(function (elementA, elementB) {\\r\\n                    var dif = elementB.score - elementA.score;\\r\\n\\r\\n                    if (dif === 0) {\\r\\n                        dif = elementA.ccyOrder - elementB.ccyOrder;\\r\\n                    }\\r\\n\\r\\n                    return dif;\\r\\n                });\\r\\n\\r\\n                var results = getResultsFromScores(scores);\\r\\n\\r\\n                searchResult(results);\\r\\n                prevSearchString = searchString;\\r\\n\\r\\n                return results;\\r\\n            }\\r\\n\\r\\n            function canReusePreviousSearch(searchString) {\\r\\n                return (\\\"\\\" === prevSearchString) || (0 !== searchString.toLowerCase().indexOf(prevSearchString.toLowerCase())) || (0 >= searchResult().length);\\r\\n            }\\r\\n\\r\\n            function typingSearch(searchString) {\\r\\n                if (searchString.term) {\\r\\n                    searchString = searchString.term;\\r\\n                }\\r\\n\\r\\n                if (canReusePreviousSearch(searchString)) {\\r\\n                    return searchInternal(allInstruments(), searchString);\\r\\n                } else {\\r\\n                    return searchInternal(searchResult(), searchString);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            function search(searchString) {\\r\\n                return searchInternal(allInstruments(), searchString);\\r\\n            }\\r\\n\\r\\n            function dispose() {\\r\\n                allInstruments = null;\\r\\n                searchResult.removeAll();\\r\\n                prevSearchString = \\\"\\\";\\r\\n            }\\r\\n\\r\\n            return {\\r\\n                dispose: dispose,\\r\\n                search: search,\\r\\n                typingSearch: typingSearch,\\r\\n                searchResult: searchResult\\r\\n            };\\r\\n        }\\r\\n\\r\\n        return InstrumentsSearchModuleClass;\\r\\n    }\\r\\n);\\n\",\n    \"define('widgets/AutocompleteWidget',[\\r\\n\\t\\\"require\\\",\\r\\n\\t\\\"jquery\\\",\\r\\n\\t\\\"vendor/jquery-ui\\\",\\r\\n\\t\\\"knockout\\\",\\r\\n\\t\\\"handlers/general\\\",\\r\\n\\t\\\"modules/FavoriteInstrumentsManager\\\",\\r\\n\\t\\\"modules/InstrumentsSearchModule\\\",\\r\\n\\t\\\"initdatamanagers/InstrumentsManager\\\",\\r\\n\\t\\\"vendor/latinize\\\",\\r\\n], function (require) {\\r\\n\\tvar ko = require(\\\"knockout\\\"),\\r\\n\\t\\tgeneral = require(\\\"handlers/general\\\"),\\r\\n\\t\\t$ = require(\\\"jquery\\\"),\\r\\n\\t\\tfavoriteInstrumentsManager = require(\\\"modules/FavoriteInstrumentsManager\\\"),\\r\\n\\t\\tinstrumentsSearchModule = require(\\\"modules/InstrumentsSearchModule\\\"),\\r\\n\\t\\tlatinize = require(\\\"vendor/latinize\\\"),\\r\\n\\t\\tInstrumentsManager = require(\\\"initdatamanagers/InstrumentsManager\\\");\\r\\n\\r\\n\\tvar fxautocomplete = $.widget(\\\"fx.fxautocomplete\\\", $.ui.autocomplete, {\\r\\n\\t\\t_create: function () {\\r\\n\\t\\t\\tvar sourceArray = this.options.source;\\r\\n\\t\\t\\tthis.selectedObservable = this.options.selected;\\r\\n\\t\\t\\tthis.hideDelay = this.options.hideDelay || 0;\\r\\n\\t\\t\\tthis.customCloseButton = this.options.customCloseButton || false;\\r\\n\\t\\t\\tthis.contentMaxHeight = this.options.contentMaxHeight || -1;\\r\\n\\t\\t\\tthis.showIcons = this.options.showIcons || false;\\r\\n\\t\\t\\tthis.isEditFavoritesView = this.options.isEditFavoritesView;\\r\\n\\t\\t\\tthis.searchResultPostBoxTopic = this.options.searchResultPostBoxTopic;\\r\\n\\t\\t\\tthis.noResultMatch = {\\r\\n\\t\\t\\t\\tcategory: \\\"\\\",\\r\\n\\t\\t\\t\\tvalue: this.options.noResultText || \\\"\\\",\\r\\n\\t\\t\\t\\tid: -1,\\r\\n\\t\\t\\t};\\r\\n\\t\\t\\tthis.hasCategories = !!this.options.hasCategories;\\r\\n\\t\\t\\tthis.itemImageClassProperty = this.options.itemImageClassProperty || false;\\r\\n\\t\\t\\tthis.itemImageClassPrefix = this.options.itemImageClassPrefix || \\\"\\\";\\r\\n\\t\\t\\tthis.expression = this.options.matchFromBeginning ? \\\"^\\\" : \\\"\\\";\\r\\n\\t\\t\\tthis.renderInstruments = !!this.options.renderInstruments;\\r\\n\\r\\n\\t\\t\\tif (this.renderInstruments) {\\r\\n\\t\\t\\t\\tthis.hasCategories = false;\\r\\n\\t\\t\\t\\tthis.showIcons = true;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar sourceFn = function (request, response) {\\r\\n\\t\\t\\t\\tvar not_latized = $.ui.autocomplete.escapeRegex(request.term),\\r\\n\\t\\t\\t\\t\\tlatinized = $.ui.autocomplete.escapeRegex(latinize(request.term)),\\r\\n\\t\\t\\t\\t\\tmatcher = new RegExp(this.expression + \\\"(\\\" + not_latized + \\\"|\\\" + latinized + \\\")\\\", \\\"i\\\");\\r\\n\\r\\n\\t\\t\\t\\tvar matches = ko.toJS(sourceArray).filter(function (item) {\\r\\n\\t\\t\\t\\t\\tvar found = false;\\r\\n\\t\\t\\t\\t\\tif (general.isStringType(item.fullText)) {\\r\\n\\t\\t\\t\\t\\t\\tfound = matcher.test(item.fullText);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif (general.isStringType(item.text)) {\\r\\n\\t\\t\\t\\t\\t\\tfound = found || matcher.test(item.text);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\treturn found;\\r\\n\\t\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\t\\tif (!matches.length) {\\r\\n\\t\\t\\t\\t\\tmatches.push(this.noResultMatch);\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tresponse(matches);\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\tvar instrumentsSearch = function (request, response) {\\r\\n\\t\\t\\t\\tvar matches = this.instrumentsSearchInstance.typingSearch(request.term);\\r\\n\\r\\n\\t\\t\\t\\tif (!matches.length) {\\r\\n\\t\\t\\t\\t\\tmatches.push(this.noResultMatch);\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tresponse(matches);\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\tif (this.renderInstruments) {\\r\\n\\t\\t\\t\\tthis.instrumentsSearchInstance = new instrumentsSearchModule(sourceArray);\\r\\n\\t\\t\\t\\tthis._setOption(\\\"source\\\", instrumentsSearch);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tthis._setOption(\\\"source\\\", sourceFn);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis._setOption(\\\"focus\\\", function (event) {\\r\\n\\t\\t\\t\\tevent.preventDefault();\\r\\n\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\tthis._super();\\r\\n\\t\\t\\tthis.registerEvents();\\r\\n\\r\\n\\t\\t\\tif (this.options.hasInitialValue && this.selectedObservable()) {\\r\\n\\t\\t\\t\\t$(this.element).val(this.selectedObservable().value);\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_destroy: function () {\\r\\n\\t\\t\\tif (this.instrumentsSearchInstance) {\\r\\n\\t\\t\\t\\tthis.instrumentsSearchInstance.dispose();\\r\\n\\t\\t\\t\\tthis.instrumentsSearchInstance = null;\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_suggest: function (items) {\\r\\n\\t\\t\\tvar ul = this.menu.element.empty();\\r\\n\\t\\t\\tthis._renderMenu(ul, items);\\r\\n\\t\\t\\tthis.isNewMenu = true;\\r\\n\\t\\t\\tthis.menu.refresh();\\r\\n\\r\\n\\t\\t\\t$(ul).css(\\\"top\\\", 0);\\r\\n\\r\\n\\t\\t\\tul.show().removeClass(\\\"custom-autocomplete-hidden\\\").addClass(\\\"custom-autocomplete-visible\\\");\\r\\n\\r\\n\\t\\t\\tthis._resizeMenu();\\r\\n\\r\\n\\t\\t\\tul.position($.extend({ of: this.element }, this.options.position));\\r\\n\\r\\n\\t\\t\\tif (this.options.autoFocus) {\\r\\n\\t\\t\\t\\tthis.menu.next();\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (this.contentMaxHeight > 0) {\\r\\n\\t\\t\\t\\tif ($(ul).height() < this.contentMaxHeight) {\\r\\n\\t\\t\\t\\t\\t$(this.options.appendTo).height($(ul).height());\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t$(this.options.appendTo).height(this.contentMaxHeight);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t$(ul).animate({ scrollTop: 0 }, 0);\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_close: function (event) {\\r\\n\\t\\t\\tvar ctx = this;\\r\\n\\r\\n\\t\\t\\tif (ctx.menu.element.is(\\\":visible\\\")) {\\r\\n\\t\\t\\t\\t//ignore efix custom close if customCloseButton exists because is trigger on blur\\r\\n\\t\\t\\t\\tctx.menu.element.removeClass(\\\"custom-autocomplete-visible\\\").addClass(\\\"custom-autocomplete-hidden\\\");\\r\\n\\r\\n\\t\\t\\t\\tsetTimeout(function () {\\r\\n\\t\\t\\t\\t\\tctx.menu.element.hide();\\r\\n\\t\\t\\t\\t\\tctx.menu.blur();\\r\\n\\t\\t\\t\\t\\tctx.isNewMenu = true;\\r\\n\\t\\t\\t\\t\\tctx._trigger(\\\"close\\\", event);\\r\\n\\r\\n\\t\\t\\t\\t\\tif (ctx.contentMaxHeight > 0) {\\r\\n\\t\\t\\t\\t\\t\\t$(ctx.options.appendTo).height(ctx.contentMaxHeight);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}, ctx.hideDelay);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (this.searchResultPostBoxTopic) {\\r\\n\\t\\t\\t\\tko.postbox.publish(this.searchResultPostBoxTopic, { hasResults: false });\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tregisterEvents: function () {\\r\\n\\t\\t\\tvar ctx = this,\\r\\n\\t\\t\\t\\tinput = $(ctx.element);\\r\\n\\r\\n\\t\\t\\tif (ctx.customCloseButton) {\\r\\n\\t\\t\\t\\tctx.customCloseButton.on(\\\"click\\\", function () {\\r\\n\\t\\t\\t\\t\\tinput.val(\\\"\\\").trigger(\\\"change\\\");\\r\\n\\t\\t\\t\\t\\tctx.menu.element.hide();\\r\\n\\t\\t\\t\\t\\tctx._trigger(\\\"close\\\");\\r\\n\\r\\n\\t\\t\\t\\t\\tif (this.searchResultPostBoxTopic) {\\r\\n\\t\\t\\t\\t\\t\\tko.postbox.publish(this.searchResultPostBoxTopic, { hasResults: false });\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t});\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t//ignore blur function if customCloseButton exists\\r\\n\\t\\t\\t\\tinput.on(\\\"blur\\\", function () {\\r\\n\\t\\t\\t\\t\\tinput.val(\\\"\\\").trigger(\\\"change\\\");\\r\\n\\t\\t\\t\\t});\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tctx._on(ctx.menu.element, {\\r\\n\\t\\t\\t\\tmenuselect: function (event, ui) {\\r\\n\\t\\t\\t\\t\\tvar selectedItem = ui.item.data(\\\"ui-autocomplete-item\\\"),\\r\\n\\t\\t\\t\\t\\t\\ticonStar = $(ui.item).find(\\\".icon-star-full\\\");\\r\\n\\r\\n\\t\\t\\t\\t\\tif (!this.options.keepTextAfterSelect || selectedItem.id === this.noResultMatch.id) {\\r\\n\\t\\t\\t\\t\\t\\tinput.val(\\\"\\\").trigger(\\\"change\\\");\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif (!selectedItem.isGroup) {\\r\\n\\t\\t\\t\\t\\t\\tctx.selectedObservable(selectedItem);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif (iconStar.length > 0) {\\r\\n\\t\\t\\t\\t\\t\\t$(iconStar).toggleClass(\\\"favorite\\\");\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\tctx._on(ctx.element, {\\r\\n\\t\\t\\t\\tkeydown: function (event) {\\r\\n\\t\\t\\t\\t\\tvar keyCode = $.ui.keyCode;\\r\\n\\t\\t\\t\\t\\tvar activeElement = ctx.menu.active;\\r\\n\\r\\n\\t\\t\\t\\t\\tswitch (event.keyCode) {\\r\\n\\t\\t\\t\\t\\t\\tcase keyCode.UP:\\r\\n\\t\\t\\t\\t\\t\\t\\tif (\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgeneral.isNullOrUndefined(activeElement) ||\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tactiveElement.hasClass(\\\"autocomplete-group\\\")\\r\\n\\t\\t\\t\\t\\t\\t\\t) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tctx._keyEvent(\\\"previous\\\", event);\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase keyCode.DOWN:\\r\\n\\t\\t\\t\\t\\t\\t\\tif (\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgeneral.isNullOrUndefined(activeElement) ||\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tactiveElement.hasClass(\\\"autocomplete-group\\\")\\r\\n\\t\\t\\t\\t\\t\\t\\t) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tctx._keyEvent(\\\"next\\\", event);\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\tkeyup: function (event) {\\r\\n\\t\\t\\t\\t\\tvar keyCode = $.ui.keyCode;\\r\\n\\r\\n\\t\\t\\t\\t\\tswitch (event.keyCode) {\\r\\n\\t\\t\\t\\t\\t\\tcase keyCode.BACKSPACE:\\r\\n\\t\\t\\t\\t\\t\\tcase keyCode.DELETE:\\r\\n\\t\\t\\t\\t\\t\\t\\tif (\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tctx.options.hideDropDownWhenNotEnoughLetters &&\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$(ctx.element).val().length < ctx.options.minLength\\r\\n\\t\\t\\t\\t\\t\\t\\t) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$(ctx.options.appendTo).hide();\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t});\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\toptions: {\\r\\n\\t\\t\\tminLength: 2,\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_renderMenu: function (ul, items) {\\r\\n\\t\\t\\tvar ctx = this;\\r\\n\\r\\n\\t\\t\\tif (this.searchResultPostBoxTopic) {\\r\\n\\t\\t\\t\\tko.postbox.publish(this.searchResultPostBoxTopic, { hasResults: true });\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (ctx.hasCategories) {\\r\\n\\t\\t\\t\\tctx._renderItemsWithCategories(ul, items);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tctx._renderItems(ul, items);\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_renderItems: function (ul, items) {\\r\\n\\t\\t\\tvar ctx = this;\\r\\n\\r\\n\\t\\t\\t$.each(items, function (index, item) {\\r\\n\\t\\t\\t\\tctx._renderItemData(ul, item);\\r\\n\\t\\t\\t});\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_renderItemsWithCategories: function (ul, items) {\\r\\n\\t\\t\\tvar ctx = this;\\r\\n\\t\\t\\tvar categories = [];\\r\\n\\r\\n\\t\\t\\t$.each(items, function (index, item) {\\r\\n\\t\\t\\t\\tif (categories.indexOf(item.category) === -1) {\\r\\n\\t\\t\\t\\t\\tcategories.push(item.category);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\t$.each(categories, function (categoryIndex, category) {\\r\\n\\t\\t\\t\\tif (!(items.length === 1 && items[0].id === -1)) {\\r\\n\\t\\t\\t\\t\\t//no result case\\r\\n\\t\\t\\t\\t\\tvar categoryItem = {\\r\\n\\t\\t\\t\\t\\t\\tlabel: category,\\r\\n\\t\\t\\t\\t\\t\\tisGroup: true,\\r\\n\\t\\t\\t\\t\\t\\tcategory: \\\"\\\",\\r\\n\\t\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\t\\tctx._renderItemData(ul, categoryItem);\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t$.each(items, function (index, item) {\\r\\n\\t\\t\\t\\t\\tif (item.category === category) {\\r\\n\\t\\t\\t\\t\\t\\tctx._renderItemData(ul, item);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t});\\r\\n\\t\\t\\t});\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_renderItem: function (ul, item) {\\r\\n\\t\\t\\tif (this.renderInstruments) {\\r\\n\\t\\t\\t\\treturn this._renderInstrumentItem(ul, item);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\treturn this._renderOtherItem(ul, item);\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_renderOtherItem: function (ul, item) {\\r\\n\\t\\t\\tvar re = new RegExp(this.expression + \\\"(\\\" + $.ui.autocomplete.escapeRegex(this.term) + \\\")\\\", \\\"gi\\\"),\\r\\n\\t\\t\\t\\ttemplate = \\\"<b class='bold'>$1</b>\\\",\\r\\n\\t\\t\\t\\tli = $(\\\"<li>\\\"),\\r\\n\\t\\t\\t\\tlabel = item.label.replace(re, template);\\r\\n\\r\\n\\t\\t\\tif (this.itemImageClassProperty && item[this.itemImageClassProperty]) {\\r\\n\\t\\t\\t\\tvar classValue = \\\"list-flag \\\" + this.itemImageClassPrefix + item[this.itemImageClassProperty];\\r\\n\\t\\t\\t\\t$(\\\"<i/>\\\", { class: classValue }).appendTo(li);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t$(\\\"<span/>\\\", {\\r\\n\\t\\t\\t\\tclass: \\\"text-holder\\\",\\r\\n\\t\\t\\t})\\r\\n\\t\\t\\t\\t.html(label)\\r\\n\\t\\t\\t\\t.appendTo(li);\\r\\n\\r\\n\\t\\t\\tif (this.selectedObservable() && this.selectedObservable().id === item.id) {\\r\\n\\t\\t\\t\\tli = li.addClass(\\\"selected\\\");\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn li.appendTo(ul);\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_renderInstrumentItem: function (ul, item) {\\r\\n\\t\\t\\tvar re = new RegExp(\\\"(\\\" + $.ui.autocomplete.escapeRegex(this.term) + \\\")\\\", \\\"gi\\\"),\\r\\n\\t\\t\\t\\ttemplate = \\\"<b class='bold'>$1</b>\\\",\\r\\n\\t\\t\\t\\tli = $(\\\"<li>\\\"),\\r\\n\\t\\t\\t\\tlabel = item.label.replace(re, template);\\r\\n\\r\\n\\t\\t\\tif (!item.isGroup) {\\r\\n\\t\\t\\t\\tlabel =\\r\\n\\t\\t\\t\\t\\t\\\"<div class='text-holder instrument-name found-results'>\\\" +\\r\\n\\t\\t\\t\\t\\tlabel +\\r\\n\\t\\t\\t\\t\\t'<br /><span class=\\\"category-name\\\">' +\\r\\n\\t\\t\\t\\t\\titem.category +\\r\\n\\t\\t\\t\\t\\t\\\"</span>\\\" +\\r\\n\\t\\t\\t\\t\\t\\\"</div>\\\" +\\r\\n\\t\\t\\t\\t\\t(this.isEditFavoritesView ? \\\"\\\" : \\\"<div class='text-holder'><span class='tick'></span></div>\\\");\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (item.isGroup) {\\r\\n\\t\\t\\t\\tli.addClass(\\\"autocomplete-group\\\");\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (item.id === -1) {\\r\\n\\t\\t\\t\\tli.addClass(\\\"noresults\\\");\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (this.showIcons) {\\r\\n\\t\\t\\t\\tvar iconWrapper = $(\\\"<div>\\\").addClass(\\\"instr-wrapper\\\"),\\r\\n\\t\\t\\t\\t\\tinstrSymbol = $(\\\"<div>\\\").addClass(\\\"instr-symbol\\\"),\\r\\n\\t\\t\\t\\t\\tfavorite = $(\\\"<span>\\\").addClass(\\\"icon-star-full\\\"),\\r\\n\\t\\t\\t\\t\\tdefaultIcon = $(\\\"<span>\\\").addClass(\\\"default\\\"),\\r\\n\\t\\t\\t\\t\\tbaseIcon = $(\\\"<i>\\\").addClass(\\\"base currency _\\\" + item.baseSymbolId),\\r\\n\\t\\t\\t\\t\\totherIcon = $(\\\"<i>\\\").addClass(\\\"other currency _\\\" + item.otherSymbolId);\\r\\n\\r\\n\\t\\t\\t\\tif (favoriteInstrumentsManager.IsFavoriteInstrument(item.id)) {\\r\\n\\t\\t\\t\\t\\tfavorite.addClass(\\\"favorite\\\");\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif (this.showIcons && !item.isGroup && item.id !== -1) {\\r\\n\\t\\t\\t\\t\\tdefaultIcon[0].innerText = InstrumentsManager.GetInstrumentFirstChar(item.id);\\r\\n\\t\\t\\t\\t\\tlabel =\\r\\n\\t\\t\\t\\t\\t\\ticonWrapper\\r\\n\\t\\t\\t\\t\\t\\t\\t.append(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tinstrSymbol\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t.addClass(\\\"instr-\\\" + item.id)\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t.append(baseIcon.append(defaultIcon))\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t.append(otherIcon)\\r\\n\\t\\t\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t\\t\\t\\t.prop(\\\"outerHTML\\\") + label;\\r\\n\\r\\n\\t\\t\\t\\t\\tif (this.isEditFavoritesView) {\\r\\n\\t\\t\\t\\t\\t\\tlabel += favorite.prop(\\\"outerHTML\\\");\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (this.selectedObservable() && this.selectedObservable().id === item.id && !item.isGroup) {\\r\\n\\t\\t\\t\\tli = li.addClass(\\\"selected\\\");\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn li.html(label).appendTo(ul);\\r\\n\\t\\t},\\r\\n\\t});\\r\\n\\r\\n\\treturn fxautocomplete;\\r\\n});\\r\\n\\n\",\n    \"define('helpers/CustomKOBindings/AutocompleteBinding',[\\r\\n\\t\\\"require\\\",\\r\\n\\t\\\"jquery\\\",\\r\\n\\t\\\"knockout\\\",\\r\\n\\t\\\"handlers/general\\\",\\r\\n\\t\\\"widgets/AutocompleteWidget\\\",\\r\\n\\t\\\"configuration/initconfiguration\\\",\\r\\n], function (require) {\\r\\n\\tvar ko = require(\\\"knockout\\\"),\\r\\n\\t\\tgeneral = require(\\\"handlers/general\\\"),\\r\\n\\t\\tinitConfiguration = require(\\\"configuration/initconfiguration\\\"),\\r\\n\\t\\t$ = require(\\\"jquery\\\");\\r\\n\\r\\n\\tko.bindingHandlers.autocomplete = {\\r\\n\\t\\tinit: function (element, valueAccessor) {\\r\\n\\t\\t\\tvar options = valueAccessor(),\\r\\n\\t\\t\\t\\tdomElement = options.elementType,\\r\\n\\t\\t\\t\\tselectedSubscriber,\\r\\n\\t\\t\\t\\tsourceSubscriber,\\r\\n\\t\\t\\t\\tminLength = options.minLength,\\r\\n\\t\\t\\t\\t$autocompleteWrapper = $(\\\".\\\" + options.autocompleteWrapperClass),\\r\\n\\t\\t\\t\\t$predefinedOptionsList = $autocompleteWrapper.find(\\\".\\\" + options.predefinedOptionsListClass),\\r\\n\\t\\t\\t\\tsearchPostBoxTopic = options.searchPostBoxTopic,\\r\\n\\t\\t\\t\\tselectPostBoxTopic = options.selectPostBoxTopic,\\r\\n\\t\\t\\t\\tfirstSearch = true;\\r\\n\\r\\n\\t\\t\\tselectedSubscriber = options.selected.subscribe(function selectedInstrumentChanged(item) {\\r\\n\\t\\t\\t\\tif (!item || !general.isDefinedType(item.id)) {\\r\\n\\t\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif (Browser.isInternetExplorer() && firstSearch) {\\r\\n\\t\\t\\t\\t\\tfirstSearch = false;\\r\\n\\t\\t\\t\\t\\tsetTimeout(\\r\\n\\t\\t\\t\\t\\t\\tfunction (elementToFocus) {\\r\\n\\t\\t\\t\\t\\t\\t\\t$(elementToFocus).trigger(\\\"focus\\\");\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\tinitConfiguration.AutoCompleteConfiguration.IEFirstSearchTimeOut,\\r\\n\\t\\t\\t\\t\\t\\toptions.elementToFocusOnChange + item.id\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t} else if (options.elementToFocusOnChange) {\\r\\n\\t\\t\\t\\t\\tsetTimeout(\\r\\n\\t\\t\\t\\t\\t\\tfunction (elementToFocus) {\\r\\n\\t\\t\\t\\t\\t\\t\\t$(elementToFocus).trigger(\\\"focus\\\");\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\t100,\\r\\n\\t\\t\\t\\t\\t\\toptions.elementToFocusOnChange + item.id\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif (item.hideDropDown) {\\r\\n\\t\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif (domElement !== \\\"input.mobile\\\") {\\r\\n\\t\\t\\t\\t\\t$autocompleteWrapper.toggle();\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t$(options.triggerFrom).toggleClass(\\\"focus\\\");\\r\\n\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\tfunction adjustListHeight() {\\r\\n\\t\\t\\t\\tvar listHeight = $(options.appendTo).find(\\\"ul:visible\\\").outerHeight();\\r\\n\\t\\t\\t\\tvar containerHeight = Math.min(listHeight, options.contentMaxHeight || 180) + 1;\\r\\n\\r\\n\\t\\t\\t\\t$(options.appendTo).css(\\\"height\\\", containerHeight + \\\"px\\\");\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction resetTopPosition() {\\r\\n\\t\\t\\t\\tvar listContainer = $(options.appendTo).closest(\\\"div:visible\\\").find(\\\".jspPane\\\");\\r\\n\\r\\n\\t\\t\\t\\tlistContainer.css(\\\"top\\\", 0);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction adjustPosition() {\\r\\n\\t\\t\\t\\tvar windowHeight = $(window).height(),\\r\\n\\t\\t\\t\\t\\twindowScrollTop = $(window).scrollTop(),\\r\\n\\t\\t\\t\\t\\tautocompleteWrapperHeight = $autocompleteWrapper.outerHeight(),\\r\\n\\t\\t\\t\\t\\tinputOffsetTop = $(element).offset().top,\\r\\n\\t\\t\\t\\t\\tinputHeight = $(\\\"#\\\" + options.relativeFieldId).outerHeight();\\r\\n\\r\\n\\t\\t\\t\\tvar $searchBoxElement = $autocompleteWrapper.find(\\\".ui-autocomplete-input\\\");\\r\\n\\r\\n\\t\\t\\t\\tif (inputOffsetTop + inputHeight + autocompleteWrapperHeight > windowHeight + windowScrollTop) {\\r\\n\\t\\t\\t\\t\\t$autocompleteWrapper.css(\\\"bottom\\\", inputHeight + \\\"px\\\");\\r\\n\\t\\t\\t\\t\\t$searchBoxElement.appendTo($autocompleteWrapper);\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t$autocompleteWrapper.css(\\\"bottom\\\", \\\"\\\");\\r\\n\\t\\t\\t\\t\\t$searchBoxElement.prependTo($autocompleteWrapper);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction buildForMobile() {\\r\\n\\t\\t\\t\\tvar customized = $autocompleteWrapper.parent().find(\\\".customized\\\"),\\r\\n\\t\\t\\t\\t\\tcloseButton = $autocompleteWrapper.find(\\\".closeButton\\\");\\r\\n\\r\\n\\t\\t\\t\\t$(element).fxautocomplete({\\r\\n\\t\\t\\t\\t\\tsource: options.source,\\r\\n\\t\\t\\t\\t\\tselected: options.selected,\\r\\n\\t\\t\\t\\t\\tappendTo: options.appendTo,\\r\\n\\t\\t\\t\\t\\tshowIcons: options.showIcons,\\r\\n\\t\\t\\t\\t\\thasInitialValue: options.hasInitialValue,\\r\\n\\t\\t\\t\\t\\tkeepTextAfterSelect: options.keepTextAfterSelect,\\r\\n\\t\\t\\t\\t\\thideDropDownWhenNotEnoughLetters: options.hideDropDownWhenNotEnoughLetters,\\r\\n\\t\\t\\t\\t\\tcustomCloseButton: closeButton,\\r\\n\\t\\t\\t\\t\\tisEditFavoritesView: options.isEditFavoritesView,\\r\\n\\t\\t\\t\\t\\thasCategories: options.hasCategories,\\r\\n\\t\\t\\t\\t\\titemImageClassProperty: options.itemImageClassProperty,\\r\\n\\t\\t\\t\\t\\titemImageClassPrefix: options.itemImageClassPrefix,\\r\\n\\t\\t\\t\\t\\tmatchFromBeginning: options.matchFromBeginning,\\r\\n\\t\\t\\t\\t\\trenderInstruments: options.renderInstruments,\\r\\n\\t\\t\\t\\t\\tnoResultText: options.noResultText,\\r\\n\\t\\t\\t\\t\\tsearchResultPostBoxTopic: options.searchResultPostBoxTopic,\\r\\n\\t\\t\\t\\t\\tminLength: minLength,\\r\\n\\t\\t\\t\\t\\topen: function () {\\r\\n\\t\\t\\t\\t\\t\\tcustomized.hide();\\r\\n\\t\\t\\t\\t\\t\\t$(options.appendTo).show();\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\tselect: function (event, ui) {\\r\\n\\t\\t\\t\\t\\t\\tko.postbox.publish(\\\"search-interaction\\\", { Instrument: { id: ui.item.id } });\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif (options.hideDropDownAfterSelect) {\\r\\n\\t\\t\\t\\t\\t\\t\\t$(options.appendTo).hide();\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\tclose: function () {\\r\\n\\t\\t\\t\\t\\t\\tcustomized.show();\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\tsearch: function (event, ui) {\\r\\n\\t\\t\\t\\t\\t\\tko.postbox.publish(\\\"search\\\", { Characters: event.target.value });\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t});\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tswitch (domElement) {\\r\\n\\t\\t\\t\\tcase \\\"select\\\":\\r\\n\\t\\t\\t\\t\\t$(element).fxautocomplete({\\r\\n\\t\\t\\t\\t\\t\\tsource: options.source,\\r\\n\\t\\t\\t\\t\\t\\tselected: options.selected,\\r\\n\\t\\t\\t\\t\\t\\tappendTo: options.appendTo,\\r\\n\\t\\t\\t\\t\\t\\tcontentMaxHeight: options.contentMaxHeight,\\r\\n\\t\\t\\t\\t\\t\\thasCategories: options.hasCategories,\\r\\n\\t\\t\\t\\t\\t\\titemImageClassProperty: options.itemImageClassProperty,\\r\\n\\t\\t\\t\\t\\t\\titemImageClassPrefix: options.itemImageClassPrefix,\\r\\n\\t\\t\\t\\t\\t\\trenderInstruments: options.renderInstruments,\\r\\n\\t\\t\\t\\t\\t\\tnoResultText: options.noResultText,\\r\\n\\t\\t\\t\\t\\t\\tmatchFromBeginning: options.matchFromBeginning,\\r\\n\\t\\t\\t\\t\\t\\tselect: function (event, ui) {\\r\\n\\t\\t\\t\\t\\t\\t\\tko.postbox.publish(\\\"deal-slip-search-interaction\\\", { Instrument: { id: ui.item.id } });\\r\\n\\t\\t\\t\\t\\t\\t\\tif (selectPostBoxTopic) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tko.postbox.publish(selectPostBoxTopic, ui.item.id);\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\tsearch: function (event, ui) {\\r\\n\\t\\t\\t\\t\\t\\t\\tko.postbox.publish(\\\"deal-slip-search\\\", { Characters: event.target.value });\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tadjustListHeight();\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\topen: function () {\\r\\n\\t\\t\\t\\t\\t\\t\\t$(\\\".ui-autocomplete\\\").off(\\\"menufocus hover mouseover mouseenter\\\");\\r\\n\\t\\t\\t\\t\\t\\t\\t$predefinedOptionsList.hide();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif (searchPostBoxTopic) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tko.postbox.publish(searchPostBoxTopic);\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\tclose: function (event, ui) {\\r\\n\\t\\t\\t\\t\\t\\t\\t$predefinedOptionsList.show();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif (searchPostBoxTopic) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tko.postbox.publish(searchPostBoxTopic);\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\tminLength: minLength,\\r\\n\\t\\t\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\t\\t\\t// close when clicking elsewhere of the autocompletewrapper\\r\\n\\t\\t\\t\\t\\t$autocompleteWrapper.uniqueId();\\r\\n\\r\\n\\t\\t\\t\\t\\t$(document).on(\\\"click.\\\" + $autocompleteWrapper.attr(\\\"id\\\"), function (event) {\\r\\n\\t\\t\\t\\t\\t\\tif (\\r\\n\\t\\t\\t\\t\\t\\t\\t!$(event.target).closest($autocompleteWrapper).length &&\\r\\n\\t\\t\\t\\t\\t\\t\\t!$(event.target).is($autocompleteWrapper) &&\\r\\n\\t\\t\\t\\t\\t\\t\\t!$(event.target).is($(options.triggerFrom)) &&\\r\\n\\t\\t\\t\\t\\t\\t\\t!$(event.target).is($(options.triggerFrom).find(\\\"span\\\")) &&\\r\\n\\t\\t\\t\\t\\t\\t\\t$autocompleteWrapper.is(\\\":visible\\\")\\r\\n\\t\\t\\t\\t\\t\\t) {\\r\\n\\t\\t\\t\\t\\t\\t\\t$autocompleteWrapper.hide();\\r\\n\\t\\t\\t\\t\\t\\t\\t$(options.triggerFrom).toggleClass(\\\"focus\\\");\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\t\\t\\t$(options.triggerFrom)\\r\\n\\t\\t\\t\\t\\t\\t.on(\\\"mousedown\\\", function (e) {\\r\\n\\t\\t\\t\\t\\t\\t\\te.preventDefault();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t$autocompleteWrapper.toggle();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif (minLength === 0) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$(element).fxautocomplete(\\\"instance\\\").search(\\\"\\\");\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t$(options.triggerFrom).triggerHandler(\\\"focus\\\");\\r\\n\\t\\t\\t\\t\\t\\t\\t$(options.triggerFrom).toggleClass(\\\"focus\\\");\\r\\n\\t\\t\\t\\t\\t\\t})\\r\\n\\t\\t\\t\\t\\t\\t.on(\\\"focus\\\", function () {\\r\\n\\t\\t\\t\\t\\t\\t\\tadjustListHeight();\\r\\n\\t\\t\\t\\t\\t\\t\\tadjustPosition();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif (searchPostBoxTopic) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tko.postbox.publish(searchPostBoxTopic);\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\tcase \\\"input\\\":\\r\\n\\t\\t\\t\\t\\t$(element).fxautocomplete({\\r\\n\\t\\t\\t\\t\\t\\tsource: options.source,\\r\\n\\t\\t\\t\\t\\t\\tselected: options.selected,\\r\\n\\t\\t\\t\\t\\t\\tappendTo: options.appendTo,\\r\\n\\t\\t\\t\\t\\t\\tcontentMaxHeight: options.contentMaxHeight,\\r\\n\\t\\t\\t\\t\\t\\thasCategories: options.hasCategories,\\r\\n\\t\\t\\t\\t\\t\\titemImageClassProperty: options.itemImageClassProperty,\\r\\n\\t\\t\\t\\t\\t\\titemImageClassPrefix: options.itemImageClassPrefix,\\r\\n\\t\\t\\t\\t\\t\\trenderInstruments: options.renderInstruments,\\r\\n\\t\\t\\t\\t\\t\\tnoResultText: options.noResultText,\\r\\n\\t\\t\\t\\t\\t\\tmatchFromBeginning: options.matchFromBeginning,\\r\\n\\t\\t\\t\\t\\t\\tminLength: options.minLength,\\r\\n\\t\\t\\t\\t\\t\\tselect: function (event, ui) {\\r\\n\\t\\t\\t\\t\\t\\t\\tko.postbox.publish(\\\"search-interaction\\\", { Instrument: { id: ui.item.id } });\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\tclose: function (event, ui) {\\r\\n\\t\\t\\t\\t\\t\\t\\t$(options.appendTo).hide();\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\tsearch: function (event, ui) {\\r\\n\\t\\t\\t\\t\\t\\t\\t$(options.appendTo).show();\\r\\n\\t\\t\\t\\t\\t\\t\\tresetTopPosition();\\r\\n\\t\\t\\t\\t\\t\\t\\tko.postbox.publish(\\\"search\\\", { Characters: event.target.value });\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\topen: function () {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (searchPostBoxTopic) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tko.postbox.publish(searchPostBoxTopic);\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\tcase \\\"input.mobile\\\":\\r\\n\\t\\t\\t\\t\\tbuildForMobile();\\r\\n\\r\\n\\t\\t\\t\\t\\tif (typeof options.source === \\\"function\\\") {\\r\\n\\t\\t\\t\\t\\t\\tsourceSubscriber = options.source.subscribe(function () {\\r\\n\\t\\t\\t\\t\\t\\t\\t//rebuild for customize quotes, the ko binding is done faster than the VM\\r\\n\\t\\t\\t\\t\\t\\t\\t//updates the source of the autocomplete\\r\\n\\t\\t\\t\\t\\t\\t\\t$(element).fxautocomplete(\\\"destroy\\\");\\r\\n\\t\\t\\t\\t\\t\\t\\tbuildForMobile();\\r\\n\\t\\t\\t\\t\\t\\t});\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\tdefault:\\r\\n\\t\\t\\t\\t\\t$(element).fxautocomplete({\\r\\n\\t\\t\\t\\t\\t\\tsource: options.source,\\r\\n\\t\\t\\t\\t\\t\\tselected: options.selected,\\r\\n\\t\\t\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tko.utils.domNodeDisposal.addDisposeCallback(element, function () {\\r\\n\\t\\t\\t\\t$(document).off(\\\"click.\\\" + $autocompleteWrapper.attr(\\\"id\\\"));\\r\\n\\t\\t\\t\\tif (typeof $(element).fxautocomplete(\\\"instance\\\") !== \\\"undefined\\\") {\\r\\n\\t\\t\\t\\t\\t$(element).fxautocomplete(\\\"destroy\\\");\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif (selectedSubscriber) {\\r\\n\\t\\t\\t\\t\\tselectedSubscriber.dispose();\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif (sourceSubscriber) {\\r\\n\\t\\t\\t\\t\\tsourceSubscriber.dispose();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t});\\r\\n\\t\\t},\\r\\n\\t};\\r\\n});\\r\\n\\n\",\n    \"define('viewmodels/InstrumentPriceAlertViewModel',[\\r\\n\\t\\\"require\\\",\\r\\n\\t\\\"handlers/general\\\",\\r\\n\\t\\\"cachemanagers/activelimitsmanager\\\",\\r\\n\\t\\\"helpers/KoComponentViewModel\\\",\\r\\n\\t\\\"knockout\\\",\\r\\n], function (require) {\\r\\n\\tvar activeLimitsManager = require(\\\"cachemanagers/activelimitsmanager\\\"),\\r\\n\\t\\tko = require(\\\"knockout\\\"),\\r\\n\\t\\tgeneral = require(\\\"handlers/general\\\"),\\r\\n\\t\\tKoComponentViewModel = require(\\\"helpers/KoComponentViewModel\\\");\\r\\n\\r\\n\\tvar InstrumentPriceAlertViewModel = general.extendClass(KoComponentViewModel, function (params) {\\r\\n\\t\\tvar self = this,\\r\\n\\t\\t\\tparent = this.parent,\\r\\n\\t\\t\\tData = this.Data;\\r\\n\\r\\n\\t\\tif (!params.instrumentId) {\\r\\n\\t\\t\\tthrow new Error(\\\"Missing instrument id paramerter\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tData.isOn = params.isOnObservable || ko.observable();\\r\\n\\t\\tData.isOn(activeLimitsManager.HasPriceAlerts(ko.unwrap(params.instrumentId)));\\r\\n\\r\\n\\t\\tfunction onChange() {\\r\\n\\t\\t\\tData.isOn(activeLimitsManager.HasPriceAlerts(ko.unwrap(params.instrumentId)));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tactiveLimitsManager.OnChange.Add(onChange);\\r\\n\\t\\tif (ko.isObservable(params.instrumentId)) {\\r\\n\\t\\t\\tparams.instrumentId.subscribe(function () {\\r\\n\\t\\t\\t\\tonChange();\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction dispose() {\\r\\n\\t\\t\\tparent.dispose.call(self);\\r\\n\\t\\t\\tactiveLimitsManager.OnChange.Remove(onChange);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction onPriceAlertClick() {\\r\\n\\t\\t\\tif (params.hasOwnProperty(\\\"onPriceAlertClick\\\") && general.isFunctionType(params.onPriceAlertClick)) {\\r\\n\\t\\t\\t\\tparams.onPriceAlertClick({ instrumentId: params.instrumentId });\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tdispose: dispose,\\r\\n\\t\\t\\tData: Data,\\r\\n\\t\\t\\tOnPriceAlertClick: onPriceAlertClick,\\r\\n\\t\\t};\\r\\n\\t});\\r\\n\\r\\n\\tvar createViewModel = function (params) {\\r\\n\\t\\tvar viewModel = new InstrumentPriceAlertViewModel(params);\\r\\n\\t\\treturn viewModel;\\r\\n\\t};\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tviewModel: {\\r\\n\\t\\t\\tcreateViewModel: createViewModel,\\r\\n\\t\\t},\\r\\n\\t};\\r\\n});\\r\\n\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"define(\\r\\n    'viewmodels/accounthub/AccountHubCardViewModel',[\\r\\n        \\\"require\\\",\\r\\n        \\\"knockout\\\",\\r\\n        \\\"handlers/general\\\",\\r\\n        \\\"helpers/KoComponentViewModel\\\",\\r\\n        \\\"StateObject!AccountHub\\\",\\r\\n        \\\"StateObject!userFlow\\\",\\r\\n        \\\"managers/viewsmanager\\\",\\r\\n        \\\"modules/permissionsmodule\\\",\\r\\n        \\\"devicemanagers/AlertsManager\\\",\\r\\n        \\\"initdatamanagers/Customer\\\",\\r\\n        \\\"dataaccess/dalCommon\\\",\\r\\n        \\\"managers/CustomerProfileManager\\\",\\r\\n        \\\"devicemanagers/StatesManager\\\",\\r\\n        \\\"StateObject!Setting\\\",\\r\\n        \\\"Dictionary\\\",\\r\\n    ],\\r\\n    function (require) {\\r\\n        var KoComponentViewModel = require(\\\"helpers/KoComponentViewModel\\\"),\\r\\n            ko = require(\\\"knockout\\\"),\\r\\n            general = require(\\\"handlers/general\\\"),\\r\\n            stateObjectAccountHub = require(\\\"StateObject!AccountHub\\\"),\\r\\n            ViewsManager = require(\\\"managers/viewsmanager\\\"),\\r\\n            permissionsModule = require(\\\"modules/permissionsmodule\\\"),\\r\\n            AlertsManager = require(\\\"devicemanagers/AlertsManager\\\"),\\r\\n            Customer = require(\\\"initdatamanagers/Customer\\\"),\\r\\n            dalCommon = require(\\\"dataaccess/dalCommon\\\"),\\r\\n            customerProfileManager = require(\\\"managers/CustomerProfileManager\\\"),\\r\\n            statesManager = require(\\\"devicemanagers/StatesManager\\\"),\\r\\n            settingStateObject = require(\\\"StateObject!Setting\\\"),\\r\\n            stateObjectUserFlow = require(\\\"StateObject!userFlow\\\"),\\r\\n            dictionary = require(\\\"Dictionary\\\");\\r\\n\\r\\n        var AccountHubCardViewModel = general.extendClass(KoComponentViewModel, function (params) {\\r\\n            var self = this,\\r\\n                parent = this.parent,\\r\\n                Data = this.Data,\\r\\n                stateObjectAccountHubUnsubscribe,\\r\\n                stateObjectAccountHubUnsubscribeDisplay,\\r\\n                visibilitySet = 0,\\r\\n                stateObjectUserFlowUnsubscribe;\\r\\n\\r\\n            function updateVisibilityOnLogin(userStatus) {\\r\\n                if (visibilitySet) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                visibilitySet = 1;\\r\\n\\r\\n                if (Customer.prop.isDemo === true) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                if (userStatus !== eUserStatus.Active) {\\r\\n                    stateObjectAccountHub.update(\\\"visible\\\", true);\\r\\n                }\\r\\n                else {\\r\\n                    var profileCustomer = customerProfileManager.ProfileCustomer();\\r\\n\\r\\n                    if (!profileCustomer.activeFirstLogin) {\\r\\n                        profileCustomer.activeFirstLogin = 1;\\r\\n                        stateObjectAccountHub.update(\\\"visible\\\", true);\\r\\n                        customerProfileManager.ProfileCustomer(profileCustomer);\\r\\n                    }\\r\\n                    else {\\r\\n                        if (profileCustomer.activeFirstLogin === 1) {\\r\\n                            profileCustomer.activeFirstLogin = -1;\\r\\n                            customerProfileManager.ProfileCustomer(profileCustomer);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n\\r\\n            }\\r\\n\\r\\n            function tryUpdateVisibilityOnLogin(userStatus) {\\r\\n                if (userStatus !== eUserStatus.NA) {\\r\\n                    updateVisibilityOnLogin(userStatus);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            function init() {\\r\\n                if (!settingStateObject.get(\\\"AccountHubSetting\\\")) {\\r\\n                    settingStateObject.set(\\\"AccountHubSetting\\\", null);\\r\\n                }\\r\\n\\r\\n                setObservables();\\r\\n                setStates();\\r\\n\\r\\n                var userFlow = stateObjectUserFlow.get(eStateObjectTopics.UserFlowChanged);\\r\\n\\r\\n                setSubscribers();\\r\\n\\r\\n                tryUpdateVisibilityOnLogin(userFlow ? userFlow.userStatus : eUserStatus.NA);\\r\\n            }\\r\\n\\r\\n            function setObservables() {\\r\\n                Data.visible = ko.observable(false);\\r\\n                Data.none = ko.observable(false);\\r\\n            }\\r\\n\\r\\n            function setStates() {\\r\\n                stateObjectAccountHub.set('visible', false);\\r\\n                stateObjectAccountHub.set('displayNone', true);\\r\\n            }\\r\\n\\r\\n            function setSubscribers() {\\r\\n                stateObjectAccountHubUnsubscribe = stateObjectAccountHub.subscribe(\\\"visible\\\", function (value) {\\r\\n                    Data.visible(value);\\r\\n                });\\r\\n\\r\\n                stateObjectAccountHubUnsubscribeDisplay = stateObjectAccountHub.subscribe(\\\"displayNone\\\", function (value) {\\r\\n                    Data.none(value);\\r\\n                });\\r\\n\\r\\n                stateObjectUserFlowUnsubscribe = stateObjectUserFlow.subscribe(\\r\\n                    eStateObjectTopics.UserFlowChanged,\\r\\n                    function (newModel) {\\r\\n                        tryUpdateVisibilityOnLogin(newModel.userStatus);\\r\\n                    }\\r\\n                );\\r\\n            }\\r\\n\\r\\n            function switchView(view, args) {\\r\\n                ViewsManager.RedirectToForm(view, args);\\r\\n                settingStateObject.update(\\\"AccountHubSetting\\\", args);\\r\\n                hideAccountHub();\\r\\n            }\\r\\n\\r\\n            function register() {\\r\\n                permissionsModule.RegisterLeadType();\\r\\n            }\\r\\n\\r\\n            function hideAccountHub() {\\r\\n                Data.visible(false);\\r\\n                stateObjectAccountHub.update(\\\"visible\\\", false);\\r\\n            }\\r\\n\\r\\n            function logOut() {\\r\\n                hideAccountHub();\\r\\n\\r\\n                if (!permissionsModule.CheckPermissions(\\\"commonLogout\\\")) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                AlertsManager.UpdateAlert(AlertTypes.ExitAlert);\\r\\n                AlertsManager.PopAlert(AlertTypes.ExitAlert);\\r\\n            }\\r\\n\\r\\n            function switchFromDemoToReal() {\\r\\n                if (Customer.prop.isDemo) {\\r\\n                    dalCommon.SwitchAccount();\\r\\n                }\\r\\n            }\\r\\n\\r\\n            function switchFromRealToDemo() {\\r\\n                if (!Customer.prop.isDemo) {\\r\\n                    dalCommon.SwitchAccount();\\r\\n                }\\r\\n            }\\r\\n\\r\\n            function close() {\\r\\n                ko.postbox.publish(\\\"hub-menu-close\\\");\\r\\n                stateObjectAccountHub.update(\\\"visible\\\", false);\\r\\n            }\\r\\n\\r\\n            function dispose() {\\r\\n                if (stateObjectAccountHubUnsubscribe) {\\r\\n                    stateObjectAccountHubUnsubscribe();\\r\\n                }\\r\\n\\r\\n                if (stateObjectUserFlowUnsubscribe) {\\r\\n                    stateObjectUserFlowUnsubscribe();\\r\\n                }\\r\\n\\r\\n                if (stateObjectAccountHubUnsubscribeDisplay) {\\r\\n                    stateObjectAccountHubUnsubscribeDisplay();\\r\\n                }\\r\\n\\r\\n                parent.dispose.call(self); // inherited from KoComponentViewModel\\r\\n            }\\r\\n\\r\\n            function hasDemoBlock() {\\r\\n                return Customer.prop.hasActiveDemo || Customer.prop.isDemo;\\r\\n            }\\r\\n\\r\\n            function showLogoutButton() {\\r\\n                return permissionsModule.CheckActionAllowed(\\\"logout\\\");\\r\\n            }\\r\\n\\r\\n            function changePassword() {\\r\\n                if (permissionsModule.CheckPermissions(\\\"changePassword\\\")) {\\r\\n                    switchView(eForms.Settings, eViewTypes.vChangePassword);\\r\\n                }\\r\\n                else {\\r\\n                    AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, dictionary.GetItem(\\\"GenericAlert\\\"), dictionary.GetItem(\\\"Forbidden\\\"), null);\\r\\n                    AlertsManager.PopAlert(AlertTypes.ServerResponseAlert);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return {\\r\\n                init: init,\\r\\n                dispose: dispose,\\r\\n                Data: Data,\\r\\n                Close: close,\\r\\n                SwitchView: switchView,\\r\\n                Logout: logOut,\\r\\n                Register: register,\\r\\n                permissionsModule: permissionsModule,\\r\\n                switchFromDemoToReal: switchFromDemoToReal,\\r\\n                switchFromRealToDemo: switchFromRealToDemo,\\r\\n                IsDemo: statesManager.States.IsDemo,\\r\\n                hasDemoBlock: hasDemoBlock,\\r\\n                showLogoutButton: showLogoutButton,\\r\\n                ChangePassword: changePassword\\r\\n            };\\r\\n        });\\r\\n\\r\\n        function createViewModel(params) {\\r\\n            var viewModel = new AccountHubCardViewModel(params || {});\\r\\n            viewModel.init();\\r\\n\\r\\n            return viewModel;\\r\\n        }\\r\\n\\r\\n        return {\\r\\n            viewModel: {\\r\\n                createViewModel: createViewModel,\\r\\n            },\\r\\n        };\\r\\n    }\\r\\n);\\r\\n\\n\",\n    \"\\n\",\n    \"/* globals eUserStatus */\\r\\ndefine('viewmodels/accounthub/AccountHeaderViewModel',[\\r\\n\\t\\\"require\\\",\\r\\n\\t\\\"knockout\\\",\\r\\n\\t\\\"handlers/general\\\",\\r\\n\\t\\\"helpers/KoComponentViewModel\\\",\\r\\n\\t\\\"initdatamanagers/Customer\\\",\\r\\n\\t\\\"StateObject!userFlow\\\",\\r\\n\\t\\\"StateObject!AccountHub\\\",\\r\\n\\t\\\"StateObject!HelpcHub\\\",\\r\\n\\t\\\"StateObject!IM\\\",\\r\\n\\t\\\"modules/permissionsmodule\\\",\\r\\n\\t\\\"vendor/knockout-postbox\\\",\\r\\n\\t\\\"enums/enums\\\",\\r\\n], function AccountHeaderDef(require) {\\r\\n\\tvar KoComponentViewModel = require(\\\"helpers/KoComponentViewModel\\\"),\\r\\n\\t\\tko = require(\\\"knockout\\\"),\\r\\n\\t\\tgeneral = require(\\\"handlers/general\\\"),\\r\\n\\t\\tCustomer = require(\\\"initdatamanagers/Customer\\\"),\\r\\n\\t\\tstateObjectUserFlow = require(\\\"StateObject!userFlow\\\"),\\r\\n\\t\\tstateObjectAccountHub = require(\\\"StateObject!AccountHub\\\"),\\r\\n\\t\\tstateObjectHelpc = require(\\\"StateObject!HelpcHub\\\"),\\r\\n\\t\\tstateObjectIM = require(\\\"StateObject!IM\\\"),\\r\\n\\t\\tpermissionsModule = require(\\\"modules/permissionsmodule\\\");\\r\\n\\r\\n\\tvar AccountHeaderViewModel = general.extendClass(KoComponentViewModel, function AccountHeaderClass(params) {\\r\\n\\t\\tvar self = this,\\r\\n\\t\\t\\tparent = this.parent,\\r\\n\\t\\t\\tdata = this.Data, // inherited from KoComponentViewModel\\r\\n\\t\\t\\tstateObjectSubscriptions = [],\\r\\n\\t\\t\\taccountButtonSelected = ko.observable(false),\\r\\n\\t\\t\\tmaxNameLength = 20;\\r\\n\\r\\n\\t\\tfunction init() {\\r\\n\\t\\t\\tsetObservables();\\r\\n\\t\\t\\tdata.onClose = params.onClose;\\r\\n\\r\\n\\t\\t\\tupdateFromStateObject(stateObjectUserFlow.get(eStateObjectTopics.UserFlowChanged));\\r\\n\\r\\n\\t\\t\\tdata.userName = calculateName();\\r\\n\\r\\n\\t\\t\\tif (!stateObjectIM.get(\\\"message\\\")) {\\r\\n\\t\\t\\t\\tstateObjectIM.set(\\\"message\\\", \\\"empty\\\");\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tdata.MessageCSS = ko.observable(stateObjectIM.get(\\\"message\\\"));\\r\\n\\r\\n\\t\\t\\tif (!stateObjectAccountHub.get(\\\"visible\\\")) {\\r\\n\\t\\t\\t\\tstateObjectAccountHub.set(\\\"visible\\\", false);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\taccountButtonSelected(stateObjectAccountHub.get(\\\"visible\\\"));\\r\\n\\r\\n\\t\\t\\tstateObjectSubscriptions.push(\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tunsubscribe: stateObjectIM.subscribe(\\\"message\\\", function (value) {\\r\\n\\t\\t\\t\\t\\t\\tdata.MessageCSS(value);\\r\\n\\t\\t\\t\\t\\t}),\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tunsubscribe: stateObjectAccountHub.subscribe(\\\"visible\\\", function (value) {\\r\\n\\t\\t\\t\\t\\t\\taccountButtonSelected(value);\\r\\n\\t\\t\\t\\t\\t}),\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tunsubscribe: stateObjectUserFlow.subscribe(eStateObjectTopics.UserFlowChanged, function (model) {\\r\\n\\t\\t\\t\\t\\t\\tupdateFromStateObject(model);\\r\\n\\t\\t\\t\\t\\t}),\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tunsubscribe: stateObjectHelpc.subscribe(\\\"visible\\\", function (value) {\\r\\n\\t\\t\\t\\t\\t\\tif (value === true) {\\r\\n\\t\\t\\t\\t\\t\\t\\ttoggleAccountHub(value);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}),\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setObservables() {\\r\\n\\t\\t\\tdata.generalStatusColor = ko.observable(\\\"\\\");\\r\\n\\t\\t\\tdata.userStatusName = ko.observable(general.getKeyByValue(eUserStatus, eUserStatus.Active));\\r\\n\\t\\t\\tdata.generalStatusName = ko.observable(\\\"\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction calculateName() {\\r\\n\\t\\t\\tif (!Customer.prop.firstName && !Customer.prop.lastName) return \\\"\\\";\\r\\n\\r\\n\\t\\t\\tvar firstName = Customer.prop.firstName ? Customer.prop.firstName : \\\"\\\",\\r\\n\\t\\t\\t\\tlastName = Customer.prop.lastName ? Customer.prop.lastName.charAt(0) : \\\"\\\",\\r\\n\\t\\t\\t\\tfullName = (firstName + \\\" \\\" + lastName + \\\".\\\").trim();\\r\\n\\r\\n\\t\\t\\tif (fullName.length > maxNameLength) {\\r\\n\\t\\t\\t\\tfullName = firstName;\\r\\n\\r\\n\\t\\t\\t\\tif (fullName.length > 0) {\\r\\n\\t\\t\\t\\t\\tfullName = \\\"\\\";\\r\\n\\r\\n\\t\\t\\t\\t\\tif (firstName.length > maxNameLength) {\\r\\n\\t\\t\\t\\t\\t\\tfullName = firstName.substr(0, maxNameLength).trim() + \\\"...\\\";\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tvar names = firstName.split(\\\" \\\");\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor (var i = 0; i < names.length; i++) {\\r\\n\\t\\t\\t\\t\\t\\t\\tif ((fullName + names[i]).length <= maxNameLength) fullName += names[i] + \\\" \\\";\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfullName = fullName.trim();\\r\\n\\r\\n\\t\\t\\treturn fullName;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction dispose() {\\r\\n\\t\\t\\twhile (stateObjectSubscriptions.length > 0) {\\r\\n\\t\\t\\t\\tstateObjectSubscriptions.pop().unsubscribe();\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tparent.dispose.call(self); // inherited from KoComponentViewModel\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction toggleAccountHub(closeIfOpen) {\\r\\n\\t\\t\\tvar hubVisible = stateObjectAccountHub.get(\\\"visible\\\");\\r\\n\\r\\n\\t\\t\\tif (closeIfOpen === true) {\\r\\n\\t\\t\\t\\tif (hubVisible) {\\r\\n\\t\\t\\t\\t\\tstateObjectAccountHub.update(\\\"visible\\\", false);\\r\\n\\t\\t\\t\\t\\tko.postbox.publish(\\\"hub-menu-close\\\");\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tstateObjectAccountHub.update(\\\"visible\\\", !hubVisible);\\r\\n\\r\\n\\t\\t\\t\\tif (!hubVisible) {\\r\\n\\t\\t\\t\\t\\tko.postbox.publish(\\\"hub-menu-open\\\");\\r\\n\\t\\t\\t\\t\\tstateObjectHelpc.update(\\\"visible\\\", false);\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tko.postbox.publish(\\\"hub-menu-close\\\");\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction updateFromStateObject(model) {\\r\\n\\t\\t\\tif (!model) {\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\r\\n      var userStatus = Customer.prop.isDemo ? eUserStatus.Active : model.userStatus;\\r\\n      data.userStatusName(general.getKeyByValue(eUserStatus, userStatus));\\r\\n\\r\\n\\r\\n\\t\\t\\tdata.generalStatusName(\\\"flow_\\\" + general.getKeyByValue(eUserStatus, model.userStatus));\\r\\n\\r\\n\\t\\t\\tswitch (model.userStatus) {\\r\\n\\t\\t\\t\\tcase eUserStatus.ReadyToTrade:\\r\\n\\t\\t\\t\\tcase eUserStatus.ActiveLimited:\\r\\n\\t\\t\\t\\t\\tdata.generalStatusColor(\\\"yellow\\\");\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\tcase eUserStatus.Active:\\r\\n\\t\\t\\t\\t\\tdata.generalStatusColor(\\\"green\\\");\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\tcase eUserStatus.Locked:\\r\\n\\t\\t\\t\\tcase eUserStatus.NotActivated:\\r\\n\\t\\t\\t\\tcase eUserStatus.Restricted:\\r\\n\\t\\t\\t\\t\\tdata.generalStatusColor(\\\"red\\\");\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\tdefault:\\r\\n\\t\\t\\t\\t\\tdata.generalStatusColor(\\\"blue\\\");\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction generalStatusClick() {\\r\\n\\t\\t\\tko.postbox.publish(\\\"action-source\\\", \\\"StatusRow\\\");\\r\\n\\t\\t\\t$viewModelsManager.VManager.SwitchViewVisible(eForms.UserFlowMap);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tinit: init,\\r\\n\\t\\t\\tdispose: dispose,\\r\\n\\t\\t\\tData: data,\\r\\n\\t\\t\\ttoggleAccountHub: toggleAccountHub,\\r\\n\\t\\t\\tAccountButtonSelected: accountButtonSelected,\\r\\n\\t\\t\\tCustomer: Customer,\\r\\n\\t\\t\\tpermissionsModule: permissionsModule,\\r\\n\\t\\t\\tgeneralStatusClick: generalStatusClick,\\r\\n\\t\\t};\\r\\n\\t});\\r\\n\\r\\n\\tfunction createViewModel(params) {\\r\\n\\t\\tvar viewModel = new AccountHeaderViewModel(params || {});\\r\\n\\r\\n\\t\\tviewModel.init();\\r\\n\\r\\n\\t\\treturn viewModel;\\r\\n\\t}\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tviewModel: {\\r\\n\\t\\t\\tcreateViewModel: createViewModel,\\r\\n\\t\\t},\\r\\n\\t};\\r\\n});\\r\\n\\n\",\n    \"define('viewmodels/WalletModuleBase', [\\r\\n    'require',\\r\\n    'knockout',\\r\\n    'handlers/general',\\r\\n    'viewmodels/ViewModelBase',\\r\\n    'configuration/initconfiguration',\\r\\n    'initdatamanagers/Customer',\\r\\n    'managers/CustomerProfileManager',\\r\\n    'cachemanagers/ClientStateHolderManager',\\r\\n    'cachemanagers/PortfolioStaticManager',\\r\\n    'viewmodels/dialogs/DialogViewModel',\\r\\n    'Dictionary',\\r\\n    'StateObject!DealerParams',\\r\\n    'cachemanagers/bonusmanager'\\r\\n], function (require) {\\r\\n    var ko = require('knockout'),\\r\\n        general = require('handlers/general'),\\r\\n        DialogViewModel = require('viewmodels/dialogs/DialogViewModel'),\\r\\n        walletSettings = require('configuration/initconfiguration').WalletConfiguration,\\r\\n        customer = require('initdatamanagers/Customer'),\\r\\n        customerProfileManager = require('managers/CustomerProfileManager'),\\r\\n        csHolderManager = require('cachemanagers/ClientStateHolderManager'),\\r\\n        portfolioManager = require('cachemanagers/PortfolioStaticManager'),\\r\\n        Dictionary = require('Dictionary'),\\r\\n        bonusManager = require('cachemanagers/bonusmanager');\\r\\n\\r\\n    function WalletModule() {\\r\\n        var observableCustomerObject = {},\\r\\n            viewProperties = {},\\r\\n            openInDialogDelegate = new TDelegate();\\r\\n\\r\\n        function init() {\\r\\n            setObservableViewProperties();\\r\\n\\r\\n            setObservableCustomerObject();\\r\\n\\r\\n            setComputables();\\r\\n\\r\\n            if (DialogViewModel) {\\r\\n                openInDialogDelegate.Add(function (name, options, eView, args) {\\r\\n                    DialogViewModel.open(name, options, eView, args);\\r\\n                });\\r\\n            }\\r\\n\\r\\n            registerToDispatcher();\\r\\n\\r\\n            updateObservableObject();\\r\\n        }\\r\\n\\r\\n        //-------------------------------------------------------\\r\\n\\r\\n        function updateObservableObject() {\\r\\n            onClientStateChange();\\r\\n            onClientPortfolioStateChange();\\r\\n        }\\r\\n\\r\\n        //-------------------------------------------------------\\r\\n\\r\\n        function dispose() {\\r\\n            unregisterFromDispatcher();\\r\\n        }\\r\\n\\r\\n        //-------------------------------------------------------\\r\\n\\r\\n        function registerToDispatcher() {\\r\\n            csHolderManager.OnChange.Add(onClientStateChange);\\r\\n            portfolioManager.OnChange.Add(onClientPortfolioStateChange);\\r\\n        }\\r\\n\\r\\n        //-------------------------------------------------------\\r\\n\\r\\n        function unregisterFromDispatcher() {\\r\\n            csHolderManager.OnChange.Remove(onClientStateChange);\\r\\n            portfolioManager.OnChange.Remove(onClientPortfolioStateChange);\\r\\n        }\\r\\n\\r\\n        //-------------------------------------------------------\\r\\n\\r\\n        function setObservableCustomerObject() {\\r\\n            observableCustomerObject.isMaintenanceMargin =\\r\\n                customer.prop.maintenanceMarginPercentage > 0;\\r\\n            observableCustomerObject.userName = customer.prop.userName;\\r\\n            observableCustomerObject.accountNumber = customer.prop.accountNumber;\\r\\n\\r\\n            var csHolder = csHolderManager.CSHolder;\\r\\n            observableCustomerObject.maintenanceMargin = toObservable(\\r\\n                csHolder.maintenanceMargin,\\r\\n                function () {\\r\\n                    return observableCustomerObject.isMaintenanceMargin;\\r\\n                }\\r\\n            );\\r\\n            observableCustomerObject.openPLSign = ko.observable();\\r\\n\\r\\n            observableCustomerObject.equity = toObservable(\\r\\n                csHolder.equity,\\r\\n                function () {\\r\\n                    return true;\\r\\n                }\\r\\n            );\\r\\n            observableCustomerObject.accountBalance = toObservable(\\r\\n                csHolder.accountBalance,\\r\\n                function () {\\r\\n                    return true;\\r\\n                }\\r\\n            );\\r\\n            observableCustomerObject.openPL = toObservable(\\r\\n                csHolder.openPL,\\r\\n                function () {\\r\\n                    return true;\\r\\n                }\\r\\n            );\\r\\n\\r\\n            observableCustomerObject.netExposure = toObservable(\\r\\n                csHolder.netExposure,\\r\\n                function () {\\r\\n                    return true;\\r\\n                }\\r\\n            );\\r\\n            observableCustomerObject.exposureCoverage = toObservable(\\r\\n                csHolder.exposureCoverage,\\r\\n                function () {\\r\\n                    return true;\\r\\n                }\\r\\n            );\\r\\n            observableCustomerObject.totalEquity = ko.observable(\\r\\n                csHolder.totalEquity\\r\\n            );\\r\\n\\r\\n            observableCustomerObject.isValidExposureCoverage = ko.observable(\\r\\n                isExposureCoverageValid(csHolder.exposureCoverage)\\r\\n            );\\r\\n\\r\\n            observableCustomerObject.usedMargin = toObservable(\\r\\n                csHolder.usedMargin,\\r\\n                function () {\\r\\n                    return (\\r\\n                        viewProperties.isAdvancedView() ||\\r\\n                        (!general.isNullOrUndefined(walletSettings) &&\\r\\n                            walletSettings.isVisibleUsedMargin)\\r\\n                    );\\r\\n                }\\r\\n            );\\r\\n\\r\\n            observableCustomerObject.availableMargin = toObservable(\\r\\n                csHolder.availableMargin,\\r\\n                function () {\\r\\n                    return true;\\r\\n                }\\r\\n            );\\r\\n            observableCustomerObject.availableMarginNoComma = ko.observable();\\r\\n\\r\\n            observableCustomerObject.marginUtilizationPercentage = toObservable(\\r\\n                csHolder.marginUtilizationPercentage,\\r\\n                function () {\\r\\n                    return viewProperties.isAdvancedView();\\r\\n                }\\r\\n            );\\r\\n            observableCustomerObject.marginUtilizationStatus = ko.observable(\\r\\n                csHolder.marginUtilizationStatus\\r\\n            );\\r\\n\\r\\n            var portfolio = portfolioManager.Portfolio;\\r\\n            observableCustomerObject.maxExposure = toObservable(\\r\\n                portfolio.maxExposure,\\r\\n                function () {\\r\\n                    return viewProperties.isAdvancedView();\\r\\n                }\\r\\n            );\\r\\n            observableCustomerObject.securities = toObservable(\\r\\n                portfolio.securities,\\r\\n                function (observed) {\\r\\n                    return general.toNumeric(observed) > 0 && viewProperties.isAdvancedView();\\r\\n                }\\r\\n            );\\r\\n            observableCustomerObject.tradingBonus = toObservable(\\r\\n                portfolio.tradingBonus,\\r\\n                function (observed) {\\r\\n                    return general.toNumeric(observed) > 0;\\r\\n                }\\r\\n            );\\r\\n            observableCustomerObject.pendingBonus = toObservable(\\r\\n                portfolio.pendingBonus,\\r\\n                function (observed) {\\r\\n                    return general.toNumeric(observed) > 0;\\r\\n                }\\r\\n            );\\r\\n            observableCustomerObject.pendingWithdrawals = toObservable(\\r\\n                portfolio.pendingWithdrawals,\\r\\n                function (observed) {\\r\\n                    return general.toNumeric(observed) > 0;\\r\\n                }\\r\\n            );\\r\\n\\r\\n            // BONUS\\r\\n            observableCustomerObject.pendingBonusType = ko.observable(\\r\\n                portfolio.pendingBonusType\\r\\n            );\\r\\n\\r\\n            observableCustomerObject.showCashBack = showCashBack;\\r\\n\\r\\n            // exposure\\r\\n            observableCustomerObject.showExposureSummary = showExposureSummary;\\r\\n            observableCustomerObject.showExposureSummary.disabled = ko.observable(\\r\\n                false\\r\\n            );\\r\\n\\r\\n            observableCustomerObject.showDetailedMarginStatus = showDetailedMarginStatus;\\r\\n\\r\\n            observableCustomerObject.isAdvancedView = viewProperties.isAdvancedView;\\r\\n\\r\\n            observableCustomerObject.showFinancialSummaryDetails = ko.observable(\\r\\n                $statesManager.States.IsActive() ||\\r\\n                customer.prop.customerType === eCustomerType.TradingBonus\\r\\n            );\\r\\n        }\\r\\n\\r\\n        function isExposureCoverageValid(exposureCoverage) {\\r\\n            if (\\r\\n                !general.isNullOrUndefined(customer) &&\\r\\n                !general.isNullOrUndefined(customer.prop) &&\\r\\n                !general.isNullOrUndefined(customer.prop.minPctEQXP) &&\\r\\n                !general.isNullOrUndefined(exposureCoverage)\\r\\n            ) {\\r\\n                return (\\r\\n                    general.toNumeric(exposureCoverage) > general.toNumeric(customer.prop.minPctEQXP)\\r\\n                );\\r\\n            }\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        //-------------------------------------------------------\\r\\n        function setComputables() {\\r\\n            observableCustomerObject.bonusAmount = ko.computed(function () {\\r\\n                return bonusManager.bonus().amountBase\\r\\n                    ? bonusManager.bonus().amountBase\\r\\n                    : 0;\\r\\n            });\\r\\n        }\\r\\n\\r\\n        //-------------------------------------------------------\\r\\n        function toObservable(value, visibilityFunc) {\\r\\n            var valueObs = ko.observable(value);\\r\\n            return {\\r\\n                value: valueObs,\\r\\n                toNumeric: ko.computed(function () {\\r\\n                    return general.toNumeric(valueObs());\\r\\n                }),\\r\\n                visibility: ko\\r\\n                    .computed(function () {\\r\\n                        return visibilityFunc(valueObs());\\r\\n                    })\\r\\n                    .extend({ notify: 'always' }),\\r\\n            };\\r\\n        }\\r\\n\\r\\n        //-------------------------------------------------------\\r\\n\\r\\n        function setObservableViewProperties() {\\r\\n            viewProperties.isAdvancedView = ko.observable();\\r\\n            viewProperties.setAdvancedView = setAdvancedView;\\r\\n        }\\r\\n\\r\\n        //-------------------------------------------------------\\r\\n\\r\\n        function setAdvancedView(newValue) {\\r\\n            viewProperties.isAdvancedView(newValue);\\r\\n            var profileCustomer = customerProfileManager.ProfileCustomer();\\r\\n            profileCustomer.advancedWalletView = newValue ? 1 : 0;\\r\\n            customerProfileManager.ProfileCustomer(profileCustomer);\\r\\n        }\\r\\n\\r\\n        //-------------------------------------------------------\\r\\n\\r\\n        function onClientStateChange() {\\r\\n            var csHolder = csHolderManager.CSHolder;\\r\\n            observableCustomerObject.maintenanceMargin.value(\\r\\n                csHolder.maintenanceMargin\\r\\n            );\\r\\n\\r\\n            observableCustomerObject.openPLSign(csHolder.openPL.sign());\\r\\n            observableCustomerObject.openPL.value(csHolder.openPL);\\r\\n            observableCustomerObject.equity.value(csHolder.equity);\\r\\n            observableCustomerObject.accountBalance.value(csHolder.accountBalance);\\r\\n            observableCustomerObject.netExposure.value(csHolder.netExposure);\\r\\n            observableCustomerObject.exposureCoverage.value(\\r\\n                csHolder.exposureCoverage\\r\\n            );\\r\\n            observableCustomerObject.totalEquity(csHolder.totalEquity);\\r\\n\\r\\n            observableCustomerObject.isValidExposureCoverage(\\r\\n                isExposureCoverageValid(csHolder.exposureCoverage)\\r\\n            );\\r\\n\\r\\n            observableCustomerObject.usedMargin.value(csHolder.usedMargin);\\r\\n            observableCustomerObject.availableMargin.value(csHolder.availableMargin);\\r\\n            observableCustomerObject.availableMarginNoComma(\\r\\n                csHolder.availableMargin.sign()\\r\\n            );\\r\\n\\r\\n            observableCustomerObject.marginUtilizationPercentage.value(\\r\\n                csHolder.marginUtilizationPercentage\\r\\n            );\\r\\n            observableCustomerObject.marginUtilizationStatus(\\r\\n                csHolder.marginUtilizationStatus\\r\\n            );\\r\\n\\r\\n            observableCustomerObject.showFinancialSummaryDetails(\\r\\n                $statesManager.States.IsActive() ||\\r\\n                customer.prop.customerType === eCustomerType.TradingBonus\\r\\n            );\\r\\n        }\\r\\n\\r\\n        //-------------------------------------------------------\\r\\n\\r\\n        function canCloseDialog() {\\r\\n            return (\\r\\n                observableCustomerObject.pendingBonusType() !==\\r\\n                ePendingBonusType.cashBack &&\\r\\n                !general.isNullOrUndefined(walletSettings) &&\\r\\n                !walletSettings.supressDialogs &&\\r\\n                !general.isNullOrUndefined(DialogViewModel) &&\\r\\n                DialogViewModel.isOpen() &&\\r\\n                DialogViewModel.getCurrentView() === eViewTypes.vCashBack\\r\\n            );\\r\\n        }\\r\\n\\r\\n        function onClientPortfolioStateChange() {\\r\\n            var portfolio = portfolioManager.Portfolio;\\r\\n            observableCustomerObject.maxExposure.value(portfolio.maxExposure);\\r\\n            observableCustomerObject.securities.value(portfolio.securities);\\r\\n            observableCustomerObject.tradingBonus.value(portfolio.tradingBonus);\\r\\n            observableCustomerObject.pendingBonus.value(portfolio.pendingBonus);\\r\\n            observableCustomerObject.pendingWithdrawals.value(\\r\\n                portfolio.pendingWithdrawals\\r\\n            );\\r\\n            observableCustomerObject.pendingBonusType(portfolio.pendingBonusType);\\r\\n\\r\\n            // if coming from deep link and no cash back pending bonus and dialog already pop up\\r\\n\\r\\n            if (canCloseDialog()) {\\r\\n                DialogViewModel.close();\\r\\n            }\\r\\n        }\\r\\n        //-------------------------------------------------------\\r\\n\\r\\n        function showCashBack(arg) {\\r\\n            // if coming from deep link and no cash back pending bonus\\r\\n            if (observableCustomerObject.pendingBonusType() !== ePendingBonusType.cashBack ||\\r\\n                observableCustomerObject.bonusAmount() <= 0) {\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            if (arg && arg.tradingEvent) {\\r\\n                ko.postbox.publish('trading-event', arg.tradingEvent);\\r\\n            }\\r\\n\\r\\n            openInDialogDelegate.Invoke(\\r\\n                eDialog.CashBackDialog,\\r\\n                {\\r\\n                    title: Dictionary.GetItem('lblCashBackTitle', 'deals_CashBack'),\\r\\n                    dialogClass: 'cashback fx-dialog',\\r\\n                    width: 850,\\r\\n                },\\r\\n                eViewTypes.vCashBack,\\r\\n                observableCustomerObject.bonusAmount()\\r\\n            );\\r\\n        }\\r\\n\\r\\n        function showExposureSummary(arg) {\\r\\n            openInDialogDelegate.Invoke(\\r\\n                eDialog.NetExposuresSummaryDialog,\\r\\n                { title: arg.title, dialogClass: 'netexposure fx-dialog' },\\r\\n                eViewTypes.vNetExposure\\r\\n            );\\r\\n        }\\r\\n\\r\\n        //-------------------------------------------------------\\r\\n        function showDetailedMarginStatus(tradingEvent) {\\r\\n            openInDialogDelegate.Invoke(\\r\\n                eDialog.MarginStatus,\\r\\n                { title: Dictionary.GetItem('MarginStatus', 'dialogsTitles', ' '), width: 800 },\\r\\n                eViewTypes.vMarginStatus\\r\\n            );\\r\\n\\r\\n            if (tradingEvent) {\\r\\n                ko.postbox.publish('trading-event', tradingEvent);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return {\\r\\n            Init: init,\\r\\n            WalletInfo: observableCustomerObject,\\r\\n            ViewProperties: viewProperties,\\r\\n            OpenInDialog: openInDialogDelegate,\\r\\n            Dispose: dispose,\\r\\n            util: { toObservable: toObservable }\\r\\n        };\\r\\n    }\\r\\n\\r\\n    return WalletModule;\\r\\n});\\r\\n\\n\",\n    \"define('deviceviewmodels/WalletModule',[\\r\\n\\t\\\"require\\\",\\r\\n\\t\\\"handlers/general\\\",\\r\\n\\t\\\"viewmodels/WalletModuleBase\\\",\\r\\n\\t\\\"managers/CustomerProfileManager\\\",\\r\\n\\t\\\"StateObject!DealerParams\\\",\\r\\n\\t\\\"cachemanagers/ClientStateHolderManager\\\",\\r\\n], function (require) {\\r\\n\\tvar general = require(\\\"handlers/general\\\"),\\r\\n\\t\\tWalletModuleBase = require(\\\"viewmodels/WalletModuleBase\\\"),\\r\\n\\t\\tcustomerProfileManager = require(\\\"managers/CustomerProfileManager\\\"),\\r\\n\\t\\tstateObjectDealerParams = require(\\\"StateObject!DealerParams\\\"),\\r\\n\\t\\tcsHolderManager = require(\\\"cachemanagers/ClientStateHolderManager\\\");\\r\\n\\r\\n\\tvar WalletModule = general.extendClass(WalletModuleBase, function NewWalletModuleClass(_params) {\\r\\n\\t\\tvar self = this,\\r\\n\\t\\t\\tparent = self.parent;\\r\\n\\r\\n\\t\\tfunction init() {\\r\\n\\t\\t\\tparent.Init();\\r\\n\\r\\n\\t\\t\\tsetObservableCustomerObject();\\r\\n\\r\\n\\t\\t\\tregisterToDispatcher();\\r\\n\\r\\n\\t\\t\\tsetInitialAdvancedViewMode();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setInitialAdvancedViewMode() {\\r\\n\\t\\t\\tparent.ViewProperties.isAdvancedView(\\r\\n\\t\\t\\t\\t!!(\\r\\n\\t\\t\\t\\t\\tstateObjectDealerParams.get(eDealerParams.DealerAdvancedWalletView) ||\\r\\n\\t\\t\\t\\t\\tcustomerProfileManager.ProfileCustomer().advancedWalletView\\r\\n\\t\\t\\t\\t)\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setObservableCustomerObject() {\\r\\n\\t\\t\\tvar csHolder = csHolderManager.CSHolder;\\r\\n\\t\\t\\tparent.WalletInfo.marginLevel = parent.util.toObservable(calculateMarginLevel(csHolder), function (val) {\\r\\n\\t\\t\\t\\tvar naVal = general.toNumeric(\\\"NA\\\");\\r\\n\\t\\t\\t\\treturn parent.ViewProperties.isAdvancedView() && naVal !== val && 0 < val;\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction dispose() {\\r\\n\\t\\t\\tparent.Dispose();\\r\\n\\t\\t\\tunregisterFromDispatcher();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction registerToDispatcher() {\\r\\n\\t\\t\\tcsHolderManager.OnChange.Add(onClientStateChange);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction unregisterFromDispatcher() {\\r\\n\\t\\t\\tcsHolderManager.OnChange.Remove(onClientStateChange);\\r\\n\\t\\t}\\r\\n\\t\\t//-------------------------------------------------------\\r\\n\\t\\tfunction calculateMarginLevel(csHolder) {\\r\\n\\t\\t\\tvar usedMargin = general.toNumeric(csHolder.usedMargin);\\r\\n\\t\\t\\tvar totalEquity = general.toNumeric(csHolder.totalEquity);\\r\\n\\t\\t\\tvar naVal = general.toNumeric(\\\"NA\\\");\\r\\n\\r\\n\\t\\t\\tif (naVal === usedMargin || naVal === totalEquity || 0 === usedMargin || 0 === totalEquity) {\\r\\n\\t\\t\\t\\treturn naVal;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn general.toNumeric(totalEquity / usedMargin);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction onClientStateChange() {\\r\\n\\t\\t\\tvar csHolder = csHolderManager.CSHolder;\\r\\n\\t\\t\\tparent.WalletInfo.marginLevel.value(calculateMarginLevel(csHolder));\\r\\n\\t\\t}\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tInit: init,\\r\\n\\t\\t\\tWalletInfo: parent.WalletInfo,\\r\\n\\t\\t\\tViewProperties: parent.ViewProperties,\\r\\n\\t\\t\\tOpenInDialog: parent.OpenInDialog,\\r\\n\\t\\t\\tDispose: dispose,\\r\\n\\t\\t};\\r\\n\\t});\\r\\n\\r\\n\\treturn new WalletModule();\\r\\n});\\r\\n\\n\",\n    \"/* global eStartSpinFrom */\\r\\ndefine('viewmodels/WalletViewModel',[\\\"require\\\", \\\"handlers/general\\\", \\\"helpers/KoComponentViewModel\\\", \\\"deviceviewmodels/WalletModule\\\"], function (\\r\\n\\trequire\\r\\n) {\\r\\n\\tvar general = require(\\\"handlers/general\\\"),\\r\\n\\t\\tWalletModule = require(\\\"deviceviewmodels/WalletModule\\\"),\\r\\n\\t\\tKoComponentViewModel = require(\\\"helpers/KoComponentViewModel\\\");\\r\\n\\r\\n\\tvar WalletViewModel = general.extendClass(KoComponentViewModel, function WalletViewModel() {\\r\\n\\t\\tvar self = this,\\r\\n\\t\\t\\tparent = this.parent,\\r\\n\\t\\t\\tdata = this.Data;\\r\\n\\r\\n\\t\\tfunction init() {\\r\\n\\t\\t\\tparent.init.call(self);\\r\\n\\r\\n\\t\\t\\tdata.WalletInfo = WalletModule.WalletInfo;\\r\\n\\t\\t\\tdata.ViewProperties = WalletModule.ViewProperties;\\r\\n\\r\\n\\t\\t\\tWalletModule.Init();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction dispose() {\\r\\n\\t\\t\\tWalletModule.Dispose();\\r\\n\\t\\t\\tparent.dispose.call(self);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tData: data,\\r\\n\\t\\t\\tInit: init,\\r\\n\\t\\t\\tdispose: dispose,\\r\\n\\t\\t};\\r\\n\\t});\\r\\n\\r\\n\\tvar createViewModel = function () {\\r\\n\\t\\tvar viewModel = new WalletViewModel();\\r\\n\\r\\n\\t\\tviewModel.Init();\\r\\n\\r\\n\\t\\treturn viewModel;\\r\\n\\t};\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tviewModel: {\\r\\n\\t\\t\\tcreateViewModel: createViewModel,\\r\\n\\t\\t},\\r\\n\\t};\\r\\n});\\r\\n\\n\",\n    \"\\n\",\n    \"define('viewmodels/TabsViewModel',[\\r\\n\\t\\\"require\\\",\\r\\n\\t\\\"knockout\\\",\\r\\n\\t\\\"handlers/general\\\",\\r\\n\\t\\\"helpers/KoComponentViewModel\\\",\\r\\n\\t\\\"devicemanagers/ViewModelsManager\\\",\\r\\n\\t\\\"Dictionary\\\",\\r\\n\\t\\\"StateObject!DealsTabs\\\",\\r\\n\\t\\\"configuration/initconfiguration\\\",\\r\\n], function (require) {\\r\\n\\tvar ko = require(\\\"knockout\\\"),\\r\\n\\t\\tgeneral = require(\\\"handlers/general\\\"),\\r\\n\\t\\tKoComponentViewModel = require(\\\"helpers/KoComponentViewModel\\\"),\\r\\n\\t\\tviewModelsManager = require(\\\"devicemanagers/ViewModelsManager\\\"),\\r\\n\\t\\tDictionary = require(\\\"Dictionary\\\"),\\r\\n\\t\\tstate = require(\\\"StateObject!DealsTabs\\\"),\\r\\n\\t\\tdealTabsConfiguration = require(\\\"configuration/initconfiguration\\\").DealTabsConfiguration;\\r\\n\\r\\n\\tvar TabsViewModel = general.extendClass(KoComponentViewModel, function () {\\r\\n\\t\\tvar self = this,\\r\\n\\t\\t\\tparent = this.parent, // inherited from KoComponentViewModel\\r\\n\\t\\t\\tdata = this.Data, // inherited from KoComponentViewModel\\r\\n\\t\\t\\tstateKey = \\\"selectedTabView\\\" + dealTabsConfiguration.view;\\r\\n\\r\\n\\t\\tfunction init(settings) {\\r\\n\\t\\t\\tparent.init.call(self, settings); // inherited from KoComponentViewModel\\r\\n\\r\\n\\t\\t\\tsetObservables();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setObservables() {\\r\\n\\t\\t\\tvar viewArgs = viewModelsManager.VManager.GetViewArgs(dealTabsConfiguration.view),\\r\\n\\t\\t\\t\\tselectedTab = viewArgs ? viewArgs.selectedTab : null,\\r\\n\\t\\t\\t\\tdefaultTab =\\r\\n\\t\\t\\t\\t\\tselectedTab ||\\r\\n\\t\\t\\t\\t\\t(state.containsKey(stateKey) && state.get(stateKey)) ||\\r\\n\\t\\t\\t\\t\\tdealTabsConfiguration.tabs[0].type;\\r\\n\\r\\n\\t\\t\\tdata.tabs = dealTabsConfiguration.tabs.map(function (tab) {\\r\\n\\t\\t\\t\\treturn Object.assign(tab, {\\r\\n\\t\\t\\t\\t\\tcomponentReady: ko.observable(false),\\r\\n\\t\\t\\t\\t\\ttabTitleText: Dictionary.GetItem(tab.tabTitle, \\\"static_controlTitle\\\"),\\r\\n\\t\\t\\t\\t});\\r\\n\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\tdata.selectedTab = state.set(stateKey, ko.observable(defaultTab));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setComponentReady(componentType) {\\r\\n\\t\\t\\tvar componentItem = data.tabs.filter(function (tab) {\\r\\n\\t\\t\\t\\treturn tab.type === componentType;\\r\\n\\t\\t\\t});\\r\\n\\t\\t\\tcomponentItem[0].componentReady(true);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tinit: init,\\r\\n\\t\\t\\tSetComponentReady: setComponentReady,\\r\\n\\t\\t};\\r\\n\\t});\\r\\n\\r\\n\\tvar createViewModel = function (params) {\\r\\n\\t\\tvar viewModel = new TabsViewModel();\\r\\n\\r\\n\\t\\tviewModel.init(params);\\r\\n\\r\\n\\t\\treturn viewModel;\\r\\n\\t};\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tviewModel: { createViewModel: createViewModel },\\r\\n\\t};\\r\\n});\\r\\n\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"define('managers/HelpCenterContentManager',\\r\\n    [\\r\\n        'require',\\r\\n        'devicemanagers/StatesManager',\\r\\n        'Dictionary',\\r\\n        'initdatamanagers/Customer',\\r\\n        'LoadDictionaryContent!HelpCenterWalkthroughs',\\r\\n        'LoadDictionaryContent!HelpCenterTradingGuide',\\r\\n    ],\\r\\n    function (require) {\\r\\n        var StatesManager = require('devicemanagers/StatesManager'),\\r\\n            dictionary = require('Dictionary'),\\r\\n            customer = require('initdatamanagers/Customer'),\\r\\n            HELPCENTER_WALKTHROUGHS_RESOURCE_NAME = 'HelpCenterWalkthroughs',\\r\\n            HELPCENTER_GUIDES_RESOURCE_NAME = 'HelpCenterTradingGuide',\\r\\n            trackElements = {\\r\\n                'QuickPlatformTour': 'PlatformTour',\\r\\n                'HowToFoundYourAccount': 'DepositTour',\\r\\n                'HowToOpenADeal': 'DealTour',\\r\\n                'HowToUploadADocument': 'UploadTour',\\r\\n            };\\r\\n\\r\\n        function setWthroughLabels() {\\r\\n            var result = {};\\r\\n\\r\\n            result[eHowtoWthrough.quickTour] = 'QuickPlatformTour';\\r\\n            result[eHowtoWthrough.foundAccount] = 'HowToFoundYourAccount';\\r\\n            result[eHowtoWthrough.openDeal] = 'HowToOpenADeal';\\r\\n            result[eHowtoWthrough.uploadDocument] = 'HowToUploadADocument';\\r\\n\\r\\n            return result;\\r\\n        }\\r\\n\\r\\n        function getContentOrNullIfIsEmpty(contentKey, resourceName) {\\r\\n            if (dictionary.ValueIsEmpty(contentKey, resourceName)) {\\r\\n                return null;\\r\\n            }\\r\\n\\r\\n            return dictionary.GetItem(contentKey, resourceName);\\r\\n        }\\r\\n\\r\\n        function getWalkthKeySuffix() {\\r\\n            if (customer.prop.isSeamless || customer.prop.isPending) {\\r\\n                return eCustomerStateSuffix.pending;\\r\\n            }\\r\\n\\r\\n            if (customer.prop.isLive ||\\r\\n                customer.prop.customerType === eCustomerType.TradingBonus ||\\r\\n                StatesManager.States.Folder() === eFolder.GameFolder) {\\r\\n                return eCustomerStateSuffix.live;\\r\\n            }\\r\\n\\r\\n            if (customer.prop.isDemo) {\\r\\n                return eCustomerStateSuffix.demo;\\r\\n            }\\r\\n\\r\\n            return '';\\r\\n        }\\r\\n\\r\\n        function buildWalkthroughsList() {\\r\\n            var result = [],\\r\\n                WTHROUGH_LABELS = setWthroughLabels(),\\r\\n                suffix = getWalkthKeySuffix();\\r\\n\\r\\n            Object.keys(eHowtoWthrough)\\r\\n                .forEach(function processKey(key) {\\r\\n                    var prop = eHowtoWthrough[key],\\r\\n                        wid = getContentOrNullIfIsEmpty(prop + suffix, HELPCENTER_WALKTHROUGHS_RESOURCE_NAME);\\r\\n\\r\\n                    if (wid) {\\r\\n                        result.push({\\r\\n                            type: prop,\\r\\n                            text: getContentOrNullIfIsEmpty(WTHROUGH_LABELS[prop], HELPCENTER_WALKTHROUGHS_RESOURCE_NAME),\\r\\n                            walkthrougId: wid,\\r\\n                            trackElement: trackElements[WTHROUGH_LABELS[prop]]\\r\\n                        });\\r\\n                    }\\r\\n                });\\r\\n\\r\\n            return result;\\r\\n        }\\r\\n\\r\\n        function buildTradingGuidLink() {\\r\\n            return getContentOrNullIfIsEmpty('tradingGuideLink',  HELPCENTER_WALKTHROUGHS_RESOURCE_NAME);// HELPCENTER_GUIDES_RESOURCE_NAME);\\r\\n        }\\r\\n\\r\\n        function buildWireTransferGuideLink() {\\r\\n            return getContentOrNullIfIsEmpty('wireTransferGuideLink', HELPCENTER_GUIDES_RESOURCE_NAME);\\r\\n        }\\r\\n\\r\\n        function buildSecureTradingGuideLink() {\\r\\n            return getContentOrNullIfIsEmpty('secureTradingLink',  HELPCENTER_WALKTHROUGHS_RESOURCE_NAME);\\r\\n        }\\r\\n\\r\\n        function buildUploadDocsGuideLink() {\\r\\n            return getContentOrNullIfIsEmpty('uploadDocsVideoLink', HELPCENTER_WALKTHROUGHS_RESOURCE_NAME);\\r\\n        }\\r\\n\\r\\n        function getData() {\\r\\n            return {\\r\\n                walkthroughList: buildWalkthroughsList(),\\r\\n                tradingGuideLink: buildTradingGuidLink(),\\r\\n                wireTransferGuideLink: buildWireTransferGuideLink(),\\r\\n                secureTradingLink: buildSecureTradingGuideLink(),\\r\\n                uploadDocsLink: buildUploadDocsGuideLink()\\r\\n            };\\r\\n        }\\r\\n\\r\\n        return {\\r\\n            GetData: getData\\r\\n        }\\r\\n    }\\r\\n);\\r\\n\\n\",\n    \"define(\\r\\n    'fxnet/uilayer/Modules/WalkthroughsModule',\\r\\n    [\\r\\n        'require',\\r\\n        'Q',\\r\\n        'handlers/general',\\r\\n        'global/UrlResolver'\\r\\n    ],\\r\\n    function (require) {\\r\\n        var Q = require('Q'),\\r\\n            general = require('handlers/general'),\\r\\n            urlResolver = require('global/UrlResolver');\\r\\n\\r\\n        var deferer = Q.defer(),\\r\\n            language = urlResolver.getLanguage(),\\r\\n            inlineManuallanguage = {\\r\\n                Arabic: 'ar',\\r\\n                Chinese: 'zh',\\r\\n                Czech: 'cs',\\r\\n                Dutch: 'nl',\\r\\n                English: 'en',\\r\\n                Francais: 'fr',\\r\\n                German: 'de',\\r\\n                Greek: 'el',\\r\\n                Hindi: 'hi',\\r\\n                Hungarian: 'hu',\\r\\n                Indonesian: 'id',\\r\\n                Italian: 'it',\\r\\n                Korean: 'ko',\\r\\n                Japanese: 'ja',\\r\\n                Polish: 'pl',\\r\\n                Romanian: 'ro',\\r\\n                Russian: 'ru',\\r\\n                Spanish: 'es',\\r\\n                Thai: 'th'\\r\\n            };\\r\\n\\r\\n        function loadPlayer() {\\r\\n            window.inlineManualOptions = { language: inlineManuallanguage[language] || 'en' };\\r\\n\\r\\n            var sc = document.createElement('script');\\r\\n\\r\\n            sc.type = 'text/javascript';\\r\\n            sc.async = true;\\r\\n            sc.src = 'https://inlinemanual.com/embed/player.dad7f32ce6cc61cea346bf8ae2c7216e.js';\\r\\n\\r\\n            var done = false;\\r\\n\\r\\n            sc.onload = sc.onreadystatechange = function () {\\r\\n                if (!done && (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete')) {\\r\\n                    done = true;\\r\\n                    deferer.resolve();\\r\\n                }\\r\\n            };\\r\\n\\r\\n            var s = document.getElementsByTagName('script')[0];\\r\\n\\r\\n            s.parentNode.insertBefore(sc, s);\\r\\n        }\\r\\n\\r\\n        function playWalkthrough(id, title) {\\r\\n            deferer.promise\\r\\n                .then(function () {\\r\\n                    window.inline_manual_player.activateTopic(id);\\r\\n                })\\r\\n                .done();\\r\\n        }\\r\\n\\r\\n        function hideFlowAvailable() {\\r\\n            var wPlayer = window.inline_manual_player;\\r\\n\\r\\n            return wPlayer &&\\r\\n                wPlayer.hasOwnProperty('ui_elements') &&\\r\\n                wPlayer.ui_elements.hasOwnProperty('popover_close_button') &&\\r\\n                wPlayer.ui_elements.popover_close_button.hasOwnProperty('attributes') &&\\r\\n                wPlayer.ui_elements.popover_close_button.attributes.hasOwnProperty('class') &&\\r\\n                wPlayer.ui_elements.popover_close_button.hasOwnProperty('events') &&\\r\\n                wPlayer.ui_elements.popover_close_button.events.hasOwnProperty('click');\\r\\n        }\\r\\n\\r\\n        function hideWalkthrough() {\\r\\n            if (!hideFlowAvailable()) {\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            var hideActionClass, hideEls;\\r\\n\\r\\n            hideActionClass = window.inline_manual_player.ui_elements.popover_close_button.attributes.class;\\r\\n            hideEls = document.getElementsByClassName(hideActionClass);\\r\\n\\r\\n            if (!general.isEmptyValue(hideActionClass) && hideEls && hideEls.length > 0) {\\r\\n                window.inline_manual_player.ui_elements.popover_close_button.events.click();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        function initModule() {\\r\\n            loadPlayer();\\r\\n\\r\\n            deferer.promise\\r\\n                .then(function () {\\r\\n                    window.addEventListener('popstate', function () {\\r\\n                        hideWalkthrough();\\r\\n                    });\\r\\n                })\\r\\n                .done();\\r\\n        }\\r\\n\\r\\n        initModule();\\r\\n\\r\\n        return {\\r\\n            walkthroughWidget: {\\r\\n                play: playWalkthrough,\\r\\n            }\\r\\n        };\\r\\n    }\\r\\n);\\r\\n\\n\",\n    \"\\n\",\n    \"define(\\\"FxNet/UILayer/ChatBot/PersonalGuideManager\\\", [\\r\\n    \\\"require\\\",\\r\\n    \\\"Q\\\",\\r\\n    \\\"knockout\\\",\\r\\n    \\\"handlers/general\\\",\\r\\n    \\\"handlers/Logger\\\",\\r\\n    \\\"tracking/loggers/datalayer\\\",\\r\\n    \\\"initdatamanagers/Customer\\\",\\r\\n    \\\"Dictionary\\\",\\r\\n    \\\"tracking/loggers/hotjareventslogger\\\",\\r\\n    \\\"handlers/languageHelper\\\",\\r\\n    \\\"global/UrlResolver\\\",\\r\\n    \\\"StateObject!HelpcHub\\\",\\r\\n    \\\"trackingIntExt/TrackingData\\\",\\r\\n    \\\"LoadDictionaryContent!fx_personal_guide\\\",\\r\\n    \\\"configuration/initconfiguration\\\",\\r\\n], function PersonalGuideManager(require) {\\r\\n    var ko = require(\\\"knockout\\\"),\\r\\n        Q = require(\\\"Q\\\"),\\r\\n        general = require(\\\"handlers/general\\\"),\\r\\n        logger = require(\\\"handlers/Logger\\\"),\\r\\n        dataLayer = require(\\\"tracking/loggers/datalayer\\\"),\\r\\n        customer = require(\\\"initdatamanagers/Customer\\\"),\\r\\n        dictionary = require(\\\"Dictionary\\\"),\\r\\n        hotjar = require(\\\"tracking/loggers/hotjareventslogger\\\"),\\r\\n        trackingData = require(\\\"trackingIntExt/TrackingData\\\"),\\r\\n        languageHelper = require(\\\"handlers/languageHelper\\\"),\\r\\n        stateObjectHelpc = require(\\\"StateObject!HelpcHub\\\"),\\r\\n        urlResolver = require(\\\"global/UrlResolver\\\"),\\r\\n        configuration = require('configuration/initconfiguration').PersonalGuideConfiguration,\\r\\n        template_data = null,\\r\\n        refElementId = \\\"personalGuideHelpcenterContainer\\\",\\r\\n        _chatBot = null,\\r\\n        chatBotInstance = null,\\r\\n        isEnabled = Q.defer(),\\r\\n        config = null,\\r\\n        isAcceptedSAProcessType = customer.prop.SAProcess === 1,\\r\\n        storageFactory = StorageFactory(StorageFactory.eStorageType.local),\\r\\n        helpCenterStorageKey = \\\"help-center-states\\\",\\r\\n        personalGuideResourceName = \\\"fx_personal_guide\\\",\\r\\n        isPersonalGuideEnabled = dictionary.GetItem(\\\"fx-personal-guide\\\", personalGuideResourceName, \\\"NA\\\") !== \\\"NA\\\",\\r\\n        personalGuideName = customer.prop.abTestings.configuration[\\\"fx-personal-guide\\\"],\\r\\n        PersonalAssistants = {\\r\\n            Max: Object.assign({\\r\\n                language: customer.prop.language,\\r\\n                bubbleMessage: {\\r\\n                    title: dictionary.GetItem(\\\"fx-personal-guide-max-bubble-title\\\", personalGuideResourceName),\\r\\n                    message: dictionary.GetItem(\\\"fx-personal-guide-max-bubble-message\\\", personalGuideResourceName),\\r\\n                },\\r\\n            }, configuration.PersonalAssistants.Max),\\r\\n\\r\\n            Lexi: Object.assign({\\r\\n                language: customer.prop.language,\\r\\n                bubbleMessage: {\\r\\n                    title: dictionary.GetItem(\\\"fx-personal-guide-lexi-bubble-title\\\", personalGuideResourceName),\\r\\n                    message: dictionary.GetItem(\\\"fx-personal-guide-lexi-bubble-message\\\", personalGuideResourceName),\\r\\n                },\\r\\n            }, configuration.PersonalAssistants.Lexi),\\r\\n\\r\\n            MaxSA: Object.assign({\\r\\n                language: customer.prop.language,\\r\\n                bubbleMessage: {\\r\\n                    title: dictionary.GetItem(\\\"fx-personal-guide-max-bubble-title\\\", personalGuideResourceName),\\r\\n                    message: dictionary.GetItem(\\\"fx-personal-guide-max-bubble-message\\\", personalGuideResourceName),\\r\\n                },\\r\\n            }, configuration.PersonalAssistants.MaxSA),\\r\\n\\r\\n            LexiTestVariation4: Object.assign({\\r\\n                language: customer.prop.language,\\r\\n                bubbleMessage: {\\r\\n                    message: dictionary.GetItem(\\\"fx-personal-guide-lexi-bubble-v4-message\\\", personalGuideResourceName),\\r\\n                    text: dictionary.GetItem(\\\"fx-personal-guide-bubble-v4-common-message\\\", personalGuideResourceName),\\r\\n                    ctaAbort: dictionary.GetItem(\\\"fx-personal-guide-bubble-abort-button\\\", personalGuideResourceName),\\r\\n                    ctaChatbot: dictionary.GetItem(\\r\\n                        \\\"fx-personal-guide-bubble-chatbot-button\\\",\\r\\n                        personalGuideResourceName\\r\\n                    ),\\r\\n                }\\r\\n            }, configuration.PersonalAssistants.LexiTestVariation4),\\r\\n\\r\\n            MaxTestVariation4: Object.assign({\\r\\n                language: customer.prop.language,\\r\\n                bubbleMessage: {\\r\\n                    message: dictionary.GetItem(\\\"fx-personal-guide-max-bubble-v4-message\\\", personalGuideResourceName),\\r\\n                    text: dictionary.GetItem(\\\"fx-personal-guide-bubble-v4-common-message\\\", personalGuideResourceName),\\r\\n                    ctaAbort: dictionary.GetItem(\\\"fx-personal-guide-bubble-abort-button\\\", personalGuideResourceName),\\r\\n                    ctaChatbot: dictionary.GetItem(\\r\\n                        \\\"fx-personal-guide-bubble-chatbot-button\\\",\\r\\n                        personalGuideResourceName\\r\\n                    ),\\r\\n                },\\r\\n            }, configuration.PersonalAssistants.MaxTestVariation4),\\r\\n        },\\r\\n        selectedAssistant = null,\\r\\n        SiteTriggerNameExcluded = [\\\"ib\\\", \\\"cashback\\\", \\\"cashbackaff\\\", \\\"finalcashback\\\", \\\"sageneral\\\", \\\"welcomebonus100_sa\\\"];\\r\\n\\r\\n    function getPGInteractedStatus() {\\r\\n        var obj = JSONHelper.STR2JSON(\\r\\n            \\\"HelpCenterViewModel:getPGInteractedStatus\\\",\\r\\n            storageFactory.getItem(helpCenterStorageKey)\\r\\n        ) || { pgInteracted: false };\\r\\n        return obj.pgInteracted;\\r\\n    }\\r\\n\\r\\n    function buildChatBotConfig(chatBotConfig) {\\r\\n        config = {\\r\\n            name: chatBotConfig.name.replace(/SA$/, \\\"\\\"),\\r\\n            onError: function (data) {\\r\\n                logger.warn(\\\"Chatbot-PersonalGuide\\\", data);\\r\\n            },\\r\\n            onLoad: function () {\\r\\n                var eventObj = { event: \\\"personalguide4helpcenter-ready\\\" };\\r\\n\\r\\n                eventObj.agentName = chatBotConfig.name;\\r\\n                eventObj.agentVersion = chatBotConfig.version;\\r\\n                eventObj.agentLanguage = chatBotConfig.language;\\r\\n                dataLayer.push(eventObj);\\r\\n            },\\r\\n            onClose: function () { },\\r\\n            onTrack: function (type, name, _data) {\\r\\n                var eventObj = { event: name, eventType: type };\\r\\n\\r\\n                if (type == \\\"click\\\" && !getPGInteractedStatus()) {\\r\\n                    stateObjectHelpc.update(\\\"pg-interacted\\\", true);\\r\\n                }\\r\\n\\r\\n                for (var i = 1; i < _data.length; i++) {\\r\\n                    var property = _data[i].split(\\\"=\\\");\\r\\n                    if (property.length > 1) eventObj[property[0]] = property[1];\\r\\n                }\\r\\n                eventObj.agentName = chatBotConfig.name;\\r\\n                eventObj.agentVersion = chatBotConfig.version;\\r\\n                eventObj.agentLanguage = chatBotConfig.language;\\r\\n\\r\\n                window.emilyCurrentBlock = eventObj.block_id;\\r\\n                dataLayer.push(eventObj);\\r\\n            },\\r\\n            onCallback: function (_data) {\\r\\n                switch (_data[0]) {\\r\\n                    case \\\"deposit\\\": {\\r\\n                        $viewModelsManager.VManager.RedirectToURL(\\\"/webpl3/Account/Redirect/Deposit\\\");\\r\\n                        break;\\r\\n                    }\\r\\n                    case \\\"walkthrough\\\": {\\r\\n                        dataLayer.push({ event: \\\"personalguide4helpcenter-play\\\", walkthroughToPlay: _data[1] });\\r\\n                        break;\\r\\n                    }\\r\\n                    default: {\\r\\n                        dataLayer.push({\\r\\n                            event: \\\"personalguide-callback-error\\\",\\r\\n                            data: (_data[0] || {}).toString(),\\r\\n                        });\\r\\n                    }\\r\\n                }\\r\\n            },\\r\\n            defaultStatus: \\\"hide\\\",\\r\\n            history: true,\\r\\n        };\\r\\n\\r\\n        if (languageHelper.IsRtlLanguage()) {\\r\\n            config.direction = \\\"rtl\\\";\\r\\n        }\\r\\n\\r\\n        config.base_url = urlResolver.getStaticJSPath() + \\\"/fx-chatbot\\\";\\r\\n    }\\r\\n\\r\\n    function _initChatBot() {\\r\\n        var assistantName = isAcceptedSAProcessType ? \\\"MaxSA\\\" : personalGuideName;\\r\\n\\r\\n        if (isPersonalGuideEnabled && assistantName) {\\r\\n            selectedAssistant = PersonalAssistants[assistantName];\\r\\n        } else {\\r\\n            isEnabled.reject(false);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        require([\\r\\n            \\\"assets/js/fx-chatbot/main\\\",\\r\\n            \\\"text!assets/js/fx-chatbot/data/PersonalGuide/\\\" +\\r\\n            selectedAssistant.name +\\r\\n            \\\"_\\\" +\\r\\n            selectedAssistant.version +\\r\\n            \\\"_\\\" +\\r\\n            selectedAssistant.language +\\r\\n            \\\".js\\\",\\r\\n        ], function (chatBot, data_txt) {\\r\\n            _chatBot = chatBot;\\r\\n\\r\\n            hotjar.init(true)\\r\\n                .fin(function () {\\r\\n                    dataLayer.push({ \\\"event\\\": \\\"part-of-test\\\", \\\"variation\\\": selectedAssistant.variation });\\r\\n\\r\\n                    template_data = JSON.parse(data_txt);\\r\\n\\r\\n                    buildChatBotConfig(selectedAssistant);\\r\\n\\r\\n                    isEnabled.resolve(true);\\r\\n                });\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function startChatBoot() {\\r\\n        isEnabled.promise.then(function (enabled) {\\r\\n            if (enabled && _chatBot && general.isFunctionType(_chatBot.ChatBot)) {\\r\\n                chatBotInstance = _chatBot.ChatBot(template_data, config, document.getElementById(refElementId));\\r\\n            }\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function showChatBot() {\\r\\n        isEnabled.promise.then(function (enabled) {\\r\\n            if (enabled) {\\r\\n                chatBotInstance.changeStatus(\\\"show\\\");\\r\\n            }\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function dispose() {\\r\\n        isEnabled.promise.then(function (enabled) {\\r\\n            if (enabled) {\\r\\n                chatBotInstance.dispose();\\r\\n            }\\r\\n        });\\r\\n\\r\\n        biCustomerUnsubscribe();\\r\\n    }\\r\\n\\r\\n    function _initPersonalGuide(scmmDataLOaded) {\\r\\n        if (scmmDataLOaded === true) {\\r\\n            biCustomerUnsubscribe();\\r\\n\\r\\n            var _trackingData = trackingData.getProperties(),\\r\\n                _nonTrackingData = trackingData.getNonTrackingProperties();\\r\\n\\r\\n            if (\\r\\n                !general.objectContainsKey(_nonTrackingData, \\\"SiteTriggerName\\\") ||\\r\\n                SiteTriggerNameExcluded.indexOf(_nonTrackingData.SiteTriggerName.toLowerCase()) >= 0 ||\\r\\n                parseInt(_trackingData.NumberOfDeposits) > 0\\r\\n            ) {\\r\\n                isEnabled.reject(false);\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            _initChatBot();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    var sccmDataLoaded, sccmDataLoadedSubscriber;\\r\\n    function _init() {\\r\\n        sccmDataLoaded = ko.observable();\\r\\n        sccmDataLoadedSubscriber = sccmDataLoaded.subscribe(_initPersonalGuide);\\r\\n        sccmDataLoaded.subscribeTo(\\\"scmm-data-loaded\\\", true);\\r\\n    }\\r\\n\\r\\n    function biCustomerUnsubscribe() {\\r\\n        if (sccmDataLoadedSubscriber) {\\r\\n            sccmDataLoadedSubscriber.dispose();\\r\\n            sccmDataLoaded.unsubscribeFrom(\\\"scmm-data-loaded\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    _init();\\r\\n\\r\\n    return {\\r\\n        enabled: isEnabled.promise,\\r\\n        start: startChatBoot,\\r\\n        show: showChatBot,\\r\\n        dispose: dispose,\\r\\n        getBubbleNessage: function getBubbleNessage() {\\r\\n            return selectedAssistant.bubbleMessage;\\r\\n        },\\r\\n    };\\r\\n});\\r\\n\\n\",\n    \"define(\\\"devicemanagers/HelpCenterMenuPersonalGuideManager\\\", [\\r\\n\\t\\\"require\\\",\\r\\n\\t\\\"handlers/general\\\",\\r\\n\\t\\\"tracking/loggers/datalayer\\\",\\r\\n\\t\\\"StateObject!HelpcHub\\\",\\r\\n\\t\\\"devicemanagers/StatesManager\\\",\\r\\n\\t\\\"fxnet/uilayer/Modules/WalkthroughsModule\\\",\\r\\n\\t\\\"managers/viewsmanager\\\",\\r\\n\\t\\\"managers/HelpCenterContentManager\\\",\\r\\n\\t\\\"generalmanagers/ErrorManager\\\",\\r\\n\\t\\\"StateObject!IM\\\",\\r\\n\\t\\\"FxNet/UILayer/ChatBot/PersonalGuideManager\\\",\\r\\n\\t\\\"LoadDictionaryContent!fx_personal_guide\\\",\\r\\n\\t\\\"configuration/initconfiguration\\\",\\r\\n], function (require) {\\r\\n\\tvar general = require(\\\"handlers/general\\\"),\\r\\n\\t\\tdataLayer = require(\\\"tracking/loggers/datalayer\\\"),\\r\\n\\t\\tstateObjectHelpc = require(\\\"StateObject!HelpcHub\\\"),\\r\\n\\t\\tstatesManager = require(\\\"devicemanagers/StatesManager\\\"),\\r\\n\\t\\twalkthrough = require(\\\"fxnet/uilayer/Modules/WalkthroughsModule\\\"),\\r\\n\\t\\tviewsManager = require(\\\"managers/viewsmanager\\\"),\\r\\n\\t\\tcontentManager = require(\\\"managers/HelpCenterContentManager\\\"),\\r\\n\\t\\tErrorManager = require(\\\"generalmanagers/ErrorManager\\\"),\\r\\n\\t\\tstateObjectIM = require(\\\"StateObject!IM\\\"),\\r\\n\\t\\tpersonalGuideManager = require(\\\"FxNet/UILayer/ChatBot/PersonalGuideManager\\\"),\\r\\n\\t\\tuserIsActive = statesManager.States.IsActive,\\r\\n\\t\\tstorageFactory = StorageFactory(StorageFactory.eStorageType.local),\\r\\n\\t\\thelpCenterStorageKey = \\\"help-center-states\\\",\\r\\n\\t\\tusubscribeRewardClose = null,\\r\\n\\t\\tconfiguration = require(\\\"configuration/initconfiguration\\\").PersonalGuideConfiguration;\\r\\n\\r\\n\\tfunction getPGSeenStatus() {\\r\\n\\t\\tvar obj = JSON.parse(storageFactory.getItem(helpCenterStorageKey)) || { pgSeen: false };\\r\\n\\t\\treturn obj.pgSeen;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPGInteractedStatus() {\\r\\n\\t\\tvar obj = JSON.parse(storageFactory.getItem(helpCenterStorageKey)) || { pgInteracted: false };\\r\\n\\t\\treturn obj.pgInteracted;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _start() {\\r\\n\\t\\tif (userIsActive() || stateObjectHelpc.get(\\\"pg-present\\\")) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tsetSubscriptions();\\r\\n\\r\\n\\t\\tsetHidePersonalGuideStatus();\\r\\n\\r\\n\\t\\tvar bubbleMessages = null;\\r\\n\\r\\n\\t\\tenablePersonalGuide(bubbleMessages);\\r\\n\\t}\\r\\n\\r\\n\\tfunction enablePersonalGuide(bubbleMessages, hidePersonalGuide) {\\r\\n\\t\\tif (hidePersonalGuide || stateObjectHelpc.get(\\\"pg-present\\\")) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tstateObjectHelpc.update(\\\"pg-present\\\", true);\\r\\n\\t\\tif (bubbleMessages !== null && !(getPGSeenStatus() || getPGInteractedStatus())) {\\r\\n\\t\\t\\tstateObjectHelpc.update(\\\"showBubble\\\", bubbleMessages);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (!(getPGSeenStatus() || getPGInteractedStatus()) && !stateObjectHelpc.get(\\\"HidePersonalGuide\\\")) {\\r\\n\\t\\t\\tstateObjectHelpc.update(\\\"visible\\\", true);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction disablePersonalGuideWhenBecameActive(mustDisable) {\\r\\n\\t\\tif (mustDisable === true) {\\r\\n\\t\\t\\tstateObjectHelpc.update(\\\"pg-present\\\", false);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction walkthroughPlay(data) {\\r\\n\\t\\tvar qptContent,\\r\\n\\t\\t\\twtPlay,\\r\\n\\t\\t\\tINTRO = \\\"introduction\\\";\\r\\n\\r\\n\\t\\tif (userIsActive() || data.event !== \\\"personalguide4helpcenter-play\\\") {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tqptContent =\\r\\n\\t\\t\\tcontentManager.GetData().walkthroughList.find(function (item) {\\r\\n\\t\\t\\t\\treturn item.type === eHowtoWthrough.quickTour;\\r\\n\\t\\t\\t}) || {};\\r\\n\\t\\twtPlay = data.walkthroughToPlay !== INTRO ? data.walkthroughToPlay : qptContent.walkthrougId;\\r\\n\\t\\tstateObjectHelpc.update(\\\"visible\\\", false);\\r\\n\\r\\n\\t\\tif (wtPlay) {\\r\\n\\t\\t\\twalkthrough.walkthroughWidget.play(wtPlay);\\r\\n\\t\\t} else if (data.walkthroughToPlay === INTRO && !qptContent) {\\r\\n\\t\\t\\tErrorManager.onError(\\r\\n\\t\\t\\t\\t\\\"HelpCenterMenuPersonalGuideManager/WalkthroughPlay\\\",\\r\\n\\t\\t\\t\\t\\\"Invalid walkthrough id: \\\" + data.walkthroughToPlay,\\r\\n\\t\\t\\t\\teErrorSeverity.low\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction showPersonalGuideOnRewardClose() {\\r\\n\\t\\tif (!usubscribeRewardClose) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tusubscribeRewardClose();\\r\\n\\t\\tusubscribeRewardClose = null;\\r\\n\\r\\n\\t\\tif (!stateObjectHelpc.get(\\\"pg-present\\\")) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tstateObjectHelpc.update(\\\"visible\\\", true);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setHidePersonalGuideStatus() {\\r\\n\\t\\tvar mustHide =\\r\\n\\t\\t\\t0 <= configuration.DoNotShowForms.indexOf(viewsManager.ActiveFormType()) ||\\r\\n\\t\\t\\t(stateObjectIM.get(\\\"IMPopUpVisible\\\") || {}).MessageType === 17;\\r\\n\\r\\n\\t\\tif (stateObjectHelpc.get(\\\"HidePersonalGuide\\\") !== mustHide) {\\r\\n\\t\\t\\tstateObjectHelpc.update(\\\"HidePersonalGuide\\\", mustHide);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (mustHide && stateObjectHelpc.get(\\\"visible\\\")) {\\r\\n\\t\\t\\tstateObjectHelpc.update(\\\"visible\\\", false);\\r\\n\\t\\t\\tif ((stateObjectIM.get(\\\"IMPopUpVisible\\\") || {}).MessageType === 17) {\\r\\n\\t\\t\\t\\tusubscribeRewardClose = stateObjectIM.subscribe(\\\"IMPopUpVisible\\\", showPersonalGuideOnRewardClose);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction setBubblePersonalGuideStatus(interacted) {\\r\\n\\t\\tif (interacted == true) {\\r\\n\\t\\t\\tstateObjectHelpc.update(\\\"showNotification\\\", false);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction setSubscriptions() {\\r\\n\\t\\tuserIsActive.subscribe(disablePersonalGuideWhenBecameActive);\\r\\n\\t\\tdataLayer.subscribers.push(walkthroughPlay);\\r\\n\\t\\tviewsManager.ActiveFormType.subscribe(setHidePersonalGuideStatus);\\r\\n\\t\\tstateObjectIM.subscribe(\\\"IMPopUpVisible\\\", setHidePersonalGuideStatus);\\r\\n\\r\\n\\t\\tstateObjectHelpc.set(\\\"pg-interacted\\\", false);\\r\\n\\t\\tstateObjectHelpc.subscribe(\\\"pg-interacted\\\", setBubblePersonalGuideStatus);\\r\\n\\t}\\r\\n\\r\\n\\tfunction init() {\\r\\n\\t\\tpersonalGuideManager.enabled.then(function (isEnabled) {\\r\\n\\t\\t\\tif (isEnabled) {\\r\\n\\t\\t\\t\\tpersonalGuideManager.start({});\\r\\n\\t\\t\\t\\t_start();\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\tfunction scroll() {\\r\\n\\t\\tif (window.emilyScrollContainer && general.isFunctionType(window.emilyScrollContainer)) {\\r\\n\\t\\t\\twindow.emilyScrollContainer();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tInit: init,\\r\\n\\t\\tShow: personalGuideManager.show,\\r\\n\\t\\tScroll: scroll,\\r\\n\\t};\\r\\n});\\r\\n\\n\",\n    \"define('deviceviewmodels/HelpCenterViewModel',[\\r\\n\\t\\\"require\\\",\\r\\n\\t\\\"knockout\\\",\\r\\n\\t\\\"handlers/general\\\",\\r\\n\\t\\\"helpers/KoComponentViewModel\\\",\\r\\n\\t\\\"StateObject!HelpcHub\\\",\\r\\n\\t\\\"managers/HelpCenterContentManager\\\",\\r\\n\\t\\\"devicemanagers/HelpCenterMenuPersonalGuideManager\\\",\\r\\n\\t\\\"managers/viewsmanager\\\",\\r\\n\\t\\\"JSONHelper\\\",\\r\\n\\t\\\"global/storagefactory\\\",\\r\\n], function HelpCenterDef(require) {\\r\\n\\tvar ko = require(\\\"knockout\\\"),\\r\\n\\t\\tgeneral = require(\\\"handlers/general\\\"),\\r\\n\\t\\tKoComponentViewModel = require(\\\"helpers/KoComponentViewModel\\\"),\\r\\n\\t\\tstateObjectHelpc = require(\\\"StateObject!HelpcHub\\\"),\\r\\n\\t\\tcontentManager = require(\\\"managers/HelpCenterContentManager\\\"),\\r\\n\\t\\tpersonalGuideManger = require(\\\"devicemanagers/HelpCenterMenuPersonalGuideManager\\\"),\\r\\n\\t\\tVManager = require(\\\"managers/viewsmanager\\\"),\\r\\n\\t\\tJSONHelper = require(\\\"JSONHelper\\\"),\\r\\n\\t\\tStorageFactory = require(\\\"global/storagefactory\\\"),\\r\\n\\t\\tstorageFactory = StorageFactory(StorageFactory.eStorageType.local),\\r\\n\\t\\thelpCenterStorageKey = \\\"help-center-states\\\",\\r\\n\\t\\tshowPersonalGuideOnNextOpen = false;\\r\\n\\r\\n\\tfunction getPGSeenStatus() {\\r\\n\\t\\tvar obj = JSONHelper.STR2JSON(\\r\\n\\t\\t\\t\\\"HelpCenterViewModel:getPGSeenStatus\\\",\\r\\n\\t\\t\\tstorageFactory.getItem(helpCenterStorageKey)\\r\\n\\t\\t) || { pgSeen: false };\\r\\n\\r\\n\\t\\treturn obj.pgSeen;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPGInteractedStatus() {\\r\\n\\t\\tvar obj = JSONHelper.STR2JSON(\\r\\n\\t\\t\\t\\\"HelpCenterViewModel:getPGInteractedStatus\\\",\\r\\n\\t\\t\\tstorageFactory.getItem(helpCenterStorageKey)\\r\\n\\t\\t) || { pgInteracted: false };\\r\\n\\r\\n\\t\\treturn obj.pgInteracted;\\r\\n\\t}\\r\\n\\r\\n\\tfunction savePGInteractedStatus(statusSeen, statusInteracted) {\\r\\n\\t\\tvar obj =\\r\\n\\t\\t\\tJSONHelper.STR2JSON(\\r\\n\\t\\t\\t\\t\\\"HelpCenterViewModel:savePGInteractedStatus\\\",\\r\\n\\t\\t\\t\\tstorageFactory.getItem(helpCenterStorageKey)\\r\\n\\t\\t\\t) || {};\\r\\n\\r\\n\\t\\tobj.pgSeen = statusSeen;\\r\\n\\t\\tobj.pgInteracted = statusInteracted;\\r\\n\\t\\tstorageFactory.setItem(helpCenterStorageKey, JSON.stringify(obj));\\r\\n\\t}\\r\\n\\r\\n\\tfunction getHelpCenterSeenStatus() {\\r\\n\\t\\tvar obj = JSONHelper.STR2JSON(\\r\\n\\t\\t\\t\\\"HelpCenterViewModel:getHelpCenterSeenStatus\\\",\\r\\n\\t\\t\\tstorageFactory.getItem(helpCenterStorageKey)\\r\\n\\t\\t) || { helpCenterSeen: false };\\r\\n\\r\\n\\t\\treturn obj.helpCenterSeen;\\r\\n\\t}\\r\\n\\r\\n\\tfunction saveHelpCenterSeenStatus(status) {\\r\\n\\t\\tvar obj =\\r\\n\\t\\t\\tJSONHelper.STR2JSON(\\r\\n\\t\\t\\t\\t\\\"HelpCenterViewModel:saveHelpCenterSeenStatus\\\",\\r\\n\\t\\t\\t\\tstorageFactory.getItem(helpCenterStorageKey)\\r\\n\\t\\t\\t) || {};\\r\\n\\r\\n\\t\\tobj.helpCenterSeen = status;\\r\\n\\t\\tstorageFactory.setItem(helpCenterStorageKey, JSON.stringify(obj));\\r\\n\\t}\\r\\n\\r\\n\\tvar HelpCenterViewModel = general.extendClass(KoComponentViewModel, function HelpCenterClass(params) {\\r\\n\\t\\tvar self = this,\\r\\n\\t\\t\\tparent = this.parent,\\r\\n\\t\\t\\tdata = this.Data,\\r\\n\\t\\t\\tsoSubscriptions = [];\\r\\n\\r\\n\\t\\tfunction getLastSectionActive() {\\r\\n\\t\\t\\tif (!data.pgPresent()) {\\r\\n\\t\\t\\t\\treturn eHelpcSections.default;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar obj =\\r\\n\\t\\t\\t\\tJSONHelper.STR2JSON(\\r\\n\\t\\t\\t\\t\\t\\\"HelpCenterViewModel:getLastSectionActive\\\",\\r\\n\\t\\t\\t\\t\\tstorageFactory.getItem(helpCenterStorageKey)\\r\\n\\t\\t\\t\\t) || {};\\r\\n\\r\\n\\t\\t\\treturn obj.lastActiveSection || eHelpcSections.personalguide;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction saveLastSectionActive(section) {\\r\\n\\t\\t\\tif (!data.pgPresent()) {\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar obj =\\r\\n\\t\\t\\t\\tJSONHelper.STR2JSON(\\r\\n\\t\\t\\t\\t\\t\\\"HelpCenterViewModel:saveLastSectionActive\\\",\\r\\n\\t\\t\\t\\t\\tstorageFactory.getItem(helpCenterStorageKey)\\r\\n\\t\\t\\t\\t) || {};\\r\\n\\r\\n\\t\\t\\tobj.lastActiveSection = section;\\r\\n\\t\\t\\tstorageFactory.setItem(helpCenterStorageKey, JSON.stringify(obj));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction init() {\\r\\n\\t\\t\\tpersonalGuideManger.Init();\\r\\n\\t\\t\\tsetObservables();\\r\\n\\t\\t\\tsetSubscriptions();\\r\\n\\t\\t\\tloadResources();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction loadResources() {\\r\\n\\t\\t\\tvar content = contentManager.GetData();\\r\\n\\r\\n\\t\\t\\tdata.listData(content.walkthroughList);\\r\\n\\t\\t\\tdata.tradingGuideLink(content.tradingGuideLink);\\r\\n\\t\\t\\tdata.wireTransferGuideLink(content.wireTransferGuideLink);\\r\\n\\t\\t\\tdata.secureTradingLink(content.secureTradingLink);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setObservables() {\\r\\n\\t\\t\\tdata.personalGuideLoaded = false;\\r\\n\\t\\t\\tdata.tradingGuideLink = ko.observable(null);\\r\\n\\t\\t\\tdata.wireTransferGuideLink = ko.observable(null);\\r\\n\\t\\t\\tdata.secureTradingLink = ko.observable(null);\\r\\n\\t\\t\\tdata.pcLoading = ko.observable(false);\\r\\n\\r\\n\\t\\t\\tdata.visible = ko.observable(false);\\r\\n\\t\\t\\tstateObjectHelpc.update(\\\"visible\\\", false);\\r\\n\\r\\n\\t\\t\\tdata.hidePersonalGuide = ko.observable(stateObjectHelpc.get(\\\"HidePersonalGuide\\\") || false);\\r\\n\\t\\t\\tdata.pgPresent = ko.observable();\\r\\n\\r\\n\\t\\t\\tdata.activeSection = ko.observable(data.pgPresent() ? getLastSectionActive() : eHelpcSections.default);\\r\\n\\t\\t\\tdata.listData = ko.observable({});\\r\\n\\r\\n\\t\\t\\tdata.pgSeen = ko.observable(getPGSeenStatus());\\r\\n\\t\\t\\tdata.visibleFirstTime = ko.observable(!(getPGSeenStatus() || getPGInteractedStatus()));\\r\\n\\r\\n\\t\\t\\tko.computed(function () {\\r\\n\\t\\t\\t\\tif (\\r\\n\\t\\t\\t\\t\\tdata.visible() &&\\r\\n\\t\\t\\t\\t\\tdata.activeSection() === eHelpcSections.personalguide &&\\r\\n\\t\\t\\t\\t\\t!data.personalGuideLoaded\\r\\n\\t\\t\\t\\t) {\\r\\n\\t\\t\\t\\t\\tdata.personalGuideLoaded = true;\\r\\n\\t\\t\\t\\t\\tpersonalGuideManger.Show();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setSubscriptions() {\\r\\n\\t\\t\\tstateObjectHelpc.set(\\\"pg-interacted\\\", getPGInteractedStatus());\\r\\n\\t\\t\\tstateObjectHelpc.subscribe(\\\"pg-interacted\\\", function (interacted) {\\r\\n\\t\\t\\t\\tsavePGInteractedStatus(data.pgSeen(), interacted);\\r\\n\\t\\t\\t});\\r\\n\\t\\t\\tsoSubscriptions.push(\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tunsubscribe: stateObjectHelpc.subscribe(\\\"visible\\\", function (willBeVisible) {\\r\\n\\t\\t\\t\\t\\t\\tif (!data.visible()) {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (stateObjectHelpc.get(\\\"pg-present\\\") && !data.pgPresent()) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.pgPresent(true);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif (!(getPGSeenStatus() || getPGInteractedStatus())) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdata.activeSection(eHelpcSections.personalguide);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t} else if (!willBeVisible && data.pgPresent()) {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (!(getPGSeenStatus() || getPGInteractedStatus())) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tsaveLastSectionActive(eHelpcSections.personalguide);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tshowPersonalGuideOnNextOpen = true;\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tsaveLastSectionActive(data.activeSection());\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif (willBeVisible) {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (data.pgPresent()) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif (!(getPGSeenStatus() || getPGInteractedStatus())) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tstateObjectHelpc.update(\\\"showNotification\\\", true);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdata.visibleFirstTime(false);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif (!getHelpCenterSeenStatus()) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tsaveHelpCenterSeenStatus(true);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdata.visibleFirstTime(true);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdata.visibleFirstTime(false);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tdata.activeSection(getLastSectionActive());\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tdata.visible(willBeVisible);\\r\\n\\t\\t\\t\\t\\t}),\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tunsubscribe: stateObjectHelpc.subscribe(\\\"pg-present\\\", function (isPresent) {\\r\\n\\t\\t\\t\\t\\t\\tif (isPresent === false) {\\r\\n\\t\\t\\t\\t\\t\\t\\tstateObjectHelpc.update(\\\"showNotification\\\", false);\\r\\n\\t\\t\\t\\t\\t\\t\\tstateObjectHelpc.update(\\\"visible\\\", false);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tdata.pgPresent(false);\\r\\n\\t\\t\\t\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif (!data.visible()) {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (!(getPGSeenStatus() || getPGInteractedStatus()) && !data.pgPresent() && isPresent) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.activeSection(eHelpcSections.personalguide);\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\tif (\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tstateObjectHelpc.get(\\\"HidePersonalGuide\\\") &&\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t!(data.pgSeen() || getPGInteractedStatus())\\r\\n\\t\\t\\t\\t\\t\\t\\t) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tshowPersonalGuideOnNextOpen = true;\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.pgPresent(isPresent);\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (!(data.pgSeen() || getPGInteractedStatus())) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tstateObjectHelpc.update(\\\"showNotification\\\", true);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tshowPersonalGuideOnNextOpen = true;\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}),\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tunsubscribe: stateObjectHelpc.subscribe(\\\"HidePersonalGuide\\\", function (mustHide) {\\r\\n\\t\\t\\t\\t\\t\\tdata.hidePersonalGuide(mustHide);\\r\\n\\t\\t\\t\\t\\t\\tif (!mustHide && showPersonalGuideOnNextOpen) {\\r\\n\\t\\t\\t\\t\\t\\t\\tshowPersonalGuideOnNextOpen = false;\\r\\n\\t\\t\\t\\t\\t\\t\\tstateObjectHelpc.update(\\\"visible\\\", true);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}),\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\tself.subscribeTo(data.visible, function (visible) {\\r\\n\\t\\t\\t\\tko.postbox.publish(\\\"help-center\\\", {\\r\\n\\t\\t\\t\\t\\tevent: visible ? \\\"open\\\" : \\\"close\\\",\\r\\n\\t\\t\\t\\t\\ttab: data.activeSection() === eHelpcSections.personalguide ? \\\"guide\\\" : \\\"help\\\",\\r\\n\\t\\t\\t\\t});\\r\\n\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\tvar lastForm = VManager.ActiveFormName();\\r\\n\\t\\t\\tself.subscribeTo(VManager.ActiveFormName, function (currentForm) {\\r\\n\\t\\t\\t\\tif (data.visible() && lastForm !== currentForm) {\\r\\n\\t\\t\\t\\t\\tstateObjectHelpc.update(\\\"visible\\\", false);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tlastForm = currentForm;\\r\\n\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\tself.subscribeTo(data.activeSection, function (value) {\\r\\n\\t\\t\\t\\tif (value === eHelpcSections.personalguide && data.personalGuideLoaded) {\\r\\n\\t\\t\\t\\t\\tpersonalGuideManger.Scroll();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\tself.subscribeTo(data.visible, function (value) {\\r\\n\\t\\t\\t\\tif (value && data.personalGuideLoaded) {\\r\\n\\t\\t\\t\\t\\tpersonalGuideManger.Scroll();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction closeHub() {\\r\\n\\t\\t\\tstateObjectHelpc.update(\\\"visible\\\", false);\\r\\n\\r\\n\\t\\t\\tif (showPersonalGuideOnNextOpen === true) {\\r\\n\\t\\t\\t\\tdata.activeSection(eHelpcSections.personalguide);\\r\\n\\t\\t\\t\\tdata.pgPresent(true);\\r\\n\\t\\t\\t\\tshowPersonalGuideOnNextOpen = false;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tstateObjectHelpc.update(\\\"showBubble\\\", false);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tsaveLastSectionActive(data.activeSection());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction save() {\\r\\n\\t\\t\\tsaveLastSectionActive(data.activeSection());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction dispose() {\\r\\n\\t\\t\\tsave();\\r\\n\\r\\n\\t\\t\\twhile (soSubscriptions.length > 0) {\\r\\n\\t\\t\\t\\tsoSubscriptions.pop().unsubscribe();\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tparent.dispose.call(self);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tinit: init,\\r\\n\\t\\t\\tdispose: dispose,\\r\\n\\t\\t\\tData: data,\\r\\n\\t\\t\\tCloseHub: closeHub,\\r\\n\\t\\t};\\r\\n\\t});\\r\\n\\r\\n\\tfunction createViewModel(params) {\\r\\n\\t\\tvar viewModel = new HelpCenterViewModel(params || {});\\r\\n\\t\\tviewModel.init();\\r\\n\\r\\n\\t\\treturn viewModel;\\r\\n\\t}\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tviewModel: {\\r\\n\\t\\t\\tcreateViewModel: createViewModel,\\r\\n\\t\\t},\\r\\n\\t};\\r\\n});\\r\\n\\n\",\n    \"define('viewmodels/HelpCenter/HelpCenterActionViewModel',[\\r\\n\\t\\\"require\\\",\\r\\n\\t\\\"knockout\\\",\\r\\n\\t\\\"handlers/general\\\",\\r\\n\\t\\\"helpers/KoComponentViewModel\\\",\\r\\n\\t\\\"StateObject!HelpcHub\\\",\\r\\n], function HelpCenterActionDef(require) {\\r\\n\\tvar ko = require(\\\"knockout\\\"),\\r\\n\\t\\tgeneral = require(\\\"handlers/general\\\"),\\r\\n\\t\\tKoComponentViewModel = require(\\\"helpers/KoComponentViewModel\\\"),\\r\\n\\t\\tstateObjectHelpc = require(\\\"StateObject!HelpcHub\\\");\\r\\n\\r\\n\\tvar HelpCenterActionViewModel = general.extendClass(KoComponentViewModel, function HelpCenterActionClass(params) {\\r\\n\\t\\tvar self = this,\\r\\n\\t\\t\\tparent = this.parent,\\r\\n\\t\\t\\tdata = this.Data,\\r\\n\\t\\t\\tsoSubscriptions = [];\\r\\n\\r\\n\\t\\tfunction init() {\\r\\n\\t\\t\\tparent.init.call(self, params);\\r\\n\\r\\n\\t\\t\\tif (general.isNullOrUndefined(stateObjectHelpc.get(\\\"visible\\\"))) {\\r\\n\\t\\t\\t\\tstateObjectHelpc.update(\\\"visible\\\", false);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tdata.activeMenu = ko.observable(stateObjectHelpc.get(\\\"visible\\\"));\\r\\n\\t\\t\\tdata.showNotification = ko.observable(stateObjectHelpc.get(\\\"showNotification\\\"));\\r\\n\\t\\t\\tsetSubscriptions();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setSubscriptions() {\\r\\n\\t\\t\\tsoSubscriptions.push({\\r\\n\\t\\t\\t\\tunsubscribe: stateObjectHelpc.subscribe(\\\"showNotification\\\", function (value) {\\r\\n\\t\\t\\t\\t\\tdata.showNotification(value);\\r\\n\\t\\t\\t\\t}),\\r\\n\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\tsoSubscriptions.push({\\r\\n\\t\\t\\t\\tunsubscribe: stateObjectHelpc.subscribe(\\\"visible\\\", function (value) {\\r\\n\\t\\t\\t\\t\\tdata.activeMenu(value);\\r\\n\\t\\t\\t\\t}),\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction toggleHelpCenter() {\\r\\n\\t\\t\\tvar newValue = !stateObjectHelpc.get(\\\"visible\\\");\\r\\n\\t\\t\\tif (data.showNotification() && true !== stateObjectHelpc.get(\\\"visible\\\")) {\\r\\n\\t\\t\\t\\tstateObjectHelpc.update(\\\"showNotification\\\", false);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tdata.activeMenu(newValue);\\r\\n\\t\\t\\tstateObjectHelpc.update(\\\"visible\\\", newValue);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction dispose() {\\r\\n\\t\\t\\twhile (soSubscriptions.length > 0) {\\r\\n\\t\\t\\t\\tsoSubscriptions.pop().unsubscribe();\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tparent.dispose.call(self);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tinit: init,\\r\\n\\t\\t\\tdispose: dispose,\\r\\n\\t\\t\\tData: data,\\r\\n\\t\\t\\ttoggleHelpCenter: toggleHelpCenter,\\r\\n\\t\\t};\\r\\n\\t});\\r\\n\\r\\n\\tvar createViewModel = function (params) {\\r\\n\\t\\tvar viewModel = new HelpCenterActionViewModel(params);\\r\\n\\t\\tviewModel.init();\\r\\n\\r\\n\\t\\treturn viewModel;\\r\\n\\t};\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tviewModel: {\\r\\n\\t\\t\\tcreateViewModel: createViewModel,\\r\\n\\t\\t},\\r\\n\\t};\\r\\n});\\r\\n\\n\",\n    \"define(\\r\\n    'viewmodels/BaseInstrumentSearchViewModel',\\r\\n    [\\r\\n        'require',\\r\\n        'knockout',\\r\\n        'handlers/general',\\r\\n        'helpers/KoComponentViewModel',\\r\\n        'initdatamanagers/InstrumentsManager',\\r\\n        'devicemanagers/ViewModelsManager',\\r\\n        'Dictionary'\\r\\n    ],\\r\\n    function BaseInstrumentSearchDef(require) {\\r\\n        var ko = require('knockout'),\\r\\n            general = require('handlers/general'),\\r\\n            koComponentViewModel = require('helpers/KoComponentViewModel'),\\r\\n            instrumentsManager = require('initdatamanagers/InstrumentsManager'),\\r\\n            viewModelsManager = require('devicemanagers/ViewModelsManager'),\\r\\n            vmQuotesPreset = viewModelsManager.VmQuotesPreset;\\r\\n\\r\\n        var BaseInstrumentSearchViewModel = general.extendClass(koComponentViewModel, function BaseInstrumentSearchClass() {\\r\\n            var self = this,\\r\\n                parent = this.parent, // inherited from KoComponentViewModel\\r\\n                data = this.Data, // inherited from KoComponentViewModel\\r\\n                defaultMinLenght = 2;\\r\\n\\r\\n            function init(settings) {\\r\\n                parent.init.call(self, settings);\\r\\n\\r\\n                setObservables();\\r\\n                setValues(settings);\\r\\n                setSubscribers();\\r\\n            }\\r\\n\\r\\n            function setObservables() {\\r\\n                data.list = vmQuotesPreset.SearchInstrumentsObservable;\\r\\n                data.searchMinLength = ko.observable(vmQuotesPreset.SingleCharSearch() ? 1 : defaultMinLenght);\\r\\n                data.selected = ko.observable({});\\r\\n                data.instrumentsList = ko.observableArray([]);\\r\\n                data.favouritePreset = ko.observable(false);\\r\\n            }\\r\\n\\r\\n            function setValues(settings) {\\r\\n                setDefaultInstruments();\\r\\n\\r\\n                data.selectedInstrumentId = settings.selectedInstrumentId;\\r\\n                data.suffixId = settings.suffixId;\\r\\n                data.searchPostBoxTopic = settings.searchPostBoxTopic;\\r\\n            }\\r\\n\\r\\n            function setSubscribers() {\\r\\n                self.subscribeTo(data.selected, onSelectedInstrumentChanged);\\r\\n\\r\\n                instrumentsManager.OnFavoritesPresetChanged.Add(setDefaultInstruments);\\r\\n            }\\r\\n\\r\\n            function onSelectedInstrumentChanged(instrument) {\\r\\n                if (!instrument || !instrument.id || instrument.id <= -1) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                if (general.isFunctionType(data.selectedInstrumentId)) {\\r\\n                    data.selectedInstrumentId(instrument.id);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            function setDefaultInstruments() {\\r\\n                var quotesUIorder,\\r\\n                    instruments = instrumentsManager.GetFavoriteInstruments();\\r\\n\\r\\n                if (instruments.length === 0) {\\r\\n                    instruments = instrumentsManager.GetMainMostPopularInstruments();\\r\\n                    quotesUIorder = instrumentsManager.GetPresetInstruments(instrumentsManager.GetMainMostPopularPresetId());\\r\\n                } else {\\r\\n                    quotesUIorder = instrumentsManager.GetCustomizedUiOrder();\\r\\n                    data.favouritePreset(true);\\r\\n                }\\r\\n                instrumentsManager.SetQuotesUIOrder(quotesUIorder, false, eRegistrationListName.Search);\\r\\n                data.instrumentsList(addPresetInfo(instruments));\\r\\n            }\\r\\n\\r\\n            function addPresetInfo(instruments) {\\r\\n                for (var idxInstrument = 0; idxInstrument < instruments.length; idxInstrument++) {\\r\\n                    var instrument = instruments[idxInstrument];\\r\\n                    var presets = instrumentsManager.GetPresetsForInstrument(instrument.id);\\r\\n\\r\\n                    var presetId;\\r\\n                    var presetFound = presets.some(function (id) {\\r\\n                        if (vmQuotesPreset.IsSearchPreset(id)) {\\r\\n                            presetId = parseInt(id);\\r\\n                            return true;\\r\\n                        }\\r\\n                    });\\r\\n\\r\\n                    presetId = presetFound ? presetId : instrument.presetId;\\r\\n                    instrument.presetLabel = vmQuotesPreset.GetPreset(presetId).Label;\\r\\n                }\\r\\n\\r\\n                return instruments;\\r\\n            }\\r\\n\\r\\n            function dispose() {\\r\\n                instrumentsManager.OnFavoritesPresetChanged.Remove(setDefaultInstruments);\\r\\n\\r\\n                parent.dispose.call(self); // inherited from KoComponentViewModel\\r\\n            }\\r\\n\\r\\n            return {\\r\\n                init: init,\\r\\n                dispose: dispose\\r\\n            };\\r\\n        });\\r\\n\\r\\n        return BaseInstrumentSearchViewModel;\\r\\n    }\\r\\n);\\r\\n\\n\",\n    \"define('deviceviewmodels/PresetInstrumentSearchViewModel',[\\r\\n\\t\\\"require\\\",\\r\\n\\t\\\"handlers/general\\\",\\r\\n\\t\\\"devicemanagers/ViewModelsManager\\\",\\r\\n\\t\\\"viewmodels/BaseInstrumentSearchViewModel\\\",\\r\\n], function PresetInstrumentSearchDef(require) {\\r\\n\\tvar general = require(\\\"handlers/general\\\"),\\r\\n\\t\\tviewModelsManager = require(\\\"devicemanagers/ViewModelsManager\\\"),\\r\\n\\t\\tbaseViewModel = require(\\\"viewmodels/BaseInstrumentSearchViewModel\\\");\\r\\n\\r\\n\\tvar PresetInstrumentSearchViewModel = general.extendClass(baseViewModel, function PresetInstrumentSearchClass() {\\r\\n\\t\\tvar self = this,\\r\\n\\t\\t\\tparent = this.parent, // inherited from KoComponentViewModel\\r\\n\\t\\t\\tdata = this.Data; // inherited from KoComponentViewModel\\r\\n\\r\\n\\t\\tfunction init(settings) {\\r\\n\\t\\t\\tparent.init.call(self, settings);\\r\\n\\r\\n\\t\\t\\tsetSubscribers();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setSubscribers() {\\r\\n\\t\\t\\tself.subscribeTo(data.selected, function onSelectedInstrumentChanged(instrument) {\\r\\n\\t\\t\\t\\tviewModelsManager.VmQuotesPreset.SelectPreset(instrument.presetId);\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tinit: init,\\r\\n\\t\\t};\\r\\n\\t});\\r\\n\\r\\n\\tvar createViewModel = function (params) {\\r\\n\\t\\tvar viewModel = new PresetInstrumentSearchViewModel();\\r\\n\\t\\tviewModel.init(params);\\r\\n\\r\\n\\t\\treturn viewModel;\\r\\n\\t};\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tviewModel: {\\r\\n\\t\\t\\tcreateViewModel: createViewModel,\\r\\n\\t\\t},\\r\\n\\t};\\r\\n});\\r\\n\\n\",\n    \"'use strict';\\r\\n\\r\\nvar TDALDemoAccount = function () {\\r\\n    var dataAjaxer = new TAjaxer();\\r\\n\\r\\n    var processDemoDeposit = function (onComplete) {\\r\\n        dataAjaxer.get(\\r\\n            \\\"TDALDemoAccount/processDemoDeposit\\\",\\r\\n\\t\\t\\t\\\"DemoAccount/ProcessDemoDeposit\\\",\\r\\n\\t\\t\\t\\\"\\\",\\r\\n\\t\\t\\tonComplete,\\r\\n            function (error) {\\r\\n                ErrorManager.onError(\\\"TDALDemoAccount/processDemoDeposit\\\", error.message, eErrorSeverity.low);\\r\\n            },\\r\\n            0, null, null, false\\r\\n       );\\r\\n    };\\r\\n\\r\\n    return {\\r\\n        processDemoDeposit: processDemoDeposit\\r\\n    }\\r\\n};\\ndefine(\\\"dataaccess/dalDemoAccount\\\", [\\\"handlers/Ajaxer\\\",\\\"JSONHelper\\\"], (function (global) {\\n    return function () {\\n        var ret, fn;\\n       fn = function (Ajaxer, jsonhelper) {\\r\\n\\t\\t\\t\\treturn this.TDALDemoAccount(jsonhelper);\\r\\n\\t\\t\\t};\\n        ret = fn.apply(global, arguments);\\n        return ret || global.TDALDemoAccount;\\n    };\\n}(this)));\\n\\n\",\n    \"define('handlers/AmountConverter',\\r\\n    [\\r\\n        'require',\\r\\n        'handlers/general'\\r\\n    ],\\r\\n    function (require) {\\r\\n        var general = require('handlers/general');\\r\\n\\r\\n        var AmountConverter = {\\r\\n            Convert: function (amount, inBetweenQuote, useMidRate) {\\r\\n                var bid, ask;\\r\\n\\r\\n                if (general.isNullOrUndefined(inBetweenQuote)) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                if (typeof inBetweenQuote.bid == 'function') {\\r\\n                    bid = inBetweenQuote.bid();\\r\\n\\r\\n                } else {\\r\\n                    bid = inBetweenQuote.bid;\\r\\n                }\\r\\n\\r\\n                if (typeof inBetweenQuote.ask == 'function') {\\r\\n                    ask = inBetweenQuote.ask();\\r\\n\\r\\n                } else {\\r\\n                    ask = inBetweenQuote.ask;\\r\\n                }\\r\\n\\r\\n                if (useMidRate === true) {\\r\\n                    ask = bid = Format.toMidRate(bid, ask);\\r\\n                }\\r\\n\\r\\n                if (inBetweenQuote.isOppositeInstrumentFound) {\\r\\n                    if (amount < 0) {\\r\\n                        return amount * inBetweenQuote.instrumentFactor / bid;\\r\\n                    } else {\\r\\n                        return amount * inBetweenQuote.instrumentFactor / ask;\\r\\n                    }\\r\\n                } else {\\r\\n                    if (amount < 0) {\\r\\n                        return amount * ask / inBetweenQuote.instrumentFactor;\\r\\n                    } else {\\r\\n                        return amount * bid / inBetweenQuote.instrumentFactor;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        };\\r\\n\\r\\n        return AmountConverter;\\r\\n    }\\r\\n);\\n\",\n    \"define(\\\"dataaccess/dalConversion\\\",\\r\\n    [\\r\\n        \\\"require\\\",\\r\\n        \\\"JSONHelper\\\",\\r\\n        'generalmanagers/ErrorManager'\\r\\n    ],\\r\\n    function (require) {\\r\\n        var baseUrl = \\\"api/conversion\\\",\\r\\n            jsonhelper = require(\\\"JSONHelper\\\"),\\r\\n            errorManager = require('generalmanagers/ErrorManager');\\r\\n\\r\\n        function getInBetweenQuote(fromSymbolId, toSymbolId) {\\r\\n            var ajaxer = new TAjaxer();\\r\\n\\r\\n            return ajaxer.promises\\r\\n                .get(\\\"dalConversion/getInBetweenQuote\\\",\\r\\n                    String.format(\\\"{0}/GetInBetweenQuote/{1}/{2}\\\", baseUrl, fromSymbolId, toSymbolId),\\r\\n                    \\\"\\\")\\r\\n                .then(function onResponse(responseText) {\\r\\n                    var response = jsonhelper.STR2JSON(\\\"getInBetweenQuote/onLoadComplete\\\", responseText);\\r\\n\\r\\n                    return response;\\r\\n                })\\r\\n                .fail(function onError(error) {\\r\\n                    errorManager.onError(\\\"dalConversion/getInBetweenQuote\\\", \\\"\\\", eErrorSeverity.medium);\\r\\n\\r\\n                    throw error;\\r\\n                });\\r\\n        }\\r\\n\\r\\n        function getConversionRateFormated(fromSymbolId, toSymbolId, fromSymbolName, toSymbolName) {\\r\\n            var ajaxer = new TAjaxer();\\r\\n\\r\\n            return ajaxer.promises\\r\\n                .get(\\\"dalConversion/getConversionRateFormated\\\",\\r\\n                    String.format(\\\"{0}/GetConversionRateFormated/{1}/{2}/{3}/{4}\\\", baseUrl, fromSymbolId, toSymbolId, fromSymbolName, toSymbolName),\\r\\n                    \\\"\\\")\\r\\n                .then(function onResponse(responseText) {\\r\\n                    var response = jsonhelper.STR2JSON(\\\"getConversionRateFormated/onLoadComplete\\\", responseText);\\r\\n\\r\\n                    return response;\\r\\n                })\\r\\n                .fail(function onError(error) {\\r\\n                    errorManager.onError(\\\"dalConversion/getConversionRateFormated\\\", \\\"\\\", eErrorSeverity.medium);\\r\\n\\r\\n                    throw error;\\r\\n                });\\r\\n        }\\r\\n\\r\\n        return {\\r\\n            getInBetweenQuote: getInBetweenQuote,\\r\\n            getConversionRateFormated: getConversionRateFormated\\r\\n        };\\r\\n    }\\r\\n);\\n\",\n    \"define(\\r\\n    'modules/BuilderForInBetweenQuote',\\r\\n    [\\r\\n        'require',\\r\\n        'knockout',\\r\\n        'Q',\\r\\n        'handlers/general',\\r\\n        'initdatamanagers/InstrumentsManager',\\r\\n        'generalmanagers/RegistrationManager',\\r\\n        'cachemanagers/QuotesManager',\\r\\n        'dataaccess/dalConversion'\\r\\n    ],\\r\\n    function BuilderForInBetweenQuote(require) {\\r\\n        var ko = require('knockout'),\\r\\n            Q = require('Q'),\\r\\n            general = require('handlers/general'),\\r\\n            InstrumentsManager = require('initdatamanagers/InstrumentsManager'),\\r\\n            RegistrationManager = require('generalmanagers/RegistrationManager'),\\r\\n            QuotesManager = require('cachemanagers/QuotesManager'),\\r\\n            dalConversion = require('dataaccess/dalConversion');\\r\\n\\r\\n        function getInBetweenQuote(fromSymbolId, toSymbolId) {\\r\\n            if (fromSymbolId == toSymbolId) {\\r\\n                return Q({\\r\\n                    ask: ko.observable(1),\\r\\n                    bid: ko.observable(1),\\r\\n                    instrumentFactor: 1,\\r\\n                    isOppositeInstrumentFound: false\\r\\n                });\\r\\n            }\\r\\n\\r\\n            var instrumentProp = InstrumentsManager.GetInstrumentPropUsedForConversion(fromSymbolId, toSymbolId);\\r\\n\\r\\n            if (!general.isNullOrUndefined(instrumentProp)) {\\r\\n                return registerInstrument(instrumentProp.id)\\r\\n                    .then(function (quote) {\\r\\n                        return {\\r\\n                            ask: quote.ask,\\r\\n                            bid: quote.bid,\\r\\n                            instrumentFactor: instrumentProp.factor,\\r\\n                            isOppositeInstrumentFound: instrumentProp.isOppositeInstrumentFound\\r\\n                        };\\r\\n                    });\\r\\n            }\\r\\n            else {\\r\\n                return dalConversion\\r\\n                    .getInBetweenQuote(fromSymbolId, toSymbolId)\\r\\n                    .then(function (response) {\\r\\n                        var result = response.result;\\r\\n                        var inBetweenQuote = null;\\r\\n\\r\\n                        if (result) {\\r\\n                            inBetweenQuote = {\\r\\n                                ask: ko.observable(result.ask),\\r\\n                                bid: ko.observable(result.bid),\\r\\n                                instrumentFactor: result.instrumentFactor,\\r\\n                                isOppositeInstrumentFound: result.isOppositeInstrumentFound\\r\\n                            };\\r\\n                        }\\r\\n\\r\\n                        return inBetweenQuote;\\r\\n                    });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        function registerInstrument(instrumentId) {\\r\\n            var defer = Q.defer(),\\r\\n                quote = {\\r\\n                    ask: ko.observable(),\\r\\n                    bid: ko.observable()\\r\\n                };\\r\\n\\r\\n            var updateQuote = function () {\\r\\n                var quoteForInstrument = QuotesManager.Quotes.GetItem(instrumentId);\\r\\n\\r\\n                if (quoteForInstrument) {\\r\\n                    quote.bid(quoteForInstrument.bid);\\r\\n                    quote.ask(quoteForInstrument.ask);\\r\\n\\r\\n                    defer.resolve(quote);\\r\\n\\r\\n                    return true;\\r\\n                }\\r\\n\\r\\n                return false;\\r\\n            };\\r\\n\\r\\n            QuotesManager.OnChange.Add(updateQuote);\\r\\n\\r\\n            if (updateQuote() === false) {\\r\\n                RegistrationManager.Update(eRegistrationListName.InBetweenQuote, instrumentId);\\r\\n            }\\r\\n\\r\\n            return defer.promise;\\r\\n        }\\r\\n\\r\\n        return {\\r\\n            GetInBetweenQuote: getInBetweenQuote\\r\\n        };\\r\\n    }\\r\\n);\\r\\n\\n\",\n    \"define('viewmodels/demoDeposit/demo-deposit-icon',[\\r\\n\\t\\\"require\\\",\\r\\n\\t\\\"knockout\\\",\\r\\n\\t\\\"handlers/general\\\",\\r\\n\\t\\\"helpers/KoComponentViewModel\\\",\\r\\n\\t\\\"initdatamanagers/Customer\\\",\\r\\n\\t\\\"managers/CustomerProfileManager\\\",\\r\\n\\t\\\"dataaccess/dalDemoAccount\\\",\\r\\n\\t\\\"dataaccess/dalCommon\\\",\\r\\n\\t\\\"handlers/AmountConverter\\\",\\r\\n\\t\\\"Dictionary\\\",\\r\\n\\t\\\"modules/BuilderForInBetweenQuote\\\",\\r\\n\\t\\\"modules/systeminfo\\\",\\r\\n\\t\\\"JSONHelper\\\",\\r\\n], function (require) {\\r\\n\\tvar ko = require(\\\"knockout\\\"),\\r\\n\\t\\tKoComponentViewModel = require(\\\"helpers/KoComponentViewModel\\\"),\\r\\n\\t\\tgeneral = require(\\\"handlers/general\\\"),\\r\\n\\t\\tCustomer = require(\\\"initdatamanagers/Customer\\\"),\\r\\n\\t\\tCustomerProfileManager = require(\\\"managers/CustomerProfileManager\\\"),\\r\\n\\t\\tdalDemoAccount = require(\\\"dataaccess/dalDemoAccount\\\"),\\r\\n\\t\\tAmountConverter = require(\\\"handlers/AmountConverter\\\"),\\r\\n\\t\\tDictionary = require(\\\"Dictionary\\\"),\\r\\n\\t\\tBuilderForInBetweenQuote = require(\\\"modules/BuilderForInBetweenQuote\\\"),\\r\\n\\t\\tJSONHelper = require(\\\"JSONHelper\\\"),\\r\\n\\t\\tsystemInfo = require(\\\"modules/systeminfo\\\");\\r\\n\\r\\n\\tvar DemoDepositIconViewModel = general.extendClass(KoComponentViewModel, function DemoDepositIconViewModelClass(\\r\\n\\t\\t_params\\r\\n\\t) {\\r\\n\\t\\tvar self = this,\\r\\n\\t\\t\\tparent = this.parent,\\r\\n\\t\\t\\tparams = _params,\\r\\n\\t\\t\\tobs = {\\r\\n\\t\\t\\t\\tquoteForUSDCcyToSelectedAccuntCcy: ko.observable(\\\"\\\"),\\r\\n\\t\\t\\t\\tisProcessing: ko.observable(false),\\r\\n\\t\\t\\t\\tshouldWaitForInBetweenQuote: ko.observable(false),\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\tvar usdCcy = 47,\\r\\n\\t\\t\\tfirstAmoutToDeposit;\\r\\n\\r\\n\\t\\tvar amoutToDeposit = self\\r\\n\\t\\t\\t.createComputed(function () {\\r\\n\\t\\t\\t\\tif (general.isNullOrUndefined(firstAmoutToDeposit) && obs.quoteForUSDCcyToSelectedAccuntCcy() != \\\"\\\") {\\r\\n\\t\\t\\t\\t\\tfirstAmoutToDeposit = AmountConverter.Convert(\\r\\n\\t\\t\\t\\t\\t\\tCustomerProfileManager.ProfileCustomer().demoDepositAmount,\\r\\n\\t\\t\\t\\t\\t\\tobs.quoteForUSDCcyToSelectedAccuntCcy()\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn firstAmoutToDeposit;\\r\\n\\t\\t\\t})\\r\\n\\t\\t\\t.extend({ deferred: true });\\r\\n\\r\\n\\t\\tvar getFormattedMessage = function (key) {\\r\\n\\t\\t\\treturn String.format(\\r\\n\\t\\t\\t\\tDictionary.GetItem(key),\\r\\n\\t\\t\\t\\tFormat.toNumberWithCurrency(amoutToDeposit(), { currencyId: Customer.prop.selectedCcyId() })\\r\\n\\t\\t\\t);\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tvar tooltipMessage = self.createComputed(function () {\\r\\n\\t\\t\\treturn getFormattedMessage(\\\"demoDepositToolTip\\\");\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\tvar isCustomerDemo = Customer.prop.isDemo;\\r\\n\\r\\n\\t\\tvar isAlreadyDisplayed = false,\\r\\n\\t\\t\\twasDepositMade = false,\\r\\n\\t\\t\\tisInBetweenQuoteChanging = false,\\r\\n\\t\\t\\twaitForInBetweenQuoteInterval;\\r\\n\\r\\n\\t\\tvar getMaxAmount = function () {\\r\\n\\t\\t\\tif (isInBetweenQuoteChanging === true) {\\r\\n\\t\\t\\t\\tobs.shouldWaitForInBetweenQuote(true);\\r\\n\\t\\t\\t\\twaitForInBetweenQuoteInterval = setInterval(waitForInBetweenQuote, 500);\\r\\n\\r\\n\\t\\t\\t\\treturn 0;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn AmountConverter.Convert(\\r\\n\\t\\t\\t\\tsystemInfo.get(\\\"config\\\").MaxEquityForDemoDepositInUsd,\\r\\n\\t\\t\\t\\tobs.quoteForUSDCcyToSelectedAccuntCcy.peek()\\r\\n\\t\\t\\t);\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tvar waitForInBetweenQuote = function () {\\r\\n\\t\\t\\tif (!isInBetweenQuoteChanging) {\\r\\n\\t\\t\\t\\tif (waitForInBetweenQuoteInterval) clearInterval(waitForInBetweenQuoteInterval);\\r\\n\\t\\t\\t\\tobs.shouldWaitForInBetweenQuote(false);\\r\\n\\t\\t\\t}\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tvar getEquity = function () {\\r\\n\\t\\t\\treturn Number.fromStr(params.equity());\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tvar isEligableToDemoDeposit = self\\r\\n\\t\\t\\t.createComputed(function () {\\r\\n\\t\\t\\t\\tif (wasDepositMade === true) {\\r\\n\\t\\t\\t\\t\\treturn false;\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif (isAlreadyDisplayed === true && !obs.isProcessing()) {\\r\\n\\t\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif (!isCustomerDemo || obs.isProcessing()) {\\r\\n\\t\\t\\t\\t\\treturn false;\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif (obs.shouldWaitForInBetweenQuote() === true) {\\r\\n\\t\\t\\t\\t\\treturn false;\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tisAlreadyDisplayed = getEquity() < getMaxAmount();\\r\\n\\r\\n\\t\\t\\t\\treturn isAlreadyDisplayed;\\r\\n\\t\\t\\t})\\r\\n\\t\\t\\t.extend({ deferred: true });\\r\\n\\r\\n\\t\\tvar onComplete = function (response) {\\r\\n\\t\\t\\tvar result = JSONHelper.STR2JSON(\\\"demo-deposit-icon:onComplete\\\", response);\\r\\n\\t\\t\\tif (result.isSuccessful === true) {\\r\\n\\t\\t\\t\\twasDepositMade = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tobs.isProcessing(false);\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tvar onClick = function () {\\r\\n\\t\\t\\tobs.isProcessing(true);\\r\\n\\t\\t\\tdalDemoAccount.processDemoDeposit(onComplete);\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tvar saveInBetweenQuote = function (response) {\\r\\n\\t\\t\\tif (response) {\\r\\n\\t\\t\\t\\tobs.quoteForUSDCcyToSelectedAccuntCcy(response);\\r\\n\\t\\t\\t\\tisInBetweenQuoteChanging = false;\\r\\n\\t\\t\\t}\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tvar setInBetweenQuote = function () {\\r\\n\\t\\t\\tisInBetweenQuoteChanging = true;\\r\\n\\r\\n\\t\\t\\tBuilderForInBetweenQuote.GetInBetweenQuote(usdCcy, Customer.prop.selectedCcyId())\\r\\n\\t\\t\\t\\t.then(saveInBetweenQuote)\\r\\n\\t\\t\\t\\t.done();\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tvar setSubscribers = function () {\\r\\n\\t\\t\\tself.subscribeTo(Customer.prop.selectedCcyId, function () {\\r\\n\\t\\t\\t\\tsetInBetweenQuote();\\r\\n\\t\\t\\t});\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tvar dispose = function () {\\r\\n\\t\\t\\tparent.dispose.call(self);\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tvar init = function (settings) {\\r\\n\\t\\t\\tparent.init.call(self, settings);\\r\\n\\t\\t\\tsetInBetweenQuote();\\r\\n\\t\\t\\tsetSubscribers();\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tinit: init,\\r\\n\\t\\t\\tdispose: dispose,\\r\\n\\t\\t\\ttooltipMessage: tooltipMessage,\\r\\n\\t\\t\\tisCustomerDemo: isCustomerDemo,\\r\\n\\t\\t\\tisEligableToDemoDeposit: isEligableToDemoDeposit,\\r\\n\\t\\t\\tonClick: onClick,\\r\\n\\t\\t\\tobs: obs,\\r\\n\\t\\t};\\r\\n\\t});\\r\\n\\r\\n\\tvar createViewModel = function (_params) {\\r\\n\\t\\tvar params = _params || {};\\r\\n\\r\\n\\t\\tvar viewModel = new DemoDepositIconViewModel(params);\\r\\n\\t\\tviewModel.init();\\r\\n\\r\\n\\t\\treturn viewModel;\\r\\n\\t};\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tcreateViewModel: createViewModel,\\r\\n\\t};\\r\\n});\\r\\n\\n\",\n    \"define(\\\"devicealerts/MinEquityAlert\\\", [\\\"require\\\", 'handlers/general', \\\"Dictionary\\\", \\\"cachemanagers/PortfolioStaticManager\\\",\\\"initdatamanagers/Customer\\\"], function (require) {\\r\\n    var Dictionary = require(\\\"Dictionary\\\"),\\r\\n        general = require('handlers/general'),\\r\\n        portfolioManager = require(\\\"cachemanagers/PortfolioStaticManager\\\"),\\r\\n        customer = require(\\\"initdatamanagers/Customer\\\");\\r\\n\\r\\n    var MinEquityAlert = (function () {\\r\\n        var hasPendingWithdrawals = function() {\\r\\n            return portfolioManager.Portfolio.pendingWithdrawals.sign() > 0;\\r\\n        };\\r\\n\\r\\n        var show = function(result, instrumentCcyPair) {\\r\\n            var properties = getContentPieces(result, instrumentCcyPair);\\r\\n\\r\\n            AlertsManager.UpdateAlert(AlertTypes.MinEquityAlert, '', '', '', properties, true);\\r\\n            AlertsManager.PopAlert(AlertTypes.MinEquityAlert);\\r\\n        };\\r\\n\\r\\n        var getAlertContent = function (result, instrumentCcyPair, ignorePendingWithdrawals) {\\r\\n            var msgKeys = ['alertText', 'infoMaxSizeText', 'infoFundText'],\\r\\n                messages = '',\\r\\n                alertMsgs = getContentPieces(result, instrumentCcyPair, ignorePendingWithdrawals),\\r\\n                isMessageAvailable = function (key) {\\r\\n                    return alertMsgs && alertMsgs.hasOwnProperty(key) && alertMsgs[key] && alertMsgs[key].length;\\r\\n                };\\r\\n            for (var i = 0; i < msgKeys.length; i++) {\\r\\n                messages += isMessageAvailable(msgKeys[i]) ? alertMsgs[msgKeys[i]] + '\\\\n' : '';\\r\\n            }\\r\\n            return messages;\\r\\n        };\\r\\n\\r\\n        var isDealMaxSizeApplicable = function(instrumentCcyPair, amountToDeposit) {\\r\\n            return !general.isEmptyValue(instrumentCcyPair) && amountToDeposit > 0;\\r\\n        };\\r\\n\\r\\n        var getContentPieces = function(result, instrumentCcyPair, ignorePendingWithdrawals) {\\r\\n            var alertContentKey, infoMaxSizeContentKey, infoFundContentKey, infoFundWithdrawalContentKey, maxAllowedAmount, amountToDeposit;\\r\\n\\r\\n            alertContentKey = 'MarginTipAlertContent';\\r\\n            infoMaxSizeContentKey = 'MarginTipInfoContent_MaxSize';\\r\\n            infoFundContentKey = 'MarginTipInfoContent_Fund';\\r\\n            infoFundWithdrawalContentKey = 'MarginTipInfoContent_Fund_Withdrawal';\\r\\n            maxAllowedAmount = result.maxAllowedAmount;\\r\\n            amountToDeposit = result.amountToDeposit;\\r\\n\\r\\n            var alertContent = Dictionary.GetItem(alertContentKey),\\r\\n                infoMaxSizeContent = Dictionary.GetItem(infoMaxSizeContentKey),\\r\\n                infoFundContent = Dictionary.GetItem(hasPendingWithdrawals() && !ignorePendingWithdrawals ? infoFundWithdrawalContentKey : infoFundContentKey),\\r\\n                infoMaxSizeText = null;\\r\\n\\r\\n            if (isDealMaxSizeApplicable(instrumentCcyPair, maxAllowedAmount)) {\\r\\n                infoMaxSizeText = String.format(infoMaxSizeContent, maxAllowedAmount, instrumentCcyPair);\\r\\n            }\\r\\n\\r\\n            return {\\r\\n                alertText: alertContent,\\r\\n                infoMaxSizeText: infoMaxSizeText,\\r\\n                infoFundText: String.format(infoFundContent, \\\"\\\", \\\"\\\", amountToDeposit, customer.prop.defaultCcy())\\r\\n            };\\r\\n        };\\r\\n\\r\\n        return {\\r\\n            Show: show,\\r\\n            GetAlertContent: getAlertContent\\r\\n        };\\r\\n    })();\\r\\n    return MinEquityAlert;\\r\\n});\\n\",\n    \"\\n\",\n    \"define(\\r\\n    'deviceviewmodels/BaseOrder',\\r\\n    [\\r\\n        'require',\\r\\n        'knockout',\\r\\n        'handlers/general',\\r\\n        'Dictionary',\\r\\n        'initdatamanagers/Customer',\\r\\n        'cachemanagers/QuotesManager',\\r\\n        'devicemanagers/StatesManager',\\r\\n        'initdatamanagers/InstrumentsManager',\\r\\n        'managers/instrumentTranslationsManager',\\r\\n        'managers/viewsmanager',\\r\\n        \\\"devicealerts/MinEquityAlert\\\",\\r\\n        'viewmodels/dialogs/DialogViewModel',\\r\\n        'StateObject!TradingEnabled'\\r\\n    ],\\r\\n    function BaseOrderDef(require) {\\r\\n        var ko = require('knockout'),\\r\\n            general = require('handlers/general'),\\r\\n            Dictionary = require('Dictionary'),\\r\\n            Customer = require('initdatamanagers/Customer'),\\r\\n            QuotesManager = require('cachemanagers/QuotesManager'),\\r\\n            StatesManager = require('devicemanagers/StatesManager'),\\r\\n            InstrumentsManager = require('initdatamanagers/InstrumentsManager'),\\r\\n            InstrumentTranslationsManager = require('managers/instrumentTranslationsManager'),\\r\\n            ViewsManager = require('managers/viewsmanager'),\\r\\n            MinEquityAlert = require(\\\"devicealerts/MinEquityAlert\\\"),\\r\\n            DialogViewModel = require('viewmodels/dialogs/DialogViewModel'),\\r\\n            stateTradingEnabled = require('StateObject!TradingEnabled');\\r\\n\\r\\n        function BaseOrder() {\\r\\n            var settings = {},\\r\\n                _observableObject,\\r\\n                viewProperties = {};\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function init(customSettings, observableObject) {\\r\\n                _observableObject = observableObject;\\r\\n\\r\\n                setViewProperties();\\r\\n                setSettings(customSettings);\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function setViewProperties() {\\r\\n                viewProperties.InactiveInstrumentAlert = inactiveInstrumentAlert;\\r\\n                viewProperties.popUpAmlAlert = openAmlStatusAlert;\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function openAmlStatusAlert() {\\r\\n                closeDialog();\\r\\n\\r\\n                setTimeout(function () {\\r\\n                    DialogViewModel.openAsync(\\r\\n                        eAppEvents.amlStatusLoadedEvent,\\r\\n                        eDialog.AmlStatus,\\r\\n                        {\\r\\n                            title: Dictionary.GetItem('AMLStatus', 'dialogsTitles', ''),\\r\\n                            closeOnEscape: false,\\r\\n                            dialogClass: 'fx-dialog amlPopup',\\r\\n                            width: 620\\r\\n                        },\\r\\n                        eViewTypes.vAmlStatus,\\r\\n                        null\\r\\n                    );\\r\\n                });\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function openClientQuestionnaire() {\\r\\n                var viewArgs = {};\\r\\n                var dealModel = ko.toJS(_observableObject);\\r\\n\\r\\n                if (dealModel) {\\r\\n                    viewArgs.instrumentId = dealModel.selectedInstrument;\\r\\n                    viewArgs.tab = dealModel.initialToolTab;\\r\\n\\r\\n                    viewArgs.transactionType = dealModel.PageName && dealModel.PageName === eDealPage.NewLimitViewModel\\r\\n                        ? eTransactionSwitcher.NewLimit\\r\\n                        : eTransactionSwitcher.NewDeal;\\r\\n\\r\\n                    viewArgs.orderDir = dealModel.orderDir;\\r\\n                    viewArgs.showTools = dealModel.showTools;\\r\\n                    viewArgs.selectedDealAmount = dealModel.selectedDealAmount;\\r\\n\\r\\n                    ViewsManager.RedirectToForm(eForms.ClientQuestionnaire, {\\r\\n                        from: {\\r\\n                            form: ViewsManager.ActiveFormType(),\\r\\n                            viewArgs: viewArgs\\r\\n                        }\\r\\n                    });\\r\\n                }\\r\\n                else {\\r\\n                    ViewsManager.RedirectToForm(eForms.ClientQuestionnaire, {});\\r\\n                }\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function inactiveInstrumentAlert(instrumentId) {\\r\\n                var instrument = InstrumentsManager.GetInstrument(instrumentId),\\r\\n                    body;\\r\\n\\r\\n                if (instrument) {\\r\\n                    body = String.format(\\\"{0} - \\\" + Dictionary.GetItem(\\\"InstrumentInactive\\\"), instrument.ccyPair);\\r\\n                    AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, body, '');\\r\\n                    AlertsManager.PopAlert(AlertTypes.ServerResponseAlert);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function checkTradingAgreement(instrument) {\\r\\n                if (instrument) {\\r\\n                    if (instrument.isFuture == true) {\\r\\n                        if (Customer.prop.futureStatus == eTradingPermissions.Required) {\\r\\n                            return eTradingAgreement.Needed;\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                return eTradingAgreement.NotNeeded;\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function showAlert(alert, title, messages, properties) {\\r\\n                AlertsManager.UpdateAlert(alert, title, '', messages, properties);\\r\\n                AlertsManager.PopAlert(alert);\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function showServerAlert(alert, serverResults, properties) {\\r\\n                properties = general.extendType(properties, { serverResponses: serverResults });\\r\\n                AlertsManager.UpdateAlert(alert, '', '', [], properties);\\r\\n                AlertsManager.PopAlert(alert);\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function showMessageResult(results, callerId, instrument, prop) {\\r\\n                var title = !general.isEmptyValue(callerId) ? Dictionary.GetItem(callerId, 'dialogsTitles', ' ') : null,\\r\\n                    messages = [],\\r\\n                    i = 0,\\r\\n                    properties = prop || {},\\r\\n                    alert = AlertTypes.ServerResponseAlert,\\r\\n                    isTradingEnabled = stateTradingEnabled.containsKey('TradingEnabled')\\r\\n                        ? stateTradingEnabled.get('TradingEnabled')\\r\\n                        : false;\\r\\n\\r\\n                general.extendType(prop, { callerId: callerId, instrument: instrument });\\r\\n\\r\\n                for (var j = 0, jj = results.length; j < jj; j++) {\\r\\n                    switch (results[j].msgKey) {\\r\\n                        case \\\"SuccessPriceAlertAdd\\\":\\r\\n                        case \\\"OrderError20\\\":\\r\\n                        case \\\"OrderError22\\\":\\r\\n                            showServerAlert(AlertTypes.PriceAlertServerResponseAlert, results, prop);\\r\\n                            return;\\r\\n\\r\\n                        case \\\"SuccessLimitAdd\\\":\\r\\n                        case \\\"SuccessLimitEdit\\\":\\r\\n                        case \\\"SuccessLimitDelete\\\":\\r\\n                            showServerAlert(AlertTypes.LimitsServerResponseAlert, results, prop);\\r\\n\\r\\n                            return;\\r\\n                        case \\\"SuccessPriceAlertDelete\\\":\\r\\n                        case \\\"OrderError23\\\":\\r\\n                            showServerAlert(AlertTypes.PriceAlertClosedServerResponseAlert, results, prop);\\r\\n                            return;\\r\\n\\r\\n                        case \\\"SuccessDealAdd\\\":\\r\\n                            showServerAlert(AlertTypes.DealAddServerResponseAlert, results, prop);\\r\\n                            return;\\r\\n\\r\\n                        case \\\"SuccessDealClose\\\":\\r\\n                            ko.postbox.publish('trading-event', 'close-deal-success');\\r\\n                            showServerAlert(AlertTypes.DealsClosedServerResponseAlert, results, prop);\\r\\n                            return;\\r\\n\\r\\n                        case \\\"OrderError2\\\":\\r\\n                        case \\\"OrderError3\\\":\\r\\n                        case \\\"OrderError12\\\":\\r\\n                            messages[i++] = String.format(\\\"{0} \\\\n\\\", Dictionary.GetItem(results[j].msgKey));\\r\\n\\r\\n                            if (isTradingEnabled) {\\r\\n                                alert = AlertTypes.TradingConfirmationRetryAlert;\\r\\n                            }\\r\\n                            break;\\r\\n\\r\\n                        case \\\"OrderError13\\\":\\r\\n                            if (isTradingEnabled) {\\r\\n                                alert = AlertTypes.TradingConfirmationRetryAlert;\\r\\n                                messages[i++] = MinEquityAlert.GetAlertContent(results[j], instrument ? InstrumentTranslationsManager.Long(instrument.id) : null, true);\\r\\n                            }\\r\\n                            else {\\r\\n                                MinEquityAlert.Show(results[j], instrument ? InstrumentTranslationsManager.Long(instrument.id) : null, false);\\r\\n                                return;\\r\\n                            }\\r\\n                            break;\\r\\n\\r\\n                        // OrderError105 - Please deposit money first  \\r\\n                        case \\\"OrderError105\\\":\\r\\n                            AlertsManager.PopAlert(PostPortfoliosLoginsAlerts.IsActive);\\r\\n                            return;\\r\\n\\r\\n                        //121- cdd compliance issue  \\r\\n                        case \\\"OrderError121\\\":\\r\\n                            openClientQuestionnaire();\\r\\n                            return;\\r\\n\\r\\n                        // OrderError107 - AML Statuses \\r\\n                        case \\\"OrderError107\\\": // cdd or aml compliance issue\\r\\n                        case \\\"OrderError115\\\":\\r\\n                            openAmlStatusAlert();\\r\\n                            return;\\r\\n\\r\\n                        // 106 - kyc compliance issue\\r\\n                        case \\\"OrderError106\\\":\\r\\n                            // show 'Failed aware' alert\\r\\n                            if (StatesManager.States.KycStatus() === eKYCStatus.Failed && StatesManager.States.KycReviewStatus() === eKYCReviewStatus.Appropriate) {\\r\\n                                alert = AlertTypes.ClientQuestionnaire;\\r\\n                                var questionnaireAlertManager = AlertsManager.GetAlert(AlertTypes.ClientQuestionnaire);\\r\\n                                questionnaireAlertManager.popAlert().done();\\r\\n                            }\\r\\n                            else {\\r\\n                                openClientQuestionnaire();\\r\\n                            }\\r\\n                            return;\\r\\n\\r\\n                        case \\\"OrderError116\\\": // instrument max exposure exceed\\r\\n                        case \\\"OrderError120\\\":\\r\\n                            var instrumentId = results[j].arguments.pop(),\\r\\n                                translatedInstrument = InstrumentTranslationsManager.Long(instrumentId);\\r\\n\\r\\n                            if (translatedInstrument) {\\r\\n                                results[j].arguments[0] = translatedInstrument;\\r\\n                            }\\r\\n\\r\\n                            messages[i++] = translateResult(results[j]);\\r\\n                            properties = {};\\r\\n                            break;\\r\\n\\r\\n                        case \\\"SuccessCancelPendingWithdrawal\\\":\\r\\n                        case \\\"CancelProcessWithdrawal\\\":\\r\\n                            messages[i++] = String.format(Dictionary.GetItem(results[j].msgKey), results[j].itemId, results[j].amount, results[j].ccy);\\r\\n                            title = Dictionary.GetItem('CancelProcessWithdrawalTitle');\\r\\n                            break;\\r\\n\\r\\n                        case \\\"FaildCancelPendingWithdrawal\\\":\\r\\n                            messages[i++] = Dictionary.GetItem(results[j].msgKey);\\r\\n                            break;\\r\\n\\r\\n                        default:\\r\\n                            if (eOrderActionType[callerId] === eOrderActionType.CloseDeal &&\\r\\n                                results[j].msgKey !== \\\"ServerError\\\" &&\\r\\n                                results[j].status !== \\\"ServerError\\\") {\\r\\n\\r\\n                                showServerAlert(AlertTypes.DealsClosedServerResponseAlert, results, prop);\\r\\n\\r\\n                                return;\\r\\n                            }\\r\\n\\r\\n                            if (isTradingEnabled) {\\r\\n                                switch (results[j].msgKey) {\\r\\n                                    case 'OrderError103':\\r\\n                                    case 'OrderError9':\\r\\n                                        alert = AlertTypes.TradingConfirmationRetryAlert;\\r\\n                                        messages[i++] = String.format(\\\"{0} \\\\n\\\", Dictionary.GetItem(results[j].msgKey));\\r\\n                                        break;\\r\\n\\r\\n                                    default:\\r\\n                                        messages[i++] = String.format(\\\"{0} \\\\n\\\", translateResult(results[j]));\\r\\n                                        properties = {};\\r\\n                                        title = Dictionary.GetItem('GenericAlert', 'dialogsTitles', ' ');\\r\\n                                        break;\\r\\n                                }\\r\\n                            }\\r\\n                            else {\\r\\n                                messages[i++] = String.format(\\\"{0} \\\\n\\\", translateResult(results[j]));\\r\\n                                properties = {};\\r\\n                                title = Dictionary.GetItem('GenericAlert', 'dialogsTitles', ' ');\\r\\n                            }\\r\\n                            break;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                showAlert(alert, title, messages, properties);\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function validateOnlineTradingUser() {\\r\\n                if (StatesManager.States.fxDenied() === true) {\\r\\n\\r\\n                    if (Customer.prop.isDemo === true) {\\r\\n                        AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, Dictionary.GetItem(\\\"DemoExpiredMessage\\\"), '');\\r\\n                    }\\r\\n                    else {\\r\\n                        AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, Dictionary.GetItem(\\\"OrderError102\\\"), '');\\r\\n                    }\\r\\n\\r\\n                    if (StatesManager.States.ExposureCoverageAlert() == 1) {\\r\\n                        AlertsManager.GetAlert(PostClientStatesLoginsAlerts.ExposureCoverageAlert);\\r\\n                        AlertsManager.UpdateAlert(PostClientStatesLoginsAlerts.ExposureCoverageAlert);\\r\\n                    }\\r\\n\\r\\n                    if (Customer.prop.isPending === true || Customer.prop.isLive) {\\r\\n                        AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, Dictionary.GetItem(\\\"OrderError102\\\"), '');\\r\\n                    }\\r\\n\\r\\n                    if (StatesManager.States.FolderTypeId() === parseInt(eFolderType.TradingBonus)) {\\r\\n                        AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, Dictionary.GetItem(\\\"TradingBonusMessage\\\"), '');\\r\\n                    }\\r\\n\\r\\n                    if (StatesManager.States.isIntDebit() === true) {\\r\\n                        AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, Dictionary.GetItem(\\\"OnlineTradingDisabled\\\"), '');\\r\\n                    }\\r\\n\\r\\n                    AlertsManager.PopAlert(AlertTypes.ServerResponseAlert);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function translateResult(result) {\\r\\n                var msg = Dictionary.GetItem(result.msgKey || \\\"InternalError\\\"),\\r\\n                    args = result.arguments;\\r\\n\\r\\n                if (general.isNullOrUndefined(args)) {\\r\\n                    return msg;\\r\\n                }\\r\\n\\r\\n                return String.format(msg, args);\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function limitValidateQuote(instrumentId) {\\r\\n                var instrument = InstrumentsManager.GetInstrument(instrumentId);\\r\\n                var alertBody;\\r\\n                var quote = QuotesManager.Quotes.GetItem(instrumentId);\\r\\n                var brokerAllowLimitsOnNoRates = Customer.prop.brokerAllowLimitsOnNoRates;\\r\\n\\r\\n                if (!brokerAllowLimitsOnNoRates && quote && !quote.isActive()) {\\r\\n                    alertBody = String.format(\\\"{0} - \\\" + Dictionary.GetItem(\\\"InstrumentInactive\\\"), instrument.ccyPair);\\r\\n\\r\\n                    AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, alertBody, '');\\r\\n                    AlertsManager.PopAlert(AlertTypes.ServerResponseAlert);\\r\\n\\r\\n                    return false;\\r\\n                }\\r\\n\\r\\n                return true;\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function limitValidate(instrumentId, nestedValidation) {\\r\\n                if (StatesManager.States.fxDenied() == true) {\\r\\n                    validateOnlineTradingUser();\\r\\n\\r\\n                    return false;\\r\\n                }\\r\\n\\r\\n                return limitValidateWithoutTradingStatus(instrumentId, nestedValidation);\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function limitValidateWithoutTradingStatus(instrumentId, nestedValidation) {\\r\\n                var instrument = InstrumentsManager.GetInstrument(instrumentId);\\r\\n                var res = checkTradingAgreement(instrument);\\r\\n                var alertBody;\\r\\n\\r\\n                if (res != eTradingAgreement.NotNeeded) {\\r\\n                    alertBody = String.format(Dictionary.GetItem(\\\"rcFuturesRedirect\\\"), instrument.ccyPair);\\r\\n\\r\\n                    AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, alertBody, '');\\r\\n                    AlertsManager.PopAlert(AlertTypes.ServerResponseAlert);\\r\\n\\r\\n                    return false;\\r\\n                }\\r\\n\\r\\n                //-------------------------------------------\\r\\n\\r\\n                if (_observableObject.orderDir() == eOrderDir.None) {\\r\\n                    alertBody = Dictionary.GetItem(\\\"limitOrderDirEmpty\\\");\\r\\n\\r\\n                    AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, alertBody, '');\\r\\n                    AlertsManager.PopAlert(AlertTypes.ServerResponseAlert);\\r\\n\\r\\n                    return false;\\r\\n                }\\r\\n\\r\\n                //-------------------------------------------\\r\\n\\r\\n                if (!_observableObject.openLimit()) {\\r\\n                    alertBody = Dictionary.GetItem(\\\"limitLevelEmpty\\\");\\r\\n\\r\\n                    AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, alertBody, '');\\r\\n                    AlertsManager.PopAlert(AlertTypes.ServerResponseAlert);\\r\\n\\r\\n                    return false;\\r\\n                }\\r\\n\\r\\n                //-------------------------------------------\\r\\n\\r\\n                if (!general.isNumber(_observableObject.openLimit())) {\\r\\n                    alertBody = Dictionary.GetItem(\\\"limitLevelInvalid\\\");\\r\\n\\r\\n                    AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, alertBody, '');\\r\\n                    AlertsManager.PopAlert(AlertTypes.ServerResponseAlert);\\r\\n\\r\\n                    return false;\\r\\n                }\\r\\n\\r\\n                //-------------------------------------------\\r\\n\\r\\n                if (!general.isEmptyValue(nestedValidation)) {\\r\\n                    alertBody = nestedValidation.join();\\r\\n\\r\\n                    AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, alertBody);\\r\\n                    AlertsManager.PopAlert(AlertTypes.ServerResponseAlert);\\r\\n\\r\\n                    return false;\\r\\n                }\\r\\n\\r\\n                //-------------------------------------------\\r\\n\\r\\n                return true;\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function setSettings(customSettings) {\\r\\n                for (var key in customSettings) {\\r\\n                    if (customSettings.hasOwnProperty(key)) {\\r\\n                        settings[key] = customSettings[key];\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function onActionReturn(result, callerId, instrument, args) {\\r\\n                var prop = {};\\r\\n\\r\\n                if (args && ('redirectToView' in args)) {\\r\\n                    prop.redirectToView = args.redirectToView;\\r\\n                }\\r\\n\\r\\n                if (result[0].result === eResult.Success) {\\r\\n                    closeDialog();\\r\\n                }\\r\\n\\r\\n                if (args && ('valueDate' in args)) {\\r\\n                    prop.valueDate = args.valueDate;\\r\\n                }\\r\\n\\r\\n                if (args && ('requestData' in args)) {\\r\\n                    prop.requestData = args.requestData;\\r\\n                }\\r\\n\\r\\n                if (args && ('tradingEnabledRetry' in args)) {\\r\\n                    prop.tradingEnabledRetry = args.tradingEnabledRetry;\\r\\n                }\\r\\n\\r\\n                showMessageResult(result, callerId, instrument, prop);\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function closeDialog() {\\r\\n                DialogViewModel.close();\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function resultStatusSuccess(result) {\\r\\n                for (var i = 0, length = result.length; i < length; i++) {\\r\\n                    if (isResultStatusError(result[i])) {\\r\\n                        return false;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                return true;\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function raiseErrorEvent(result, eventToPublish, additionalProperties) {\\r\\n                for (var i = 0; i < result.length; i++) {\\r\\n                    if (isResultStatusError(result[i])) {\\r\\n                        additionalProperties.type = 'server';\\r\\n                        additionalProperties.reason = result[i].msgKey;\\r\\n\\r\\n                        if (!general.isEmptyValue(eventToPublish)) {\\r\\n                            ko.postbox.publish(eventToPublish, additionalProperties);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            function isResultStatusError(result) {\\r\\n                return result.status == eResult.Error || result.status === \\\"ServerError\\\";\\r\\n            }\\r\\n\\r\\n            //-------------------------------------------------------\\r\\n            return {\\r\\n                Init: init,\\r\\n                CheckTradingAgreement: checkTradingAgreement,\\r\\n                ShowAlert: showAlert,\\r\\n                ShowMessageResult: showMessageResult,\\r\\n                OnActionReturn: onActionReturn,\\r\\n                ValidateOnlineTradingUser: validateOnlineTradingUser,\\r\\n                LimitValidate: limitValidate,\\r\\n                LimitValidateQuote: limitValidateQuote,\\r\\n                LimitValidateWithoutTradingStatus: limitValidateWithoutTradingStatus,\\r\\n                ViewProperties: viewProperties,\\r\\n                CloseDialog: closeDialog,\\r\\n                ResultStatusSuccess: resultStatusSuccess,\\r\\n                RaiseErrorEvent: raiseErrorEvent\\r\\n            };\\r\\n        }\\r\\n\\r\\n        return BaseOrder;\\r\\n    }\\r\\n);\\n\",\n    \"define(\\r\\n    'viewmodels/Limits/ActiveLimitsModule',\\r\\n    [\\r\\n        'require',\\r\\n        'knockout',\\r\\n        'handlers/general',\\r\\n        'Dictionary',\\r\\n        \\\"helpers/ObservableHashTable\\\",\\r\\n        'devicemanagers/ViewModelsManager',\\r\\n        'cachemanagers/activelimitsmanager',\\r\\n        'managers/instrumentTranslationsManager',\\r\\n        'dataaccess/dalorder',\\r\\n        'configuration/initconfiguration',\\r\\n        'viewmodels/QuotesSubscriber',\\r\\n        'deviceviewmodels/BaseOrder',\\r\\n    ],\\r\\n    function (require) {\\r\\n        var ko = require('knockout'),\\r\\n            general = require('handlers/general'),\\r\\n            dictionary = require('Dictionary'),\\r\\n            observableHashTable = require(\\\"helpers/ObservableHashTable\\\"),\\r\\n            activeLimitsManager = require('cachemanagers/activelimitsmanager'),\\r\\n            instrumentTranslationsManager = require('managers/instrumentTranslationsManager'),\\r\\n            dalOrders = require('dataaccess/dalorder'),\\r\\n            activeLimitsConfiguration = require('configuration/initconfiguration').ActiveLimitsConfiguration,\\r\\n            QuotesSubscriber = require('viewmodels/QuotesSubscriber'),\\r\\n            BaseOrder = require('deviceviewmodels/BaseOrder'),\\r\\n            ViewModelBase = require('viewmodels/ViewModelBase');\\r\\n\\r\\n        function ActiveLimitsModule() {\\r\\n            var self,\\r\\n                observableActiveLimitsCollection = new observableHashTable(ko, general, 'orderID', { enabled: true, sortProperty: 'orderID', asc: false }),\\r\\n                quotesVM = new QuotesSubscriber(),\\r\\n                baseOrder = new BaseOrder(),\\r\\n                inheritedInstance = general.clone(ViewModelBase),\\r\\n                dataInfo = {},\\r\\n                dataInfoExp = {},\\r\\n                isLoadingData = ko.observable(true);\\r\\n\\r\\n            var init = function (customSettings) {\\r\\n                self = this;\\r\\n                inheritedInstance.setSettings(self, customSettings);\\r\\n                baseOrder.Init({}, observableActiveLimitsCollection);\\r\\n                dataInfo.Data = observableActiveLimitsCollection.Values;\\r\\n                dataInfo.ShowPager = ko.observable(false);\\r\\n\\r\\n                registerToDispatcher();\\r\\n                populateObservableCollection();\\r\\n                quotesVM.Start();\\r\\n            };\\r\\n\\r\\n            var registerToDispatcher = function () {\\r\\n                activeLimitsManager.OnChange.Add(onChange);\\r\\n            };\\r\\n\\r\\n            var populateObservableCollection = function () {\\r\\n                isLoadingData(true);\\r\\n\\r\\n                var defaultLimitMode = inheritedInstance.getSettings(self).defaultLimitMode;\\r\\n\\r\\n                activeLimitsManager.limits.ForEach(function iterator(orderId, limit) {\\r\\n                    if (defaultLimitMode === eLimitMode.None || defaultLimitMode == limit.mode) { //List of open limits only      \\r\\n                        var row = toObservableRow(limit);\\r\\n                        observableActiveLimitsCollection.Add(row);\\r\\n                    }\\r\\n                });\\r\\n\\r\\n                isLoadingData(false);\\r\\n            };\\r\\n\\r\\n            var onChange = function (items) {\\r\\n                if (items) {\\r\\n                    removeItems(items.removedLimits);\\r\\n                    updateItems(items.editedLimits);\\r\\n                    addNewItems(items.newLimits);\\r\\n                }\\r\\n            };\\r\\n\\r\\n            var removeItems = function (removedLimits) {\\r\\n                for (var i = 0; i < removedLimits.length; i++) {\\r\\n                    observableActiveLimitsCollection.Remove(removedLimits[i]);\\r\\n                }\\r\\n            };\\r\\n\\r\\n            var updateItems = function (updatedItems) {\\r\\n                var defaultLimitMode = inheritedInstance.getSettings(self).defaultLimitMode;\\r\\n\\r\\n                for (var i = 0, length = updatedItems.length; i < length; i++) {\\r\\n                    var limit = toObservableRow(activeLimitsManager.limits.GetItem(updatedItems[i]));\\r\\n                    if (defaultLimitMode === eLimitMode.None || defaultLimitMode == limit.mode) {\\r\\n\\r\\n                        observableActiveLimitsCollection.Update(limit.orderID, limit);\\r\\n                    }\\r\\n                }\\r\\n            };\\r\\n\\r\\n            var addNewItems = function (newItems) {\\r\\n                if (newItems && newItems.length) {\\r\\n                    for (var i = 0, length = newItems.length; i < length; i++) {\\r\\n                        var limit = toObservableRow(activeLimitsManager.limits.GetItem(newItems[i]));\\r\\n                        if (inheritedInstance.getSettings(self).defaultLimitMode === eLimitMode.None || inheritedInstance.getSettings(self).defaultLimitMode == limit.mode) {\\r\\n                            observableActiveLimitsCollection.Add(limit);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            };\\r\\n\\r\\n            var onRemoveLimit = function (data) {\\r\\n                var limit = activeLimitsManager.limits.GetItem(data.orderID);\\r\\n                if (limit) {\\r\\n                    data.isRemoving(true);\\r\\n                    dalOrders.DeleteLimit(limit, onRemoveLimitReturn);\\r\\n                }\\r\\n            };\\r\\n\\r\\n            //------------------------------------------------------------\\r\\n\\r\\n            var onRemoveLimitReturn = function (result, callerId, requestData) {\\r\\n                baseOrder.ShowMessageResult(result, callerId, null, requestData);\\r\\n\\r\\n                if (general.isDefinedType(observableActiveLimitsCollection.Get(result[0].itemId).isRemoving)) {\\r\\n                    observableActiveLimitsCollection.Get(result[0].itemId).isRemoving(false);\\r\\n                }\\r\\n            };\\r\\n\\r\\n            var toObservableRow = function (limit) {\\r\\n                return {\\r\\n                    instrumentName: ko.observable(instrumentTranslationsManager.Long(limit.instrumentID)),\\r\\n                    instrumentID: limit.instrumentID,\\r\\n                    isInactiveQuote: quotesVM.GetQuote(limit.instrumentID).isInactive,\\r\\n                    baseSymbol: limit.baseSymbol,\\r\\n                    otherSymbol: limit.otherSymbol,\\r\\n                    orderID: limit.orderID,\\r\\n                    positionNumber: limit.positionNumber == 0 ? \\\"\\\" : limit.positionNumber,\\r\\n                    accountNumber: limit.accountNumber,\\r\\n                    orderDir: limit.orderDir,\\r\\n                    orderRate: limit.orderRate,\\r\\n                    orderRateNumeric: general.toNumeric(limit.orderRate),\\r\\n                    buySymbolID: limit.buySymbolID,\\r\\n                    buyAmount: limit.buyAmount,\\r\\n                    sellSymbolID: limit.sellSymbolID,\\r\\n                    sellAmount: limit.sellAmount,\\r\\n                    limitAmount: limit.orderDir == eOrderDir.Sell ? limit.sellAmount : limit.buyAmount,\\r\\n                    type: limit.type,\\r\\n                    mode: limit.mode,\\r\\n                    expirationDate: general.isEmptyValue(limit.expirationDate) ? dictionary.GetItem(\\\"GoodTillCancel\\\") : limit.expirationDate,\\r\\n                    entryTime: limit.entryTime,\\r\\n                    slRate: limit.slRate,  // to do remove toRate function\\r\\n                    tpRate: limit.tpRate,\\r\\n                    otherLimitID: limit.otherLimitID,\\r\\n                    ThisDealSwipe: ko.observable(true),\\r\\n                    typeTP_abrv: dictionary.GetItem(\\\"limtype2_short\\\"),\\r\\n                    typeTP: dictionary.GetItem(\\\"limtype2\\\"),\\r\\n                    typeSL_abrv: dictionary.GetItem(\\\"limtype1_short\\\"),\\r\\n                    typeSL: dictionary.GetItem(\\\"limtype1\\\"),\\r\\n                    rateDirIsUp: quotesVM.GetQuote(limit.instrumentID).rateDirIsUp,\\r\\n                    rateDirIsDown: quotesVM.GetQuote(limit.instrumentID).rateDirIsDown,\\r\\n                    isEditable: limit.mode === eLimitMode.OpenDeal,\\r\\n                    isRemoving: ko.observable(false)\\r\\n                };\\r\\n            };\\r\\n\\r\\n            var applyFilter = function () { };\\r\\n\\r\\n            var hasRecords = ko.pureComputed(function () {\\r\\n                return 0 < dataInfo.Data().length;\\r\\n            });\\r\\n\\r\\n            return {\\r\\n                init: init,\\r\\n                DataInfo: dataInfo,\\r\\n                DataInfoExp: dataInfoExp,\\r\\n                RemoveLimit: onRemoveLimit,\\r\\n                SetSorting: observableActiveLimitsCollection.SetSorting,\\r\\n                SortProperties: observableActiveLimitsCollection.SortProperties,\\r\\n                Refresh: populateObservableCollection,\\r\\n                IsLoadingData: isLoadingData,\\r\\n                ApplyFilter: applyFilter,\\r\\n                HasRecords: hasRecords\\r\\n            };\\r\\n        }\\r\\n\\r\\n        var instance = new ActiveLimitsModule();\\r\\n        instance.init(activeLimitsConfiguration);\\r\\n\\r\\n        return instance;\\r\\n    }\\r\\n);\\r\\n\\n\",\n    \"define('deviceviewmodels/LimitsViewModel',[\\r\\n\\t\\\"require\\\",\\r\\n\\t\\\"knockout\\\",\\r\\n\\t\\\"handlers/general\\\",\\r\\n\\t\\\"helpers/KoComponentViewModel\\\",\\r\\n\\t\\\"viewmodels/Limits/ActiveLimitsModule\\\",\\r\\n\\t\\\"managers/viewsmanager\\\",\\r\\n\\t\\\"Dictionary\\\",\\r\\n\\t\\\"viewmodels/dialogs/DialogViewModel\\\",\\r\\n\\t\\\"managers/PrintExportManager\\\",\\r\\n\\t\\\"initdatamanagers/Customer\\\",\\r\\n], function (require) {\\r\\n\\tvar ko = require(\\\"knockout\\\"),\\r\\n\\t\\tgeneral = require(\\\"handlers/general\\\"),\\r\\n\\t\\tKoComponentViewModel = require(\\\"helpers/KoComponentViewModel\\\"),\\r\\n\\t\\tActiveLimitsModule = require(\\\"viewmodels/Limits/ActiveLimitsModule\\\"),\\r\\n\\t\\tViewsManager = require(\\\"managers/viewsmanager\\\"),\\r\\n\\t\\tDialogViewModel = require(\\\"viewmodels/dialogs/DialogViewModel\\\"),\\r\\n\\t\\tDictionary = require(\\\"Dictionary\\\"),\\r\\n\\t\\tcustomer = require(\\\"initdatamanagers/Customer\\\"),\\r\\n\\t\\tprintExportManager = require(\\\"managers/PrintExportManager\\\");\\r\\n\\r\\n\\tvar LimitsViewModel = general.extendClass(KoComponentViewModel, function LimitsViewModelClass() {\\r\\n\\t\\tvar self = this,\\r\\n\\t\\t\\tparent = this.parent; // inherited from KoComponentViewModelz,\\r\\n\\r\\n\\t\\tfunction init(params) {\\r\\n\\t\\t\\tparent.init.call(self, params);\\r\\n\\r\\n\\t\\t\\tif (!params.isHeaderComponent) {\\r\\n\\t\\t\\t\\tinitExport();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction dispose() {\\r\\n\\t\\t\\tparent.dispose.call(self);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction initExport() {\\r\\n\\t\\t\\tself.subscribeAndNotify(ActiveLimitsModule.HasRecords, monitorData);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction monitorData(hasData) {\\r\\n\\t\\t\\tko.postbox.publish(\\\"printableDataAvailable\\\", {\\r\\n\\t\\t\\t\\tdataAvailable: hasData,\\r\\n\\t\\t\\t\\tviewType: ViewsManager.ActiveFormType(),\\r\\n\\t\\t\\t\\tviewModel: \\\"LimitsViewModel\\\",\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction updateRemoveLimit(limit) {\\r\\n\\t\\t\\tif (printExportManager.IsWorkingNow()) {\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar revisedSlip = customer.HasAbTestConfig(eAbTestProps.dealSlipsRevised),\\r\\n\\t\\t\\t\\tdialogClass = \\\"deal-slip\\\" + (revisedSlip ? \\\" revised-slip\\\" : \\\"\\\"),\\r\\n\\t\\t\\t\\tdialogTitle = !revisedSlip\\r\\n\\t\\t\\t\\t\\t? Dictionary.GetItem(\\\"EditDeleteOpeningLimit\\\", \\\"dialogsTitles\\\", \\\" \\\") + \\\" \\\" + limit.orderID\\r\\n\\t\\t\\t\\t\\t: \\\"\\\";\\r\\n\\r\\n\\t\\t\\tDialogViewModel.open(\\r\\n\\t\\t\\t\\teDialog.EditLimit,\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\ttitle: dialogTitle,\\r\\n\\t\\t\\t\\t\\twidth: 700,\\r\\n\\t\\t\\t\\t\\tcustomTitle: \\\"EditLimitHeader\\\",\\r\\n\\t\\t\\t\\t\\tpersistent: false,\\r\\n\\t\\t\\t\\t\\tdialogClass: dialogClass,\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\teViewTypes.vEditLimit,\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\torderId: limit.orderID,\\r\\n\\t\\t\\t\\t\\tpageName: eDealPage.EditLimitViewModel,\\r\\n\\t\\t\\t\\t\\tchart: {\\r\\n\\t\\t\\t\\t\\t\\tdirection: eChartDirection.Same,\\r\\n\\t\\t\\t\\t\\t\\tallowDragLine: true,\\r\\n\\t\\t\\t\\t\\t\\tkeys: {\\r\\n\\t\\t\\t\\t\\t\\t\\tstopLoss: \\\"chartline_IfDoneStopLoss\\\",\\r\\n\\t\\t\\t\\t\\t\\t\\ttakeProfit: \\\"chartline_IfDoneTakeProfit\\\",\\r\\n\\t\\t\\t\\t\\t\\t\\tcurrentRate: \\\"chartline_CurrentRate\\\",\\r\\n\\t\\t\\t\\t\\t\\t\\tlimitLevel: \\\"chartline_LimitLevel\\\",\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n \\r\\n        function getSlTpDialogTitle(limitType, limit, revisedDealSlip) {\\r\\n            if (revisedDealSlip) {\\r\\n                return  '';\\r\\n            }\\r\\n\\r\\n            var contentKey = limitType === eLimitType.StopLoss ? 'UpdateRemoveStopLossTitle' : 'UpdateRemoveTakeProfitTitle',\\r\\n                suffix = ' ' + limit.orderID;\\r\\n            \\r\\n            if (limitType === eLimitType.StopLoss && Number(limit.slRate) == 0) {\\r\\n                contentKey = 'AddStopLossTitle';\\r\\n                suffix = '';\\r\\n            } else if (limitType === eLimitType.TakeProfit && Number(limit.tpRate) == 0) {\\r\\n                contentKey = 'AddTakeProfitTitle';\\r\\n                suffix = '';\\r\\n            }\\r\\n            \\r\\n            return Dictionary.GetItem(contentKey, 'dialogsTitles', ' ') + suffix;\\r\\n        }\\r\\n\\r\\n        function addEditSlTp(limitType, limit) {\\r\\n\\t\\t\\tvar revisedSlip = customer.HasAbTestConfig(eAbTestProps.dealSlipsRevised),\\r\\n\\t\\t\\t\\tdialogClass = \\\"deal-slip\\\" + (revisedSlip ? \\\" revised-slip\\\" : \\\"\\\"),\\r\\n                dialogTitle = getSlTpDialogTitle(limitType, limit, revisedSlip),\\r\\n                chartProperties = {\\r\\n                    direction: eChartDirection.Opposite,\\r\\n                    allowDragLine: true,\\r\\n                    keys: {\\r\\n                        stopLoss: 'chartline_IfDoneStopLoss',\\r\\n                        takeProfit: 'chartline_IfDoneTakeProfit',\\r\\n                        currentRate: 'chartline_IfDoneClosingRate',\\r\\n                        limitLevel: 'chartline_LimitLevel'\\r\\n                    }\\r\\n                };\\r\\n\\r\\n            DialogViewModel.open(eDialog.EditLimit,\\r\\n                {\\r\\n                    title: dialogTitle,\\r\\n                    width: 700,\\r\\n                    persistent: false,\\r\\n                    customTitle: 'EditLimitHeader',\\r\\n\\t\\t\\t\\t\\tdialogClass: dialogClass\\r\\n                },\\r\\n                eViewTypes.vEditLimit,\\r\\n                {\\r\\n                    chart: chartProperties,\\r\\n                    currentRateDirectionSwitch: true,\\r\\n                    isStartNavigator: false,\\r\\n                    limitType: limitType,\\r\\n                    orderId: limit.orderID,\\r\\n                    pageName: eDealPage.EditIfDoneLimit,\\r\\n                });\\r\\n        }\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tinit: init,\\r\\n\\t\\t\\tdispose: dispose,\\r\\n\\t\\t\\tmodel: ActiveLimitsModule,\\r\\n            updateRemoveLimit: updateRemoveLimit,\\r\\n            addEditSlTp: addEditSlTp\\r\\n\\t\\t};\\r\\n\\t});\\r\\n\\r\\n\\tvar createViewModel = function (params) {\\r\\n\\t\\tvar viewModel = new LimitsViewModel();\\r\\n\\t\\tviewModel.init(params);\\r\\n\\r\\n\\t\\treturn viewModel;\\r\\n\\t};\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tviewModel: {\\r\\n\\t\\t\\tcreateViewModel: createViewModel\\r\\n\\t\\t},\\r\\n\\t};\\r\\n});\\r\\n\\n\",\n    \"define(\\r\\n    'deviceviewmodels/account/UserFlowCTA',\\r\\n    [\\r\\n        'require',\\r\\n        'modules/permissionsmodule',\\r\\n        'managers/viewsmanager',\\r\\n        'devicemanagers/AlertsManager'\\r\\n    ],\\r\\n    function (require) {\\r\\n        var permissionsModule = require('modules/permissionsmodule'),\\r\\n            ViewsManager = require('managers/viewsmanager'),\\r\\n            AlertsManager = require('devicemanagers/AlertsManager');\\r\\n\\r\\n        function getUserFlowAction(action) {\\r\\n            switch (action) {\\r\\n                case eCta.Seamless:\\r\\n                    return permissionsModule.RegisterLeadType;\\r\\n\\r\\n                case eCta.ContactUs:\\r\\n                    return AlertsManager.PopAlert.bind(null, AlertTypes.ContactUsCTAAlert);\\r\\n\\r\\n                case eCta.ClientQuestionnaire:\\r\\n                    return ViewsManager.SwitchViewVisible.bind(null, eForms.ClientQuestionnaire);\\r\\n\\r\\n                case eCta.Deposit:\\r\\n                    return ViewsManager.SwitchViewVisible.bind(null, eForms.Deposit);\\r\\n\\r\\n                case eCta.UploadDocuments:\\r\\n                    return ViewsManager.SwitchViewVisible.bind(null, eForms.UploadDocuments);\\r\\n\\r\\n                case eCta.None:\\r\\n                default:\\r\\n                    return function () { };\\r\\n            }\\r\\n        }\\r\\n\\r\\n        var module = {\\r\\n            getUserFlowAction: getUserFlowAction\\r\\n        };\\r\\n\\r\\n        return module;\\r\\n    }\\r\\n);\\r\\n\\n\",\n    \"define('userflow/UserFlowManager',\\r\\n    [\\r\\n        'require',\\r\\n        'knockout',\\r\\n        'devicemanagers/StatesManager',\\r\\n        'StateObject!userFlow',\\r\\n        \\\"global/UrlResolver\\\",\\r\\n    ],\\r\\n    function (require) {\\r\\n        var ko = require('knockout'),\\r\\n            statesManager = require('devicemanagers/StatesManager'),\\r\\n            stateObjectUserFlow = require('StateObject!userFlow'),\\r\\n            urlResolver = require('global/UrlResolver');\\r\\n\\r\\n        stateObjectUserFlow.set(eStateObjectTopics.UserFlowChanged, null);\\r\\n        stateObjectUserFlow.set(eStateObjectTopics.ScmmFddLoaded, false);\\r\\n\\r\\n        statesManager.StartGetCustomerData();\\r\\n\\r\\n        require(['userflow/UserFlowBroker' + urlResolver.getBroker()], function (ufb) {\\r\\n            ko.computed(function () {\\r\\n                var model = ufb();\\r\\n                stateObjectUserFlow.update(eStateObjectTopics.UserFlowChanged, model);\\r\\n\\r\\n                ko.postbox.publish('account-state', model.userStatus);\\r\\n            });\\r\\n        });\\r\\n    }\\r\\n);\\r\\n\\n\",\n    \"define('viewmodels/AccountSummaryNotActiveViewModel',[\\r\\n\\t\\\"require\\\",\\r\\n\\t\\\"knockout\\\",\\r\\n\\t\\\"handlers/general\\\",\\r\\n\\t\\\"helpers/KoComponentViewModel\\\",\\r\\n\\t\\\"initdatamanagers/Customer\\\",\\r\\n\\t\\\"devicemanagers/StatesManager\\\",\\r\\n\\t\\\"StateObject!userFlow\\\",\\r\\n\\t\\\"deviceviewmodels/account/UserFlowCTA\\\",\\r\\n\\t\\\"userflow/UserFlowManager\\\",\\r\\n], function (require) {\\r\\n\\tvar ko = require(\\\"knockout\\\"),\\r\\n\\t\\tgeneral = require(\\\"handlers/general\\\"),\\r\\n\\t\\tKoComponentViewModel = require(\\\"helpers/KoComponentViewModel\\\"),\\r\\n\\t\\tCustomer = require(\\\"initdatamanagers/Customer\\\"),\\r\\n\\t\\tStatesManager = require(\\\"devicemanagers/StatesManager\\\"),\\r\\n\\t\\tstateObjectUserFlow = require(\\\"StateObject!userFlow\\\"),\\r\\n\\t\\tUserFlowCTA = require(\\\"deviceviewmodels/account/UserFlowCTA\\\");\\r\\n\\r\\n\\tvar AccountSummaryNotActiveViewModel = general.extendClass(KoComponentViewModel, function (params) {\\r\\n\\t\\tvar self = this,\\r\\n\\t\\t\\tparent = this.parent,\\r\\n\\t\\t\\tData = this.Data,\\r\\n\\t\\t\\tuserFlowUnsubscribe;\\r\\n\\r\\n\\t\\tvar ctaText = ko.observable(\\\"\\\");\\r\\n\\t\\tvar cta = null;\\r\\n\\t\\tvar isVisible = ko.observable(false);\\r\\n\\r\\n\\t\\tfunction updateFromStateObject(model) {\\r\\n\\t\\t\\tif (model) {\\r\\n\\t\\t\\t\\tctaText(model.ctaText);\\r\\n\\t\\t\\t\\tcta = model.cta;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction init() {\\r\\n\\t\\t\\tupdateFromStateObject(stateObjectUserFlow.get(eStateObjectTopics.UserFlowChanged));\\r\\n\\t\\t\\tuserFlowUnsubscribe = stateObjectUserFlow.subscribe(eStateObjectTopics.UserFlowChanged, function (model) {\\r\\n\\t\\t\\t\\tupdateFromStateObject(model);\\r\\n\\t\\t\\t});\\r\\n\\t\\t\\tsetDefaultObservables();\\r\\n\\t\\t\\tisVisible(!(StatesManager.States.IsActive() || Customer.prop.customerType === eCustomerType.TradingBonus));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setDefaultObservables() {\\r\\n\\t\\t\\tData.ctaClick = ctaClick;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction dispose() {\\r\\n\\t\\t\\tif (userFlowUnsubscribe) userFlowUnsubscribe();\\r\\n\\t\\t\\tparent.dispose.call(self);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tself.subscribeTo(StatesManager.States.IsActive, function (value) {\\r\\n\\t\\t\\tisVisible(!(value || Customer.prop.customerType === eCustomerType.TradingBonus));\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\tfunction ctaClick() {\\r\\n\\t\\t\\tif (cta !== eCta.ContactUs) {\\r\\n\\t\\t\\t\\tko.postbox.publish(\\\"action-source\\\", \\\"FinancialSummaryCTA\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tUserFlowCTA.getUserFlowAction(cta)();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tinit: init,\\r\\n\\t\\t\\tdispose: dispose,\\r\\n\\t\\t\\tData: Data,\\r\\n\\t\\t\\tisVisible: isVisible,\\r\\n\\t\\t\\tctaText: ctaText,\\r\\n\\t\\t\\tstatesManager: StatesManager,\\r\\n\\t\\t\\tcustomer: Customer,\\r\\n\\t\\t};\\r\\n\\t});\\r\\n\\r\\n\\tfunction createViewModel(params) {\\r\\n\\t\\tvar viewModel = new AccountSummaryNotActiveViewModel(params || {});\\r\\n\\t\\tviewModel.init();\\r\\n\\t\\treturn viewModel;\\r\\n\\t}\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tviewModel: {\\r\\n\\t\\t\\tcreateViewModel: createViewModel,\\r\\n\\t\\t},\\r\\n\\t};\\r\\n});\\r\\n\\n\",\n    \"define(\\r\\n    'FxNet/LogicLayer/Deal/DealPermissions',\\r\\n    [\\r\\n        'require',\\r\\n        'initdatamanagers/Customer',\\r\\n        'cachemanagers/PortfolioStaticManager',\\r\\n        'cachemanagers/bonusmanager'\\r\\n    ],\\r\\n    function (require) {\\r\\n        var customer = require('initdatamanagers/Customer'),\\r\\n            portfolioManager = require('cachemanagers/PortfolioStaticManager'),\\r\\n            bonusManager = require('cachemanagers/bonusmanager');\\r\\n\\r\\n        function customerDealPermit() {\\r\\n            return customer.prop.dealPermit;\\r\\n        }\\r\\n\\r\\n        function hasSpreadDiscount() {\\r\\n            return portfolioManager.Portfolio.pendingBonusType === ePendingBonusType.spreadDiscount && bonusManager.bonus().amountBase > 0;\\r\\n        }\\r\\n\\r\\n        return {\\r\\n            CustomerDealPermit: customerDealPermit,\\r\\n            HasSpreadDiscount: hasSpreadDiscount\\r\\n        };\\r\\n    }\\r\\n);\\n\",\n    \"define(\\r\\n    'viewmodels/OpenDealsViewModelBase',\\r\\n    [\\r\\n        'require',\\r\\n        'handlers/general',\\r\\n        'initdatamanagers/InstrumentsManager',\\r\\n    ],\\r\\n    function OpenDealsVMBaseDef() {\\r\\n        var general = require('handlers/general'),\\r\\n            instrumentsManager = require('initdatamanagers/InstrumentsManager')\\r\\n\\r\\n        function OpenDealsViewModelBase() {\\r\\n            function getValueDate(deal) {\\r\\n                var instrument = instrumentsManager.GetInstrument(deal.instrumentID);\\r\\n\\r\\n                if (instrument.isShare) {\\r\\n                    var corporateActionDate = instrument.getCorporateActionDate();\\r\\n\\r\\n                    if (corporateActionDate) {\\r\\n                        if (deal.valueDate) {\\r\\n                            return {\\r\\n                                isValueDateEmpty: false,\\r\\n                                date: general.str2Date(deal.valueDate, 'd/m/y H:M') < general.str2Date(corporateActionDate, 'd/m/y H:M') ? deal.valueDate : corporateActionDate\\r\\n                            };\\r\\n                        }\\r\\n\\r\\n                        return {\\r\\n                            isValueDateEmpty: true,\\r\\n                            date: corporateActionDate\\r\\n                        };\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (deal.valueDate) {\\r\\n                    return {\\r\\n                        isValueDateEmpty: false,\\r\\n                        date: deal.valueDate\\r\\n                    };\\r\\n                } else {\\r\\n                    return {\\r\\n                        isValueDateEmpty: true,\\r\\n                        date: null\\r\\n                    };\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return {\\r\\n                getValueDate: getValueDate\\r\\n            };\\r\\n        }\\r\\n\\r\\n        return OpenDealsViewModelBase;\\r\\n    }\\r\\n);\\r\\n\\n\",\n    \"\\n\",\n    \"define(\\r\\n    'deviceviewmodels/OpenDealsModule',\\r\\n    [\\r\\n        'require',\\r\\n        'knockout',\\r\\n        'handlers/general',\\r\\n        'initdatamanagers/Customer',\\r\\n        'devicemanagers/AlertsManager',\\r\\n        'Dictionary',\\r\\n        'cachemanagers/ClientStateHolderManager',\\r\\n        'cachemanagers/dealsmanager',\\r\\n        'initdatamanagers/InstrumentsManager',\\r\\n        'devicemanagers/StatesManager',\\r\\n        'helpers/ObservableHelper',\\r\\n        'dataaccess/dalorder',\\r\\n        'deviceviewmodels/BaseOrder',\\r\\n        'viewmodels/QuotesSubscriber',\\r\\n        'viewmodels/ViewModelBase',\\r\\n        \\\"modules/BuilderForInBetweenQuote\\\",\\r\\n        'FxNet/LogicLayer/Deal/DealPermissions',\\r\\n        'viewmodels/OpenDealsViewModelBase',\\r\\n        'global/storagefactory',\\r\\n        'StateObject!OpenedDeals',\\r\\n        'handlers/AmountConverter'\\r\\n    ],\\r\\n    function OpenDealsDef(require) {\\r\\n        var ko = require('knockout'),\\r\\n            customer = require('initdatamanagers/Customer'),\\r\\n            alertsManager = require('devicemanagers/AlertsManager'),\\r\\n            dictionary = require('Dictionary'),\\r\\n            csHolderManager = require('cachemanagers/ClientStateHolderManager'),\\r\\n            dealsManager = require('cachemanagers/dealsmanager'),\\r\\n            instrumentsManager = require('initdatamanagers/InstrumentsManager'),\\r\\n            statesManager = require('devicemanagers/StatesManager'),\\r\\n            vmHelpers = require('helpers/ObservableHelper'),\\r\\n            dalOrders = require('dataaccess/dalorder'),\\r\\n            BaseOrder = require('deviceviewmodels/BaseOrder'),\\r\\n            QuotesSubscriber = require('viewmodels/QuotesSubscriber'),\\r\\n            ViewModelBase = require('viewmodels/ViewModelBase'),\\r\\n            BuilderForInBetweenQuote = require(\\\"modules/BuilderForInBetweenQuote\\\"),\\r\\n            dealPermissions = require('FxNet/LogicLayer/Deal/DealPermissions'),\\r\\n            general = require('handlers/general'),\\r\\n            OpenDealsViewModelBase = require('viewmodels/OpenDealsViewModelBase'),\\r\\n            storageFactory = require('global/storagefactory'),\\r\\n            stateObject = require('StateObject!OpenedDeals'),\\r\\n            amountConverter = require('handlers/AmountConverter');\\r\\n\\r\\n        var OpenDealsModule = general.extendClass(OpenDealsViewModelBase, function OpenDealsClass() {\\r\\n            var self = this, // REBUILD_COLLECTION_SIZE = 2,\\r\\n                itemsPerRender = 50,\\r\\n                USD_ID = 47,\\r\\n                quotesVM = new QuotesSubscriber(),\\r\\n                baseOrder = new BaseOrder(),\\r\\n                inheritedInstance = general.clone(ViewModelBase),\\r\\n                LS = storageFactory(storageFactory.eStorageType.local),\\r\\n                selectionKey = 'selection',\\r\\n                availableSelectionKey = 'availableSelection',\\r\\n                // module data\\r\\n                data = {},\\r\\n                subscribers = [];\\r\\n\\r\\n            var init = function (customSettings) {\\r\\n                itemsPerRender = customSettings.itemsPerRender || itemsPerRender;\\r\\n\\r\\n                inheritedInstance.setSettings(self, customSettings);\\r\\n                setFlagsState();\\r\\n\\r\\n                registerToDispatcher();\\r\\n                loadOpenedDeals();\\r\\n\\r\\n                setSubscribers();\\r\\n\\r\\n                quotesVM.Start();\\r\\n            };\\r\\n\\r\\n            var _prepareData = function () {\\r\\n                data.dealsList = ko.observableArray([]);\\r\\n\\r\\n                // prepare data\\r\\n                Object.assign(data, {\\r\\n                    dealsData: null,\\r\\n                    isSorting: ko.observable(false),\\r\\n                    isLoadingData: ko.observable(true),\\r\\n                    isRenderingData: ko.observable(true),\\r\\n                    onCloseDealsEnable: ko.observable(true),\\r\\n                    quoteForAccountCcyToUsdCcy: ko.observable(null),\\r\\n                    totalEquity: ko.observable(0),\\r\\n                    hasValueDateColumn: ko.observable(false),\\r\\n                    sortConfig: ko.observable({\\r\\n                        sortProperty: 'positionNumber',\\r\\n                        asc: false\\r\\n                    }),\\r\\n                    selection: stateObject.set(selectionKey, ko.observableArray([])),\\r\\n                    availableSelection: stateObject.set(availableSelectionKey, ko.observableArray([])),\\r\\n                    selectedDeals: ko.observableArray([]),\\r\\n                    allSelected: ko.observable(false),\\r\\n                    totalOpenedDeals: ko.observable(0),\\r\\n                    flagsState: {},\\r\\n                    positions: {}\\r\\n                });\\r\\n\\r\\n                data.currentRenders = ko.observable(1);\\r\\n                data.lastDealPosition = ko.computed(function () {\\r\\n                    return getLastDealPosition();\\r\\n                });\\r\\n\\r\\n            };\\r\\n\\r\\n            var getLastDealPosition = function () {\\r\\n                var lastDealPosition = dealsManager.Deals.count(),\\r\\n                    limitedPosition = (data.currentRenders() * itemsPerRender),\\r\\n                    lastPosition;\\r\\n\\r\\n                lastPosition = lastDealPosition >= 0 ? lastDealPosition : 0;\\r\\n                data.totalOpenedDeals(dealsManager.Deals.count());\\r\\n\\r\\n                return limitedPosition <= lastPosition ? limitedPosition : lastPosition;\\r\\n            };\\r\\n\\r\\n            var updateDealsToClose = function (reset) {\\r\\n                data.selectedDeals([]);\\r\\n                if (reset) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                data.selection().forEach(function (orderID) {\\r\\n                    var deal = dealsManager.Deals.Container[orderID];\\r\\n                    data.selectedDeals.push(toObservableRow(deal));\\r\\n                });\\r\\n            };\\r\\n\\r\\n            var closeDealAfterConfirmation = function () {\\r\\n                var closeDealsConfig = {\\r\\n                    failCallback: function () {\\r\\n                        data.onCloseDealsEnable(true);\\r\\n                    }\\r\\n                };\\r\\n\\r\\n                if (data.selection().length > 0) {\\r\\n                    data.onCloseDealsEnable(false);\\r\\n                    return dalOrders.CloseDeals(data.selectedDeals(), onCloseDealsReturn, closeDealsConfig);\\r\\n                }\\r\\n\\r\\n                return ErrorManager.onError(\\\"closeDealAfterConfirmation\\\", \\\"trying to close empty list of positions\\\", eErrorSeverity.low);\\r\\n            };\\r\\n\\r\\n            var showMultipleDealsConfirmationAlert = function () {\\r\\n                var properties = {\\r\\n                    selectedData: data.selectedDeals(),\\r\\n                    confirmationCloseDeal: closeDealAfterConfirmation\\r\\n                };\\r\\n\\r\\n                AlertsManager.UpdateAlert(AlertTypes.MultipleDealsClosedConfirmation, this.title, this.body, [], properties);\\r\\n                AlertsManager.PopAlert(AlertTypes.MultipleDealsClosedConfirmation);\\r\\n            };\\r\\n\\r\\n\\r\\n            var closeMultipleDeals = function () {\\r\\n                if (!inheritedInstance.getSettings(self).closeSelected) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                if (statesManager.States.fxDenied() == true) {\\r\\n                    baseOrder.ValidateOnlineTradingUser();\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                if (data.selection().length === 0) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                updateDealsToClose();\\r\\n                if (LS.getItem('hideConfCloseDeals') == 'true') {\\r\\n                    closeDealAfterConfirmation();\\r\\n                } else {\\r\\n                    showMultipleDealsConfirmationAlert();\\r\\n                }\\r\\n            };\\r\\n\\r\\n            var setFlagsState = function () {\\r\\n                data.flagsState.isMarketClosed = statesManager.States.IsMarketClosed;\\r\\n            };\\r\\n\\r\\n            var registerToDispatcher = function () {\\r\\n                dealsManager.OnDealsChange.Add(onDealsChange);\\r\\n                dealsManager.OnDealsPLChange.Add(onDealsPLChange);\\r\\n                csHolderManager.OnChange.Add(onClientStateChange);\\r\\n            };\\r\\n\\r\\n            var loadOpenedDeals = function () {\\r\\n                var accountCcyId = customer.prop.baseCcyId();\\r\\n\\r\\n                if (accountCcyId !== USD_ID) {\\r\\n                    BuilderForInBetweenQuote.GetInBetweenQuote(accountCcyId, USD_ID).then(function (response) {\\r\\n                        data.quoteForAccountCcyToUsdCcy(response);\\r\\n                        firstDealsLoad();\\r\\n                    }).done();\\r\\n                } else {\\r\\n                    firstDealsLoad();\\r\\n                }\\r\\n            };\\r\\n\\r\\n            var firstDealsLoad = function () {\\r\\n                data.isLoadingData(true);\\r\\n                renderDeals();\\r\\n                data.isLoadingData(false);\\r\\n            };\\r\\n\\r\\n            var renderDeals = function () {\\r\\n                data.isRenderingData(true);\\r\\n                data.dealsList(getCurrentDealData());\\r\\n                data.isRenderingData(false);\\r\\n            };\\r\\n\\r\\n            var setSubscribers = function () {\\r\\n                subscribers.push(\\r\\n                    data.lastDealPosition.subscribe(function () {\\r\\n                        renderDeals();\\r\\n                    })\\r\\n                );\\r\\n\\r\\n                subscribers.push(\\r\\n                    data.dealsList.subscribe(function () {\\r\\n                        checkListSelection();\\r\\n                    })\\r\\n                );\\r\\n\\r\\n                subscribers.push(\\r\\n                    data.allSelected.subscribe(function (newValue) {\\r\\n                        if (newValue) {\\r\\n                            if (data.selection().length !== data.availableSelection().length) {\\r\\n                                data.selection(ko.toJS(data.availableSelection()));\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (data.selection().length === data.availableSelection().length) {\\r\\n                                data.selection([]);\\r\\n                            }\\r\\n                        }\\r\\n                    })\\r\\n                );\\r\\n\\r\\n                subscribers.push(\\r\\n                    data.selection.subscribe(function (newValue) {\\r\\n                        checkListSelection();\\r\\n                    })\\r\\n                );\\r\\n            };\\r\\n\\r\\n            var onDealsPLChange = function (changes) {\\r\\n                if (data.isSorting() || data.isRenderingData()) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                data.dealsList(getCurrentDealData());\\r\\n\\r\\n                if (data.selectedDeals().length) {\\r\\n                    var deals = changes.dealsObj;\\r\\n                    for (var i = 0; i < data.selectedDeals().length; i++) {\\r\\n                        var _deal = deals[data.selectedDeals()[i].orderID];\\r\\n                        if (_deal) {\\r\\n                            data.selectedDeals()[i].closingRate(_deal.closingRate);\\r\\n                            data.selectedDeals()[i].fwPips(_deal.fwPips);\\r\\n                            data.selectedDeals()[i].spotRate(_deal.spotRate);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n\\r\\n            };\\r\\n\\r\\n            var onDealsChange = function (changes) {\\r\\n                data.dealsList(getCurrentDealData());\\r\\n\\r\\n                if (!general.isNullOrUndefined(changes.removedItems) && changes.removedItems.length) {\\r\\n                    var ri = changes.removedItems;\\r\\n                    for (var i = 0; i < ri.length; i++) {\\r\\n                        if (data.availableSelection.indexOf(ri[i]) !== -1) {\\r\\n                            data.availableSelection.remove(ri[i]);\\r\\n                        }\\r\\n\\r\\n                        if (data.selection.indexOf(ri[i]) !== -1) {\\r\\n                            data.selection.remove(ri[i]);\\r\\n                        }\\r\\n                    }\\r\\n                    checkListSelection();\\r\\n                }\\r\\n\\r\\n                if (!general.isNullOrUndefined(changes.newItems) && changes.newItems.length) {\\r\\n                    checkListSelection();\\r\\n                }\\r\\n            };\\r\\n\\r\\n            var checkListSelection = function () {\\r\\n                data.allSelected(data.selection().length && data.selection().length === data.availableSelection().length);\\r\\n            };\\r\\n\\r\\n            var onClientStateChange = function () {\\r\\n                data.totalEquity(general.toNumeric(csHolderManager.CSHolder.equity));\\r\\n            };\\r\\n\\r\\n            var getCurrentDealData = function () {\\r\\n                data.dealsData = dealsManager.Deals.Sort(data.sortConfig().sortProperty, data.sortConfig().asc);\\r\\n                var lastDealPos = getLastDealPosition();\\r\\n                return data.dealsData && data.dealsData.length ? data.dealsData.slice(0, lastDealPos) : [];\\r\\n            };\\r\\n\\r\\n            var setSorting = function (enabled, sortBy, ascending) {\\r\\n                var asc = ascending;\\r\\n                data.isSorting(true);\\r\\n                if (data.sortConfig().sortProperty === sortBy) {\\r\\n                    asc = !data.sortConfig().asc;\\r\\n                }\\r\\n                data.sortConfig({\\r\\n                    sortProperty: sortBy,\\r\\n                    asc: asc\\r\\n                });\\r\\n                data.isSorting(false);\\r\\n                data.currentRenders(1);\\r\\n            };\\r\\n\\r\\n            var onCloseThisDeal = function (deal) {\\r\\n                var alert = alertsManager.GetAlert(AlertTypes.CloseDealAlert);\\r\\n\\r\\n                if (alert.DisableThisAlertByCookie()) {\\r\\n                    var arr = generateArrayForDal([]); // data.deals.Get(deal.orderID)\\r\\n\\r\\n                    if (arr) {\\r\\n                        deal.OnCloseDealEnable(false);\\r\\n                        dalOrders.CloseDeals([arr], onCloseDealReturn);\\r\\n                    }\\r\\n                } else {\\r\\n                    // should come from DB!\\r\\n                    alertsManager.UpdateAlert(AlertTypes.CloseDealAlert, null,\\r\\n                        dictionary.GetItem('closeDealConfirmationAlert'),\\r\\n                        [],\\r\\n                        {\\r\\n                            positionNumber: deal.positionNumber,\\r\\n                            orderDir: deal.orderDir,\\r\\n                            dealAmount: deal.dealAmount,\\r\\n                            instrumentID: deal.instrumentID,\\r\\n                            closingRate: deal.closingRate,\\r\\n                            deal: deal,\\r\\n                            caller: publicAPI\\r\\n                        }\\r\\n                    );\\r\\n\\r\\n                    alertsManager.PopAlert(AlertTypes.CloseDealAlert);\\r\\n                }\\r\\n            };\\r\\n\\r\\n            var generateArrayForDal = function (observable) {\\r\\n                var arr = null;\\r\\n\\r\\n                if (observable) {\\r\\n                    var tmpDealObj = ko.toJS(observable);\\r\\n                    arr = vmHelpers.GeneratePrimitiveTypeArray(tmpDealObj);\\r\\n                }\\r\\n\\r\\n                return arr;\\r\\n            };\\r\\n\\r\\n            var onCloseDealReturn = function (result, callerID, requestData) {\\r\\n                updateProcessingObservables(result, callerID, { requestData: requestData });\\r\\n            };\\r\\n\\r\\n            var onCloseDealsReturn = function (result, callerID, requestData) {\\r\\n                updateProcessingObservables(result, callerID, general.extendType({ isCloseMultipleDealsCall: true }, { requestData: requestData }));\\r\\n            };\\r\\n\\r\\n            var updateProcessingObservables = function (result, callerID, args) {\\r\\n                baseOrder.OnActionReturn(result, callerID, null, args);\\r\\n                data.selectedDeals([]);\\r\\n                data.onCloseDealsEnable(true);\\r\\n            };\\r\\n\\r\\n            var getSelectedInstrument = function () {\\r\\n                return instrumentsManager.GetUserDefaultInstrumentId();\\r\\n            };\\r\\n\\r\\n            var isActiveQuote = function () {\\r\\n                var quote = quotesVM.GetQuote(getSelectedInstrument());\\r\\n                return !general.isNullOrUndefined(quote) && quote.isActiveQuote();\\r\\n            };\\r\\n\\r\\n            var hasRecords = ko.pureComputed(function () {\\r\\n                return 0 < data.dealsList().length;\\r\\n            });\\r\\n\\r\\n            var updateVdColumnVisibility = function (value) {\\r\\n                data.hasValueDateColumn(value);\\r\\n            };\\r\\n\\r\\n\\r\\n            var toObservableRow = function (_deal) {\\r\\n                var row = {};\\r\\n\\r\\n                row.positionNumber = _deal.positionNumber;\\r\\n                row.exeTime = _deal.exeTime;\\r\\n                row.instrumentID = _deal.instrumentID;\\r\\n                row.orderDir = _deal.orderDir;\\r\\n                row.dealAmount = _deal.orderDir == eOrderDir.Sell ? _deal.sellAmount : _deal.buyAmount;\\r\\n                row.dealType = _deal.dealType;\\r\\n\\r\\n                row.buyAmount = _deal.buyAmount;\\r\\n                row.buySymbolID = _deal.buySymbolID;\\r\\n\\r\\n                row.sellAmount = _deal.sellAmount;\\r\\n                row.sellSymbolID = _deal.sellSymbolID;\\r\\n\\r\\n                row.orderRate = _deal.orderRate;\\r\\n                row.orderRateNumeric = general.toNumeric(_deal.orderRate);\\r\\n                row.valueDate = self.getValueDate(_deal);\\r\\n\\r\\n                row.slRate = ko.observable(_deal.slRate == 0 ? cEmptyRate : _deal.slRate);\\r\\n                row.typeSL = dictionary.GetItem(\\\"limtype1_short\\\");\\r\\n\\r\\n                row.tpRate = ko.observable(_deal.tpRate == 0 ? cEmptyRate : _deal.tpRate);\\r\\n                row.typeTP = dictionary.GetItem(\\\"limtype2_short\\\");\\r\\n\\r\\n                row.orderID = _deal.orderID;\\r\\n                row.prevSpotRate = ko.observable(_deal.spotRate);\\r\\n                row.spotRate = ko.observable(_deal.spotRate);\\r\\n                row.fwPips = ko.observable(_deal.fwPips);\\r\\n                row.hasAdditionalPL = ko.observable(_deal.hasAdditionalPL);\\r\\n                row.prevClosingRate = ko.observable(_deal.closingRate);\\r\\n                row.closingRate = ko.observable(_deal.closingRate);\\r\\n                row.closeDealRate = ko.computed(function () {\\r\\n                    return row.closingRate() ? row.closingRate().substring(0, row.closingRate().length - 2) : '0.';\\r\\n                });\\r\\n                row.closeDealRatePips = ko.computed(function () {\\r\\n                    return row.closingRate() ? row.closingRate().substring(row.closingRate().length - 2, row.closingRate().length) : '00';\\r\\n                });\\r\\n                row.dialogTitleSLDealLimit = ko.computed(function () {\\r\\n                    return (!general.isNumber(row.slRate()) || row.slRate() == 0) ? dictionary.GetItem('AddStopLossTitle', 'dialogsTitles', '') : dictionary.GetItem('UpdateRemoveStopLossTitle', 'dialogsTitles', '');\\r\\n                });\\r\\n                row.dialogTitleTpDealLimit = ko.computed(function () {\\r\\n                    return (!general.isNumber(row.tpRate()) || row.tpRate() == 0) ? dictionary.GetItem('AddTakeProfitTitle', 'dialogsTitles', '') : dictionary.GetItem('UpdateRemoveTakeProfitTitle', 'dialogsTitles', '');\\r\\n                });\\r\\n\\r\\n                row.pl = ko.observable(!general.isStringType(_deal.pl) ? Number.toStr(_deal.pl) : _deal.pl);\\r\\n                row.plNumeric = general.toNumeric(_deal.pl);\\r\\n                row.plSign = ko.observable(Math.floor(general.toNumeric(_deal.pl)).sign());\\r\\n\\r\\n                row.commission = ko.observable(!general.isStringType(_deal.commission) ? Number.toStr(_deal.commission) : _deal.commission);\\r\\n                row.spreadDiscount = ko.observable(!general.isStringType(_deal.spreadDiscount) ? Number.toStr(_deal.spreadDiscount) : _deal.spreadDiscount);\\r\\n                row.spreadDiscountConverted = ko.observable(!general.isStringType(_deal.spreadDiscount) ? Number.toStr(_deal.spreadDiscount) : _deal.spreadDiscount);\\r\\n                row.grosspl = ko.computed(function () {\\r\\n                    if (data.quoteForAccountCcyToUsdCcy() && customer.prop.selectedCcyId() !== customer.prop.baseCcyId()) {\\r\\n                        var spreadDiscount = amountConverter.Convert(\\r\\n                            general.toNumeric(row.spreadDiscount()),\\r\\n                            data.quoteForAccountCcyToUsdCcy()\\r\\n                        );\\r\\n\\r\\n                        row.spreadDiscountConverted(!general.isStringType(spreadDiscount) ? Number.toStr(spreadDiscount.toFixed(2))\\r\\n                            : spreadDiscount);\\r\\n                    }\\r\\n                    var discount = general.toNumeric(row.spreadDiscountConverted()) === 0 ? general.toNumeric(row.commission()) : -general.toNumeric(row.spreadDiscountConverted());\\r\\n\\r\\n                    var grossPl = general.toNumeric(row.pl()) + discount;\\r\\n                    return grossPl.toFixed(2);\\r\\n                });\\r\\n\\r\\n                row.OnCloseDealEnable = ko.observable(true);\\r\\n                row.OnCloseDealClick = onCloseThisDeal;\\r\\n                row.ThisDealSwipe = ko.observable(true);\\r\\n                row.lastUpdate = ko.observable(quotesVM.GetQuote(_deal.instrumentID).dataTime());\\r\\n                row.quoteIsActive = ko.observable(false);\\r\\n                row.isStock = ko.observable(instrumentsManager.IsInstrumentStock(_deal.instrumentID));\\r\\n\\r\\n                row.adj = ko.computed(function () {\\r\\n                    if (customer.prop.dealPermit == eDealPermit.Islamic) {\\r\\n                        return false;\\r\\n                    }\\r\\n\\r\\n                    if (_deal.valueDate.length === 0) {\\r\\n                        return true;\\r\\n                    }\\r\\n\\r\\n                    return _deal.positionNumber != _deal.orderID;\\r\\n                });\\r\\n\\r\\n                row.isChecked = ko.observable(false);\\r\\n                row.hasAdditionalPL = ko.observable(Number(_deal.additionalPL) !== 0);\\r\\n\\r\\n                return row;\\r\\n            };\\r\\n\\r\\n            _prepareData();\\r\\n\\r\\n            var publicAPI = {\\r\\n                Init: init,\\r\\n                OnCloseDealsEnable: data.onCloseDealsEnable,\\r\\n                IsLoadingData: data.isLoadingData,\\r\\n                IsRenderingData: data.isRenderingData,\\r\\n                LastDealPosition: data.lastDealPosition,\\r\\n                CurrentRenders: data.currentRenders,\\r\\n                TotalEquity: data.totalEquity,\\r\\n                SortProperties: data.sortConfig,\\r\\n                SetSorting: setSorting,\\r\\n                FlagsState: data.flagsState,\\r\\n                HasValueDateColumn: data.hasValueDateColumn,\\r\\n                HasRecords: hasRecords,\\r\\n                Selection: data.selection,\\r\\n                AvailableSelection: data.availableSelection,\\r\\n                AllSelected: data.allSelected,\\r\\n                QuoteForAccountCcyToUsdCcy: data.quoteForAccountCcyToUsdCcy,\\r\\n                CloseMultipleDeals: closeMultipleDeals,\\r\\n                CloseThisDeal: onCloseThisDeal,\\r\\n                OnCloseDealReturn: onCloseDealReturn,\\r\\n                Positions: data.positions,\\r\\n                GetSelectedInstrument: getSelectedInstrument,\\r\\n                IsActiveQuote: isActiveQuote,\\r\\n                DealPermissions: dealPermissions,\\r\\n                DealsList: data.dealsList,\\r\\n                UpdateVdColumnVisibility: updateVdColumnVisibility,\\r\\n                TotalOpenedDeals: data.totalOpenedDeals\\r\\n            };\\r\\n\\r\\n            return publicAPI;\\r\\n        });\\r\\n\\r\\n        return OpenDealsModule;\\r\\n    }\\r\\n);\\r\\n\\n\",\n    \"\\n\",\n    \"define('deviceviewmodels/OpenDealsViewModel',[\\r\\n\\t\\\"require\\\",\\r\\n\\t\\\"knockout\\\",\\r\\n\\t\\\"handlers/general\\\",\\r\\n\\t\\\"helpers/KoComponentViewModel\\\",\\r\\n\\t\\\"deviceviewmodels/OpenDealsModule\\\",\\r\\n\\t\\\"deviceviewmodels/OpenDealsModule\\\",\\r\\n\\t\\\"managers/viewsmanager\\\",\\r\\n\\t\\\"Dictionary\\\",\\r\\n\\t\\\"viewmodels/dialogs/DialogViewModel\\\",\\r\\n\\t\\\"managers/PrintExportManager\\\",\\r\\n\\t\\\"StateObject!Positions\\\",\\r\\n\\t\\\"StateObject!DealsTabs\\\",\\r\\n\\t\\\"configuration/initconfiguration\\\",\\r\\n], function (require) {\\r\\n\\tvar ko = require(\\\"knockout\\\"),\\r\\n\\t\\tgeneral = require(\\\"handlers/general\\\"),\\r\\n\\t\\tKoComponentViewModel = require(\\\"helpers/KoComponentViewModel\\\"),\\r\\n\\t\\topenDealsModule = require(\\\"deviceviewmodels/OpenDealsModule\\\"),\\r\\n\\t\\tcustomer = require(\\\"initdatamanagers/Customer\\\"),\\r\\n\\t\\tViewsManager = require(\\\"managers/viewsmanager\\\"),\\r\\n\\t\\tDialogViewModel = require(\\\"viewmodels/dialogs/DialogViewModel\\\"),\\r\\n\\t\\tDictionary = require(\\\"Dictionary\\\"),\\r\\n\\t\\tprintExportManager = require(\\\"managers/PrintExportManager\\\"),\\r\\n\\t\\tpositionsCache = require(\\\"StateObject!Positions\\\"),\\r\\n\\t\\topenDealsGridSettings = require(\\\"configuration/initconfiguration\\\").OpenDealsConfiguration;\\r\\n\\r\\n\\tvar Model = new openDealsModule();\\r\\n\\tModel.Init(openDealsGridSettings);\\r\\n\\tvar OpenDealsViewModel = general.extendClass(KoComponentViewModel, function OpenDealsViewModelClass(params) {\\r\\n\\t\\tvar self = this,\\r\\n\\t\\t\\tparent = this.parent, // inherited from KoComponentViewModel\\r\\n\\t\\t\\tdata = parent.Data,\\r\\n\\t\\t\\tsubscribers = [];\\r\\n\\r\\n\\t\\tfunction init(settings) {\\r\\n\\t\\t\\tparent.init.call(self, settings);\\r\\n\\r\\n\\t\\t\\tif (settings.isHeaderComponent) {\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tsetObservables();\\r\\n\\t\\t\\tsetSubscribers();\\r\\n\\t\\t\\tinitExport();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setObservables() {\\r\\n\\t\\t\\tvar ofhPositionNumber = positionsCache.set(\\\"ofhPositionNumber\\\", null),\\r\\n\\t\\t\\t\\tplPositionNumber = positionsCache.set(\\\"plPositionNumber\\\", null);\\r\\n\\r\\n\\t\\t\\tdata.selectedOFHPositionNumber = ko.observable(ofhPositionNumber);\\r\\n\\t\\t\\tdata.selectedPLPositionNumber = ko.observable(plPositionNumber);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setSubscribers() {\\r\\n\\t\\t\\tsubscribers.push({\\r\\n\\t\\t\\t\\tdispose: positionsCache.subscribe(\\\"ofhPositionNumber\\\", selectedOFHPositionNumberUpdater),\\r\\n\\t\\t\\t});\\r\\n\\t\\t\\tsubscribers.push({\\r\\n\\t\\t\\t\\tdispose: positionsCache.subscribe(\\\"plPositionNumber\\\", selectedPLPositionNumberUpdater),\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction selectedOFHPositionNumberUpdater(ofhPositionNumber) {\\r\\n\\t\\t\\tdata.selectedOFHPositionNumber(ofhPositionNumber);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction selectedPLPositionNumberUpdater(plPositionNumber) {\\r\\n\\t\\t\\tdata.selectedPLPositionNumber(plPositionNumber);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction initExport() {\\r\\n\\t\\t\\tself.subscribeTo(Model.HasRecords, monitorData);\\r\\n\\r\\n\\t\\t\\tmonitorData(Model.HasRecords());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction monitorData(hasData) {\\r\\n\\t\\t\\tko.postbox.publish(\\\"printableDataAvailable\\\", {\\r\\n\\t\\t\\t\\tdataAvailable: hasData,\\r\\n\\t\\t\\t\\tviewType: ViewsManager.ActiveFormType(),\\r\\n\\t\\t\\t\\tviewModel: \\\"OpenDealsViewModel\\\",\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction closeDeal(position) {\\r\\n\\t\\t\\tif (\\r\\n\\t\\t\\t\\t!position.quoteIsActive() ||\\r\\n\\t\\t\\t\\tModel.FlagsState.isMarketClosed() ||\\r\\n\\t\\t\\t\\t!window.componentsLoaded() ||\\r\\n\\t\\t\\t\\tprintExportManager.IsWorkingNow()\\r\\n\\t\\t\\t) {\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tvar revisedSlip = customer.HasAbTestConfig(eAbTestProps.dealSlipsRevised),\\r\\n\\t\\t\\t\\tdialogClass = \\\"deal-slip\\\" + (revisedSlip ? \\\" revised-slip\\\" : \\\" closeDeal\\\"),\\r\\n\\t\\t\\t\\tdialogTitle = !revisedSlip ? Dictionary.GetItem(\\\"CloseDealRequest\\\", \\\"dialogsTitles\\\", \\\" \\\") + \\\":\\\" : \\\"\\\";\\r\\n\\r\\n\\t\\t\\tDialogViewModel.open(\\r\\n\\t\\t\\t\\teDialog.CloseDeal,\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\ttitle: dialogTitle,\\r\\n\\t\\t\\t\\t\\tcustomTitle: \\\"CloseDealPosNum\\\",\\r\\n\\t\\t\\t\\t\\twidth: 555,\\r\\n\\t\\t\\t\\t\\tpersistent: false,\\r\\n\\t\\t\\t\\t\\tdialogClass: dialogClass,\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\teViewTypes.vCloseDeal,\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\torderId: position.orderID,\\r\\n\\t\\t\\t\\t\\tisStartNavigator: false,\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setComponentReady() {\\r\\n\\t\\t\\tif (general.isFunctionType(params.SetComponentReady)) {\\r\\n\\t\\t\\t\\tparams.SetComponentReady(eViewTypes.vOpenDeals);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction dispose() {\\r\\n\\t\\t\\tpositionsCache.unset(\\\"ofhPositionNumber\\\");\\r\\n\\t\\t\\tpositionsCache.unset(\\\"plPositionNumber\\\");\\r\\n\\r\\n\\t\\t\\twhile (subscribers.length > 0) {\\r\\n\\t\\t\\t\\tsubscribers.pop().dispose();\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tparent.dispose.call(self); // inherited from KoComponentViewModel\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tinit: init,\\r\\n\\t\\t\\tdispose: dispose,\\r\\n\\t\\t\\tData: data,\\r\\n\\t\\t\\tmodel: Model,\\r\\n\\t\\t\\tcloseDeal: closeDeal,\\r\\n\\t\\t\\tSetComponentReady: setComponentReady,\\r\\n\\t\\t};\\r\\n\\t});\\r\\n\\r\\n\\tvar createViewModel = function (params) {\\r\\n\\t\\tvar viewModel = new OpenDealsViewModel(params);\\r\\n\\r\\n\\t\\tviewModel.init(params);\\r\\n\\r\\n\\t\\treturn viewModel;\\r\\n\\t};\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tviewModel: {\\r\\n\\t\\t\\tcreateViewModel: createViewModel,\\r\\n\\t\\t},\\r\\n\\t};\\r\\n});\\r\\n\\n\",\n    \"/// menus_mainmenu prereqs\\r\\n\\r\\ndefine('viewmodels/menuviewmodel',[\\r\\n\\t\\\"knockout\\\",\\r\\n\\t\\\"modules/permissionsmodule\\\",\\r\\n\\t\\\"handlers/general\\\",\\r\\n\\t\\\"devicemanagers/ViewModelsManager\\\",\\r\\n\\t\\\"generalmanagers/StatesManager\\\",\\r\\n\\t\\\"initdatamanagers/Customer\\\",\\r\\n\\t\\\"Dictionary\\\",\\r\\n\\t\\\"configuration/initconfiguration\\\",\\r\\n\\t\\\"cachemanagers/PortfolioStaticManager\\\",\\r\\n\\t\\\"customEnums/ViewsEnums\\\",\\r\\n\\t\\\"enums/enums\\\",\\r\\n], function (\\r\\n\\tko,\\r\\n\\tpermissionsModule,\\r\\n\\tgeneral,\\r\\n\\tviewModelsManager,\\r\\n\\tstatesManager,\\r\\n\\tcustomer,\\r\\n\\tDictionary,\\r\\n\\tInitConfiguration,\\r\\n\\tportfolioManager\\r\\n) {\\r\\n\\tvar SubMenuModel = function () {\\r\\n\\t\\tvar isActive = ko.observable(false);\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tisActive: isActive,\\r\\n\\t\\t\\tshow: function () {\\r\\n\\t\\t\\t\\tisActive(true);\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\thide: function () {\\r\\n\\t\\t\\t\\tisActive(false);\\r\\n\\t\\t\\t},\\r\\n\\t\\t};\\r\\n\\t};\\r\\n\\r\\n\\tvar tradingPermissions = {},\\r\\n\\t\\tcustomerProperties = {},\\r\\n\\t\\tforexCfdMenu = new SubMenuModel(),\\r\\n\\t\\ttoolsMenu = new SubMenuModel(),\\r\\n\\t\\teducationMenu = new SubMenuModel(),\\r\\n\\t\\tfundsMenu = new SubMenuModel(),\\r\\n\\t\\treportsMenu = new SubMenuModel(),\\r\\n\\t\\ttradingMenu = new SubMenuModel();\\r\\n\\r\\n\\tvar pendingWithdrawals = ko.observable(portfolioManager.Portfolio.pendingWithdrawals);\\r\\n\\r\\n\\tvar goToMainPage = function () {\\r\\n\\t\\tviewModelsManager.VManager.SwitchViewVisible(customer.prop.mainPage, {});\\r\\n\\t};\\r\\n\\r\\n\\tvar init = function () {\\r\\n\\t\\tregisterObservableStartUpEvent();\\r\\n\\t\\tregisterOnPendingWithdrawalsChange();\\r\\n\\t\\tcustomerProperties = {\\r\\n\\t\\t\\tmainPage: customer.prop.mainPage,\\r\\n\\t\\t\\tisOnlyForexCustomer: customer.prop.tradingPermissions.isOnlyForexCustomer,\\r\\n\\t\\t\\thasTransactionsReport: customer.prop.tradingPermissions.hasTransactionsReport,\\r\\n\\t\\t\\tisDemo: customer.prop.isDemo,\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\ttradingMenu.tradingClick = function () {\\r\\n\\t\\t\\tswitchView(customerProperties.mainPage, null, \\\"HeaderMenu\\\");\\r\\n\\t\\t};\\r\\n\\t\\ttradingMenu.activeCss = ko.pureComputed(function () {\\r\\n\\t\\t\\treturn viewModelsManager.VManager.ActiveFormType() === customerProperties.mainPage;\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\ttoolsMenu.activeCss = ko.pureComputed(function () {\\r\\n\\t\\t\\treturn (\\r\\n\\t\\t\\t\\tviewModelsManager.VManager.ActiveFormType() == eForms.AdvinionChart ||\\r\\n\\t\\t\\t\\tviewModelsManager.VManager.ActiveFormType() == eForms.TradingSignals\\r\\n\\t\\t\\t);\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\treportsMenu.reportsVisible = ko.pureComputed(function () {\\r\\n\\t\\t\\treturn (\\r\\n\\t\\t\\t\\tviewModelsManager.VManager.ActiveFormType() == eForms.Statement ||\\r\\n\\t\\t\\t\\tviewModelsManager.VManager.ActiveFormType() == eForms.ActivityLog ||\\r\\n\\t\\t\\t\\tviewModelsManager.VManager.ActiveFormType() == eForms.TransactionsReport\\r\\n\\t\\t\\t);\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\treportsMenu.accountStatementClick = function () {\\r\\n\\t\\t\\tswitchView(eForms.Statement, null, \\\"HeaderMenu\\\");\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\treportsMenu.activityLogClick = function () {\\r\\n\\t\\t\\tswitchView(eForms.ActivityLog, null, \\\"HeaderMenu\\\");\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\treportsMenu.transactionsClick = function () {\\r\\n\\t\\t\\tswitchView(eForms.TransactionsReport, null, \\\"HeaderMenu\\\");\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\ttoolsMenu.chartClick = function () {\\r\\n\\t\\t\\tswitchView(eForms.AdvinionChart, null, \\\"HeaderMenu\\\");\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\ttoolsMenu.tradingSignalsClick = function () {\\r\\n\\t\\t\\tswitchView(eForms.TradingSignals, null, \\\"HeaderMenu\\\");\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\ttoolsMenu.priceAlertMenuClick = function () {\\r\\n\\t\\t\\tko.postbox.publish(\\\"price-alerts-menu-view\\\");\\r\\n\\t\\t\\tswitchView(eForms.PriceAlerts, null, \\\"HeaderMenu\\\");\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\teducationMenu.educationVisible = ko.pureComputed(function () {\\r\\n\\t\\t\\treturn (\\r\\n\\t\\t\\t\\tviewModelsManager.VManager.ActiveFormType() == eForms.Tutorials ||\\r\\n\\t\\t\\t\\tviewModelsManager.VManager.ActiveFormType() == eForms.EducationalTutorials\\r\\n\\t\\t\\t);\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\teducationMenu.tutorialsClick = function () {\\r\\n\\t\\t\\tswitchView(eForms.Tutorials, null, \\\"HeaderMenu\\\");\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\teducationMenu.educationTutorialsClick = function () {\\r\\n\\t\\t\\tswitchView(eForms.EducationalTutorials, null, \\\"HeaderMenu\\\");\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\teducationMenu.eduSubVisible = function () {\\r\\n\\t\\t\\t// this is a bug with default value, so we abuse the bug\\r\\n\\t\\t\\treturn Dictionary.GetItem(\\\"liForexTutorial2\\\", \\\"menus_mainmenu\\\", \\\"0\\\") !== \\\"\\\";\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\teducationMenu.tutorialsVisible = function () {\\r\\n\\t\\t\\t// this is a bug with default value, so we abuse the bug\\r\\n\\t\\t\\treturn Dictionary.GetItem(\\\"liEducationalForexTutorial2\\\", \\\"menus_mainmenu\\\", \\\"0\\\") !== \\\"\\\";\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\teducationMenu.allVisible = function () {\\r\\n\\t\\t\\treturn educationMenu.eduSubVisible() && educationMenu.tutorialsVisible();\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tfundsMenu.fundsVisible = ko.pureComputed(function () {\\r\\n\\t\\t\\treturn (\\r\\n\\t\\t\\t\\tviewModelsManager.VManager.ActiveFormType() == eForms.Deposit ||\\r\\n\\t\\t\\t\\tviewModelsManager.VManager.ActiveFormType() == eForms.Withdrawal\\r\\n\\t\\t\\t);\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\tfundsMenu.depositsClick = function () {\\r\\n\\t\\t\\tswitchView(eForms.Deposit, null, \\\"HeaderMenu\\\");\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tfundsMenu.withdrawalsClick = function () {\\r\\n\\t\\t\\tswitchView(\\r\\n\\t\\t\\t\\teForms.Withdrawal,\\r\\n\\t\\t\\t\\tInitConfiguration.WithdrawalConfiguration.wizardConfig.useBrowserHistory\\r\\n\\t\\t\\t\\t\\t? { step: eWithdrawalSteps.setAmount }\\r\\n\\t\\t\\t\\t\\t: null,\\r\\n\\t\\t\\t\\t\\\"HeaderMenu\\\"\\r\\n\\t\\t\\t);\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tfundsMenu.pendingWithdrawalsClick = function () {\\r\\n\\t\\t\\tswitchView(eForms.PendingWithdrawal, null, \\\"HeaderMenu\\\");\\r\\n\\t\\t};\\r\\n\\t};\\r\\n\\r\\n\\tvar tradesVisbile = function () {\\r\\n\\t\\treturn ko.computed(function () {\\r\\n\\t\\t\\treturn (\\r\\n\\t\\t\\t\\tviewModelsManager.VManager.GetActiveFormViewProperties(eViewTypes.vOpenDeals).visible() ||\\r\\n\\t\\t\\t\\tviewModelsManager.VManager.GetActiveFormViewProperties(eViewTypes.vClosedDealsSummaries).visible() ||\\r\\n\\t\\t\\t\\tviewModelsManager.VManager.GetActiveFormViewProperties(eViewTypes.vLimits).visible()\\r\\n\\t\\t\\t);\\r\\n\\t\\t});\\r\\n\\t};\\r\\n\\r\\n\\tfunction simpleVisible(viewType) {\\r\\n\\t\\tif (general.isDefinedType(window.DialogViewModel) && window.DialogViewModel.getCurrentView() == viewType) {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn viewModelsManager.VManager.GetActiveFormViewProperties(viewType).visible;\\r\\n\\t}\\r\\n\\r\\n\\tvar registerObservableStartUpEvent = function () {\\r\\n\\t\\tviewModelsManager.VManager.GetActiveFormViewProperties(eViewTypes.vMenu).visible.subscribe(function (\\r\\n\\t\\t\\tisVisible\\r\\n\\t\\t) {\\r\\n\\t\\t\\tif (!isVisible) {\\r\\n\\t\\t\\t\\tstop();\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tstart();\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t};\\r\\n\\r\\n\\tvar start = function () {};\\r\\n\\r\\n\\tvar stop = function () {\\r\\n\\t\\tunRegisterOnPendingWithdrawalsChange();\\r\\n\\t};\\r\\n\\r\\n\\tvar clientQuestionnaireVisible = ko.pureComputed(function () {\\r\\n\\t\\treturn statesManager.States.CddStatus() !== eCDDStatus.NotRequired && !customer.prop.isDemo;\\r\\n\\t});\\r\\n\\r\\n\\tvar forexAndCfdVisible = function () {\\r\\n\\t\\treturn ko.computed(function () {\\r\\n\\t\\t\\treturn (\\r\\n\\t\\t\\t\\tviewModelsManager.VManager.ActiveFormType() == customer.prop.mainPage ||\\r\\n\\t\\t\\t\\tviewModelsManager.VManager.ActiveFormType() == eForms.Deals\\r\\n\\t\\t\\t);\\r\\n\\t\\t});\\r\\n\\t};\\r\\n\\r\\n\\tvar onClientPortfolioStateChange = function () {\\r\\n\\t\\tpendingWithdrawals(parseInt(portfolioManager.Portfolio.pendingWithdrawals));\\r\\n\\t};\\r\\n\\r\\n\\tvar registerOnPendingWithdrawalsChange = function () {\\r\\n\\t\\tportfolioManager.OnChange.Add(onClientPortfolioStateChange);\\r\\n\\t};\\r\\n\\r\\n\\tvar unRegisterOnPendingWithdrawalsChange = function () {\\r\\n\\t\\tportfolioManager.OnChange.Remove(onClientPortfolioStateChange);\\r\\n\\t};\\r\\n\\r\\n\\tvar switchView = function (viewType, viewArgs, actionSourceTracking) {\\r\\n\\t\\tif (actionSourceTracking) {\\r\\n\\t\\t\\tko.postbox.publish(\\\"action-source\\\", actionSourceTracking);\\r\\n\\t\\t}\\r\\n\\t\\tviewModelsManager.VManager.RedirectToForm(viewType, viewArgs || {});\\r\\n\\t\\thide();\\r\\n\\t};\\r\\n\\r\\n\\tvar educationMenuClick = function () {\\r\\n\\t\\tvar hasForexTutorial = educationMenu.eduSubVisible();\\r\\n\\t\\tvar hasEducationalForexTutorial = educationMenu.tutorialsVisible();\\r\\n\\t\\tif (hasForexTutorial && hasEducationalForexTutorial) return;\\r\\n\\r\\n\\t\\tif (hasForexTutorial) switchView(eForms.Tutorials);\\r\\n\\r\\n\\t\\tif (hasEducationalForexTutorial) switchView(eForms.EducationalTutorials);\\r\\n\\t};\\r\\n\\r\\n\\tfunction hide() {\\r\\n\\t\\tforexCfdMenu.hide();\\r\\n\\t\\ttoolsMenu.hide();\\r\\n\\t\\teducationMenu.hide();\\r\\n\\t\\tfundsMenu.hide();\\r\\n\\t\\treportsMenu.hide();\\r\\n\\t\\ttradingMenu.hide();\\r\\n\\t}\\r\\n\\r\\n\\tfunction createViewModel() {\\r\\n\\t\\tinit();\\r\\n\\t\\treturn {\\r\\n\\t\\t\\ttradingPermissions: tradingPermissions,\\r\\n\\r\\n\\t\\t\\tforexAndCfdVisible: forexAndCfdVisible,\\r\\n\\t\\t\\tsimpleVisible: simpleVisible,\\r\\n\\t\\t\\tpendingWithdrawals: pendingWithdrawals,\\r\\n\\r\\n\\t\\t\\tclientQuestionnaireVisible: clientQuestionnaireVisible,\\r\\n\\t\\t\\tforexCfdMenu: forexCfdMenu,\\r\\n\\t\\t\\ttoolsMenu: toolsMenu,\\r\\n\\t\\t\\teducationMenu: educationMenu,\\r\\n\\t\\t\\tfundsMenu: fundsMenu,\\r\\n\\t\\t\\treportsMenu: reportsMenu,\\r\\n\\t\\t\\ttradingMenu: tradingMenu,\\r\\n\\t\\t\\tEducationMenuClick: educationMenuClick,\\r\\n\\r\\n\\t\\t\\tSwitchView: switchView,\\r\\n\\t\\t\\tIsDemo: statesManager.States.IsDemo,\\r\\n\\t\\t\\tGoToMainPage: goToMainPage,\\r\\n\\t\\t\\tcustomerProperties: customerProperties,\\r\\n\\t\\t\\ttradesVisbile: tradesVisbile,\\r\\n\\t\\t};\\r\\n\\t}\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tviewModel: {\\r\\n\\t\\t\\tcreateViewModel: createViewModel,\\r\\n\\t\\t},\\r\\n\\t};\\r\\n});\\r\\n\\n\",\n    \"function TDALClosedDeals(ErrorManager, general) {\\r\\n    function ensurePositionNumber(params) {\\r\\n        if (general.isEmptyType(params['positionNumber'])) {\\r\\n            params['positionNumber'] = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function ensureInstrumentId(params) {\\r\\n        if (general.isEmptyType(params['instrumentId']) || params['instrumentId'] == Number.MAX_SAFE_INTEGER || params['instrumentId'] === -1) {\\r\\n            params['instrumentId'] = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function loadClosedDeals(params, onLoadComplete) {\\r\\n        var ajaxer = new TAjaxer();\\r\\n        params = params || {};\\r\\n\\r\\n        ensurePositionNumber(params);\\r\\n        ensureInstrumentId(params);\\r\\n\\r\\n        ajaxer.get(\\r\\n            \\\"dalClosedDeals/LoadClosedDeals\\\",\\r\\n            \\\"api/closeddeals/LoadClosedDeals\\\",\\r\\n            general.urlEncode(params),\\r\\n            onLoadComplete,\\r\\n            function () {\\r\\n                ErrorManager.onError(\\\"dalClosedDeals/loadClosedDealsSummaries\\\", \\\"\\\", eErrorSeverity.medium);\\r\\n            }\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function loadClosedDealsSummaries(params, onLoadComplete) {\\r\\n        var ajaxer = new TAjaxer();\\r\\n        params = params || {};\\r\\n\\r\\n        ensurePositionNumber(params);\\r\\n        ensureInstrumentId(params);\\r\\n\\r\\n        ajaxer.get(\\r\\n            \\\"dalClosedDeals/loadClosedDealsSummaries\\\",\\r\\n            \\\"api/closeddeals/LoadClosedDealsSummaries\\\",\\r\\n            general.urlEncode(params),\\r\\n            onLoadComplete,\\r\\n            function () {\\r\\n                ErrorManager.onError(\\\"dalClosedDeals/loadClosedDealsSummaries\\\", \\\"\\\", eErrorSeverity.medium);\\r\\n            }\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function loadClosedDealsSummariesWithThreshold(params, onLoadComplete) {\\r\\n        var ajaxer = new TAjaxer();\\r\\n        params = params || {};\\r\\n\\r\\n        ensurePositionNumber(params);\\r\\n        ensureInstrumentId(params);\\r\\n\\r\\n        ajaxer.get(\\r\\n            \\\"dalClosedDeals/loadClosedDealsSummariesWithThreshold\\\",\\r\\n            \\\"api/closeddeals/LoadClosedDealsSummariesWithThreshold\\\",\\r\\n            general.urlEncode(params),\\r\\n            onLoadComplete,\\r\\n            function () {\\r\\n                ErrorManager.onError(\\\"dalClosedDeals/loadClosedDealsSummaries\\\", \\\"\\\", eErrorSeverity.medium);\\r\\n            }\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function loadRolledOverHistory(filter, onLoadComplete) {\\r\\n        var ajaxer = new TAjaxer(),\\r\\n            positionNumber = filter.PositionNumber,\\r\\n            page = filter.Page,\\r\\n            pageSize = filter.PageSize,\\r\\n            params = \\\"positionNumber=\\\" + positionNumber + \\\"&\\\" +\\r\\n                \\\"page=\\\" + page + \\\"&\\\" +\\r\\n                \\\"pageSize=\\\" + pageSize;\\r\\n\\r\\n        ajaxer.get(\\r\\n            \\\"TDALHistoricalData/loadRolledOverHistory\\\",\\r\\n            \\\"api/closeddeals/LoadRolledOverHistory\\\",\\r\\n            params,\\r\\n            onLoadComplete,\\r\\n            function () {\\r\\n                ErrorManager.onError(\\\"TDALHistoricalData/loadRolledOverHistory\\\", \\\"\\\", eErrorSeverity.medium);\\r\\n            }\\r\\n        );\\r\\n    }\\r\\n\\r\\n    return {\\r\\n        LoadClosedDeals: loadClosedDeals,\\r\\n        LoadRolledOverHistory: loadRolledOverHistory,\\r\\n        LoadClosedDealsSummaries: loadClosedDealsSummaries,\\r\\n        LoadClosedDealsSummariesWithThreshold: loadClosedDealsSummariesWithThreshold\\r\\n    };\\r\\n}\\r\\n;\\ndefine(\\\"dataaccess/dalClosedDeals\\\", [\\\"generalmanagers/ErrorManager\\\",\\\"handlers/general\\\"], (function (global) {\\n    return function () {\\n        var ret, fn;\\n       fn = function (em, general) {\\r\\n\\t\\t\\t\\treturn this.TDALClosedDeals(em, general);\\r\\n\\t\\t\\t};\\n        ret = fn.apply(global, arguments);\\n        return ret || global.TDALClosedDeals;\\n    };\\n}(this)));\\n\\n\",\n    \"define(\\r\\n    'viewmodels/Deals/ClosedDealsModule',\\r\\n    [\\r\\n        'require',\\r\\n        'knockout',\\r\\n        'initdatamanagers/Customer',\\r\\n        'configuration/initconfiguration',\\r\\n        'managers/instrumentTranslationsManager',\\r\\n        'initdatamanagers/SymbolsManager',\\r\\n        'viewmodels/ViewModelBase',\\r\\n        'dataaccess/dalClosedDeals',\\r\\n        'FxNet/LogicLayer/Deal/DealPermissions',\\r\\n        'initdatamanagers/InstrumentsManager',\\r\\n        'handlers/general'\\r\\n    ],\\r\\n    function ClosedDealsModuleDef(require) {\\r\\n        var ko = require('knockout'),\\r\\n            customer = require('initdatamanagers/Customer'),\\r\\n            closedDealsGridSettings = require('configuration/initconfiguration').ClosedDealsConfiguration,\\r\\n            instrumentTranslationsManager = require('managers/instrumentTranslationsManager'),\\r\\n            symbolsManager = require('initdatamanagers/SymbolsManager'),\\r\\n            ViewModelBase = require('viewmodels/ViewModelBase'),\\r\\n            dalClosedDeals = require(\\\"dataaccess/dalClosedDeals\\\"),\\r\\n            dealPermissions = require('FxNet/LogicLayer/Deal/DealPermissions'),\\r\\n            instrumentsManager = require('initdatamanagers/InstrumentsManager'),\\r\\n            general = require('handlers/general');\\r\\n\\r\\n        function ClosedDealsModule() {\\r\\n            var self,\\r\\n                defaultPageSize = 40,\\r\\n                inheritedInstance = general.clone(ViewModelBase),\\r\\n                viewData = {},\\r\\n                filter = {\\r\\n                    positionNumber: ko.observable(),\\r\\n                    instrumentId: ko.observable(),\\r\\n                    instrument: ko.observable(),\\r\\n                    from: ko.observable(),\\r\\n                    to: ko.observable(),\\r\\n                    page: ko.observable(1),\\r\\n                    pagesize: defaultPageSize\\r\\n                },\\r\\n                dsColumns = {\\r\\n                    idField: \\\"positionNumber\\\",\\r\\n                    columns: [\\r\\n                        {\\r\\n                            name: \\\"rowNumber\\\",\\r\\n                            transform: function (value, rIndex) {\\r\\n                                return rIndex;\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"positionNumber\\\",\\r\\n                            dataIndex: eClosedDealsBase.positionNumber\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"orderID\\\",\\r\\n                            dataIndex: eClosedDealsBase.orderID\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"instrumentID\\\",\\r\\n                            dataIndex: eClosedDealsBase.instrumentID\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"instrumentName\\\",\\r\\n                            transform: function (value, rIndex, cIndex, rawRecord) {\\r\\n                                var instrumentId = rawRecord[eClosedDealsBase.instrumentID],\\r\\n                                    dbEnglishName = rawRecord[eClosedDealsBase.instrumentEnglishName];\\r\\n\\r\\n                                var instrumentName = instrumentTranslationsManager.Short(instrumentId);\\r\\n                                if (!general.isEmptyValue(instrumentName)) {\\r\\n                                    return instrumentName;\\r\\n                                } else {\\r\\n                                    return dbEnglishName;\\r\\n                                }\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"specialFontStart\\\",\\r\\n                            dataIndex: eClosedDealsBase.specialFontStart\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"specialFontLength\\\",\\r\\n                            dataIndex: eClosedDealsBase.specialFontLength\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"buyAmount\\\",\\r\\n                            dataIndex: eClosedDealsBase.buyAmount\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"buySymbol\\\",\\r\\n                            transform: function (value, rIndex, cIndex, rawRecord) {\\r\\n                                var symbol = symbolsManager.ExtractSymbolsNames(rawRecord[eClosedDealsBase.instrumentID]);\\r\\n\\r\\n                                if (symbol) {\\r\\n                                    if (rawRecord[eClosedDealsBase.orderDir] == eOrderDir.Buy) {\\r\\n                                        return symbol.base;\\r\\n                                    } else {\\r\\n                                        return symbol.other;\\r\\n                                    }\\r\\n                                }\\r\\n\\r\\n                                return \\\"\\\";\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"sellAmount\\\",\\r\\n                            dataIndex: eClosedDealsBase.sellAmount\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"sellSymbol\\\",\\r\\n                            transform: function (value, rIndex, cIndex, rawRecord) {\\r\\n                                var symbol = symbolsManager.ExtractSymbolsNames(rawRecord[eClosedDealsBase.instrumentID]);\\r\\n\\r\\n                                if (symbol) {\\r\\n                                    if (rawRecord[eClosedDealsBase.orderDir] == eOrderDir.Buy) {\\r\\n                                        return symbol.other;\\r\\n                                    } else {\\r\\n                                        return symbol.base;\\r\\n                                    }\\r\\n                                }\\r\\n\\r\\n                                return \\\"\\\";\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"orderDir\\\",\\r\\n                            dataIndex: eClosedDealsBase.orderDir\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"dealAmount\\\",\\r\\n                            transform: function (value, rIndex, cIndex, rawRecord) {\\r\\n                                if (rawRecord[eClosedDealsBase.orderDir] == eOrderDir.Sell) {\\r\\n                                    return rawRecord[eClosedDealsBase.sellAmount];\\r\\n                                } else {\\r\\n                                    return rawRecord[eClosedDealsBase.buyAmount];\\r\\n                                }\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"dealType\\\",\\r\\n                            dataIndex: eClosedDealsBase.dealType\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"valueDate\\\",\\r\\n                            dataIndex: eClosedDealsBase.valueDate\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"positionStart\\\",\\r\\n                            dataIndex: eClosedDealsSummaries.positionStart\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"positionStartFormatted\\\",\\r\\n                            dataIndex: eClosedDealsSummaries.positionStart,\\r\\n                            transform: function (value) {\\r\\n                                return formatDateString(value);\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"positionStartNormalized\\\",\\r\\n                            dataIndex: eClosedDealsSummaries.positionStart,\\r\\n                            transform: function (value) {\\r\\n                                return normalizeShortDateString(value);\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"executionTime\\\",\\r\\n                            dataIndex: eClosedDealsBase.executionTime\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"executionTimeFormatted\\\",\\r\\n                            dataIndex: eClosedDealsBase.executionTime,\\r\\n                            transform: function (value) {\\r\\n                                return formatDateString(value);\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"executionTimeNormalized\\\",\\r\\n                            dataIndex: eClosedDealsBase.executionTime,\\r\\n                            transform: function (value) {\\r\\n                                return normalizeShortDateString(value);\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"forwardPips\\\",\\r\\n                            dataIndex: eClosedDealsBase.forwardPips\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"originalPosNum\\\",\\r\\n                            dataIndex: eClosedDealsSummaries.originalPosNum\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"orderRateOpen\\\",\\r\\n                            dataIndex: eClosedDealsSummaries.orderRateOpen,\\r\\n                            transform: function (value, rIndex, cIndex, rawRecord) {\\r\\n                                var instrumentId = rawRecord[eClosedDealsBase.instrumentID],\\r\\n                                    decimals = rawRecord[eClosedDealsBase.decimalDigit];\\r\\n\\r\\n                                return Format.toRate(value, true, instrumentId, decimals);\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"orderRateOpenNumeric\\\",\\r\\n                            dataIndex: eClosedDealsSummaries.orderRateOpen,\\r\\n                            transform: function (value) {\\r\\n                                return general.toNumeric(value);\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"orderRateClosed\\\",\\r\\n                            dataIndex: eClosedDealsSummaries.orderRateClosed,\\r\\n                            transform: function (value, rIndex, cIndex, rawRecord) {\\r\\n                                var instrumentId = rawRecord[eClosedDealsBase.instrumentID],\\r\\n                                    decimals = rawRecord[eClosedDealsBase.decimalDigit];\\r\\n\\r\\n                                return Format.toRate(value, true, instrumentId, decimals);\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"orderRateClosedNumeric\\\",\\r\\n                            dataIndex: eClosedDealsSummaries.orderRateClosed,\\r\\n                            transform: function (value) {\\r\\n                                return general.toNumeric(value);\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"pl\\\",\\r\\n                            dataIndex: eClosedDealsSummaries.pl\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"plAsNumber\\\",\\r\\n                            dataIndex: eClosedDealsSummaries.pl,\\r\\n                            transform: function (value) {\\r\\n                                return general.toNumeric(value);\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"plCCY\\\",\\r\\n                            dataIndex: eClosedDealsSummaries.plCCY\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"plCCYAsNumber\\\",\\r\\n                            dataIndex: eClosedDealsSummaries.plCCY,\\r\\n                            transform: function (value) {\\r\\n                                return general.toNumeric(value);\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"plSymbol\\\",\\r\\n                            transform: function (value, rIndex, cIndex, rawRecord) {\\r\\n                                var symbol = symbolsManager.ExtractSymbolsNames(rawRecord[eClosedDealsBase.instrumentID]);\\r\\n\\r\\n                                if (symbol) {\\r\\n                                    return symbol.other;\\r\\n                                }\\r\\n\\r\\n                                return \\\"\\\";\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"hasAdditionalPL\\\",\\r\\n                            transform: function (value, rIndex, cIndex, rawRecord) {\\r\\n                                return Number(rawRecord[eClosedDealsSummaries.additionalPL]) !== 0;\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"plSign\\\",\\r\\n                            dataIndex: eClosedDealsSummaries.pl,\\r\\n                            transform: function (value) {\\r\\n                                return value.sign();\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"adj\\\",\\r\\n                            dataIndex: eClosedDealsSummaries.originalPosNum,\\r\\n                            transform: function (value, rIndex, cIndex, rawRecord) {\\r\\n                                if (customer.prop.dealPermit == eDealPermit.Islamic) {\\r\\n                                    return false;\\r\\n                                }\\r\\n\\r\\n                                if (!rawRecord[eClosedDealsBase.valueDate]) {\\r\\n                                    return true;\\r\\n                                }\\r\\n\\r\\n                                return general.isPos(value);\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"instrumentShortName\\\",\\r\\n                            transform: function (value, rIndex, cIndex, rawRecord) {\\r\\n                                return instrumentTranslationsManager.Short(rawRecord[eClosedDealsBase.instrumentID]);\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"spreadDiscount\\\",\\r\\n                            dataIndex: eClosedDealsSummaries.spreadDiscount\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"commission\\\",\\r\\n                            dataIndex: eClosedDealsSummaries.commission\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"grossPL\\\",\\r\\n                            transform: function (value, rIndex, cIndex, rawRecord) {\\r\\n                                if (dealPermissions.CustomerDealPermit() === eDealPermit.ZeroSpread) {\\r\\n                                    return (general.toNumeric(rawRecord[eClosedDealsSummaries.pl]) + general.toNumeric(rawRecord[eClosedDealsSummaries.commission])).toFixed(2).toString();\\r\\n                                }\\r\\n\\r\\n                                if (dealPermissions.HasSpreadDiscount()) {\\r\\n                                    return (general.toNumeric(rawRecord[eClosedDealsSummaries.pl]) - general.toNumeric(rawRecord[eClosedDealsSummaries.spreadDiscount])).toFixed(2).toString();\\r\\n                                }\\r\\n\\r\\n                                return rawRecord[eClosedDealsSummaries.pl];\\r\\n                            }\\r\\n                        },\\r\\n                        {\\r\\n                            name: \\\"isStock\\\",\\r\\n                            transform: function (value, rIndex, cIndex, rawRecord) {\\r\\n                                var instrumentId = rawRecord[eClosedDealsBase.instrumentID];\\r\\n\\r\\n                                return instrumentsManager.IsInstrumentStock(instrumentId);\\r\\n                            }\\r\\n                        }\\r\\n                    ],\\r\\n                    statusField: \\\"status\\\",\\r\\n                    totalField: \\\"totalItems\\\",\\r\\n                    dataField: \\\"closedDealSummary\\\",\\r\\n                    pagination: {\\r\\n                        pagesPerPage: 5,\\r\\n                        pageIndexField: \\\"page\\\",\\r\\n                        pageSizeField: \\\"pagesize\\\"\\r\\n                    },\\r\\n                    Filter: filter,\\r\\n                    DAL: {\\r\\n                        reference: dalClosedDeals.LoadClosedDealsSummariesWithThreshold,\\r\\n                        callerName: \\\"ClosedDealsViewModel/getLastClosedDeals\\\",\\r\\n                        errorSeverity: eErrorSeverity.medium\\r\\n                    }\\r\\n                };\\r\\n\\r\\n            var dataSet = new ObservableDataSet(ko, general, dsColumns, { enabled: true, sortProperty: 'executionTimeNormalized', asc: false });\\r\\n\\r\\n            function init(customSettings) {\\r\\n                self = this;\\r\\n                inheritedInstance.setSettings(self, customSettings);\\r\\n\\r\\n                setObservables();\\r\\n                setComputables();\\r\\n                setExtenders();\\r\\n\\r\\n                setFilterDefaults();\\r\\n\\r\\n                dataSet.Init();\\r\\n            }\\r\\n\\r\\n            function setObservables() {\\r\\n                viewData.isOpenedInDialog = ko.observable(false);\\r\\n                viewData.ccyPairs = ko.observableArray([]);\\r\\n            }\\r\\n\\r\\n            function setComputables() {\\r\\n                viewData.isApplyButtonEnabled = ko.computed(function () {\\r\\n                    return !dataSet.IsLoadingData();\\r\\n                }, self);\\r\\n            }\\r\\n\\r\\n            function setExtenders() {\\r\\n                filter.positionNumber = filter.positionNumber.extend({\\r\\n                    toNumericLength: {\\r\\n                        ranges: [{\\r\\n                            from: 0, to: Number.MAX_SAFE_INTEGER, decimalDigits: 0\\r\\n                        }]\\r\\n                    }\\r\\n                });\\r\\n\\r\\n                filter.from.extend({\\r\\n                    validation: {\\r\\n                        validator: function (v) {\\r\\n                            return general.str2Date(v) <= general.str2Date(filter.to());\\r\\n                        }\\r\\n                    }\\r\\n                });\\r\\n\\r\\n                filter.to.extend({\\r\\n                    validation: {\\r\\n                        validator: function (v) {\\r\\n                            return general.str2Date(v) >= general.str2Date(filter.from());\\r\\n                        }\\r\\n                    }\\r\\n                });\\r\\n            }\\r\\n\\r\\n            function setFilterDefaults() {\\r\\n                filter.positionNumber(\\\"\\\");\\r\\n                filter.instrumentId(Number.MAX_SAFE_INTEGER);\\r\\n                filter.instrument();\\r\\n                filter.from((new Date()).AddWeeks(-1).ExtractDateUTC());\\r\\n                filter.to((new Date()).ExtractDateUTC());\\r\\n                filter.page(1);\\r\\n\\r\\n                filter.pagesize = inheritedInstance.getSettings(self).pageSize || filter.pagesize;\\r\\n\\r\\n                if (inheritedInstance.getSettings(self).threshold) {\\r\\n                    filter.threshold = inheritedInstance.getSettings(self).threshold;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            function filterIsValid() {\\r\\n                return filter.from.isValid() && filter.to.isValid();\\r\\n            }\\r\\n\\r\\n            function applyFilter(useDefault) {\\r\\n                if (viewData.isApplyButtonEnabled()) {\\r\\n                    if (useDefault || !filterIsValid()) {\\r\\n                        setFilterDefaults()\\r\\n                    }\\r\\n\\r\\n                    dataSet.ApplyFilter();\\r\\n                }\\r\\n            }\\r\\n\\r\\n            function normalizeShortDateString(value) {\\r\\n                var arr = value.split(' ');\\r\\n                var datePartArray = arr[0].split('/');\\r\\n\\r\\n                arr[0] = datePartArray[2] + datePartArray[1] + datePartArray[0];\\r\\n\\r\\n                var retString = arr.join('').replace(/[/\\\\|:| ]/g, '');\\r\\n                return retString;\\r\\n            }\\r\\n\\r\\n            function formatDateString(dateString) {\\r\\n                var splitDate = general.SplitDateTime(dateString);\\r\\n\\r\\n                return splitDate.date + \\\" \\\" + splitDate.time;\\r\\n            }\\r\\n\\r\\n            return {\\r\\n                init: init,\\r\\n                DataSet: dataSet,\\r\\n                HasRecords: dataSet.HasRecords,\\r\\n                ViewData: viewData,\\r\\n                ClosedDeals: dataSet.DataRows,\\r\\n                Filter: {\\r\\n                    Position: filter.positionNumber,\\r\\n                    InstrumentId: filter.instrumentId,\\r\\n                    Instrument: filter.instrument,\\r\\n                    From: filter.from,\\r\\n                    To: filter.to\\r\\n                },\\r\\n                ApplyFilter: applyFilter,\\r\\n                DsColumns: dsColumns,\\r\\n                SetSorting: dataSet.SetSorting,\\r\\n                SortProperties: dataSet.SortProperties,\\r\\n                DealPermissions: dealPermissions\\r\\n            };\\r\\n        }\\r\\n\\r\\n        var instance = new ClosedDealsModule();\\r\\n\\r\\n        instance.init(closedDealsGridSettings);\\r\\n\\r\\n        return instance;\\r\\n    }\\r\\n);\\r\\n\\n\",\n    \"define(\\r\\n    'deviceviewmodels/AccountClosedDealsViewModel',\\r\\n    [\\r\\n        'require',\\r\\n        'handlers/general',\\r\\n        'helpers/KoComponentViewModel',\\r\\n        'viewmodels/Deals/ClosedDealsModule',\\r\\n        'devicemanagers/ViewModelsManager',\\r\\n        'configuration/initconfiguration'\\r\\n    ],\\r\\n    function AccountClosedDealsDef(require) {\\r\\n        var general = require('handlers/general'),\\r\\n            koComponentViewModel = require('helpers/KoComponentViewModel'),\\r\\n            closedDealsModule = require('viewmodels/Deals/ClosedDealsModule'),\\r\\n            viewModelsManager = require('devicemanagers/ViewModelsManager'),\\r\\n            initConfiguration = require(\\\"configuration/initconfiguration\\\").ClosedDealsConfiguration;\\r\\n\\r\\n        var AccountClosedDealsViewModel = general.extendClass(koComponentViewModel, function AccountClosedDealsClass() {\\r\\n            var self = this,\\r\\n                parent = this.parent, // inherited from KoComponentViewModel\\r\\n                originalFilter;\\r\\n\\r\\n            function init() {\\r\\n                parent.init.call(self);\\r\\n\\r\\n                initFilter();\\r\\n\\r\\n                closedDealsModule.ApplyFilter();\\r\\n            }\\r\\n\\r\\n            function initFilter() {\\r\\n                var posNum = viewModelsManager.VManager.GetViewArgsByKeyName(eViewTypes.vClosedDealsDialog, 'posNum'),\\r\\n                    closedDealsModuleFilter = closedDealsModule.Filter;\\r\\n\\r\\n                if (general.isDefinedType(posNum)) {\\r\\n                    originalFilter = {\\r\\n                        position: closedDealsModuleFilter.Position(),\\r\\n                        instrument: closedDealsModuleFilter.Instrument(),\\r\\n                        from: closedDealsModuleFilter.From(),\\r\\n                        to: closedDealsModuleFilter.To()\\r\\n                    }\\r\\n\\r\\n                    closedDealsModule.ViewData.isOpenedInDialog(true);\\r\\n                    closedDealsModuleFilter.Position(posNum);\\r\\n                    closedDealsModuleFilter.InstrumentId(Number.MAX_SAFE_INTEGER);\\r\\n                    closedDealsModuleFilter.Instrument();\\r\\n                    closedDealsModuleFilter.From(\\\"\\\");\\r\\n                    closedDealsModuleFilter.To(\\\"\\\");\\r\\n                }\\r\\n            }\\r\\n\\r\\n            function dispose() {\\r\\n                if (originalFilter) {\\r\\n                    closedDealsModule.Filter.Position(originalFilter.position);\\r\\n                    closedDealsModule.Filter.Instrument(originalFilter.instrument);\\r\\n                    closedDealsModule.Filter.From(originalFilter.from);\\r\\n                    closedDealsModule.Filter.To(originalFilter.to);\\r\\n\\r\\n                    closedDealsModule.ViewData.isOpenedInDialog(false);\\r\\n                }\\r\\n\\r\\n                parent.dispose.call(self);\\r\\n            }\\r\\n\\r\\n            return {\\r\\n                init: init,\\r\\n                dispose: dispose,\\r\\n                model: closedDealsModule,\\r\\n                scrollMaxVisible: initConfiguration.scrollMaxVisible,\\r\\n                IsPrintingNow: function () { return false; }\\r\\n            };\\r\\n        });\\r\\n\\r\\n        var createViewModel = function (params) {\\r\\n            var viewModel = new AccountClosedDealsViewModel(params);\\r\\n            viewModel.init();\\r\\n\\r\\n            return viewModel;\\r\\n        };\\r\\n\\r\\n        return {\\r\\n            viewModel: {\\r\\n                createViewModel: createViewModel\\r\\n            }\\r\\n        };\\r\\n    }\\r\\n);\\r\\n\\n\",\n    \"\\ndefine(\\\"fp-web\\\", function(){});\\n\"\n  ]\n}",
  "isBase64": false
}