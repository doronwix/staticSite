{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/Registration/Common/CustomerValidators.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿function CustomerValidators() {\r\n    var blacklist = [],\r\n        validationMethods = {\r\n            passwordnotinblacklist: 'passwordnotinblacklist',\r\n            passwordnotcustomerfullname: 'passwordnotcustomerfullname'\r\n        };\r\n\r\n    function addValidationBlackList() {\r\n        $.validator.unobtrusive.adapters.add(validationMethods.passwordnotinblacklist, [\"param\"],\r\n            function (options) {\r\n                options.rules[validationMethods.passwordnotinblacklist] = true;\r\n                options.messages[validationMethods.passwordnotinblacklist] = options.message;\r\n            }\r\n        );\r\n\r\n        $.validator.addMethod(validationMethods.passwordnotinblacklist,\r\n            function (value) {\r\n                if (!blacklist || !blacklist.length) {\r\n                    return true;\r\n                }\r\n                return blacklist.indexOf(value) === -1;\r\n            }\r\n        );\r\n\r\n        $.get(\r\n            getBlackListUrl()\r\n        ).then(function (response) {\r\n            if (Array.isArray(response)) {\r\n                blacklist = response;\r\n            }\r\n        })\r\n        .done();\r\n    }\r\n\r\n    function getBlackListUrl() {\r\n        var blacklistUrl = \"\";\r\n\r\n        if (UrlResolver.getAssetsPath) {\r\n            blacklistUrl = UrlResolver.combine(\r\n                UrlResolver.getAssetsPath(),\r\n                \"Account\",\r\n                \"PasswordsBlacklist.js\"\r\n            );\r\n        } else {\r\n            var version = UrlResolver.getVersion();\r\n\r\n            if (version) {\r\n                blacklistUrl = Model.CdnPath + Model.jsVirtualPath + '/assets/' + version + '/Account/PasswordsBlacklist.js';\r\n            } else {\r\n                blacklistUrl = Model.jsVirtualPath + '/Account/PasswordsBlacklist';\r\n            }\r\n        } \r\n\r\n        return blacklistUrl;\r\n    }\r\n\r\n    function addValidationCustomerFullName() {\r\n        if (!window.$customer) {\r\n            return;\r\n        }\r\n\r\n        customer = window.$customer;\r\n\r\n        var customerData = {\r\n            firstName: customer.prop.firstName,\r\n            lastName: customer.prop.lastName,\r\n            combinations: [\r\n                customer.prop.firstName + customer.prop.lastName,\r\n                customer.prop.firstName + \" \" + customer.prop.lastName,\r\n                customer.prop.lastName + customer.prop.firstName,\r\n                customer.prop.lastName + \" \" + customer.prop.firstName\r\n            ]\r\n        };\r\n\r\n        $.validator.unobtrusive.adapters.add(validationMethods.passwordnotcustomerfullname, [\"param\"],\r\n            function (options) {\r\n                options.rules[validationMethods.passwordnotcustomerfullname] = true;\r\n                options.messages[validationMethods.passwordnotcustomerfullname] = options.message;\r\n            }\r\n        );\r\n\r\n        $.validator.addMethod(validationMethods.passwordnotcustomerfullname,\r\n            function (value) {\r\n                return (value !== customerData.firstName && value !== customerData.lastName && customerData.combinations.indexOf(value) === -1)\r\n            }\r\n        );\r\n    }\r\n\r\n    return {\r\n        addValidationBlackList: addValidationBlackList,\r\n        addValidationCustomerFullName: addValidationCustomerFullName\r\n    };\r\n}",
  "isBase64": false
}