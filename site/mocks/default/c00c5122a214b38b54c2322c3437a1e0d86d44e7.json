{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/limits/SetLimitsViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿/* global eStartSpinFrom eViewTypes */\r\ndefine(\r\n    'viewmodels/limits/SetLimitsViewModel',\r\n    [\r\n        'require',\r\n        'helpers/ObservableCustomExtender',\r\n        'handlers/general',\r\n        'Dictionary',\r\n        'helpers/ObservableHelper',\r\n        'calculators/LimitValuesCalculator',\r\n        'calculators/LimitRangeCalculator',\r\n        'viewmodels/ViewModelBase',\r\n        'viewmodels/limits/RateFieldModel',\r\n        'customEnums/ViewsEnums',\r\n        'global/debounce',\r\n        'initdatamanagers/Customer',\r\n        'cachemanagers/ClientStateFlagsManager',\r\n        'vendor/knockout.validation'\r\n    ],\r\n    function SetLimitsViewModelDef(require) {\r\n        var ko = require('helpers/ObservableCustomExtender'),\r\n            general = require('handlers/general'),\r\n            Dictionary = require('Dictionary'),\r\n            VmHelpers = require('helpers/ObservableHelper'),\r\n            LimitValuesCalculator = require('calculators/LimitValuesCalculator'),\r\n            LimitRangesCalculator = require('calculators/LimitRangeCalculator'),\r\n            ViewModelBase = require('viewmodels/ViewModelBase'),\r\n            RateFieldModel = require('viewmodels/limits/RateFieldModel'),\r\n            debounce = require('global/debounce'),\r\n            customer = require('initdatamanagers/Customer'),\r\n            csFlagsManager = require('cachemanagers/ClientStateFlagsManager');\r\n\r\n        function SetLimitsViewModel() {\r\n            var self,\r\n                observableSetLimitsObject = {\r\n                    SLLimitLabel: {},\r\n                    TPLimitLabel: {}\r\n                },\r\n                parentData,\r\n                inheritedInstance = general.clone(ViewModelBase),\r\n                takeProfitField = new RateFieldModel(),\r\n                stopLossField = new RateFieldModel(),\r\n                viewProperties = {},\r\n                subscriptions = [],\r\n                computables = [];\r\n\r\n            //-------------------------------------------------------\r\n            var eLimitField = {\r\n                SLAmount: 1,\r\n                SLRate: 2,\r\n                SLPercent: 3,\r\n                TPAmount: 4,\r\n                TPRate: 5,\r\n                TPPercent: 6\r\n            };\r\n\r\n            //-------------------------------------------------------\r\n            function init(_parentData, customSettings) {\r\n                self = this;\r\n\r\n                var defaultSettings = {\r\n                    AdvancedMode: true,\r\n                    isAvalibleSetLimits: true,\r\n                    defaultTab: eSetLimitsTabs.Amount,\r\n                    defaultDataState: eViewState.Initial,\r\n                    parentView: eViewTypes.vNewDeal\r\n                };\r\n\r\n                inheritedInstance.setSettings(self, customSettings, defaultSettings);\r\n\r\n                parentData = _parentData;\r\n                registerToParentObservable();\r\n                setDefaults();\r\n                setDefaultObservables();\r\n\r\n                registerObservableStartUpEvent();\r\n                observableSetLimitsObject.State(eViewState.Initial);\r\n\r\n                limitsValdiationModel();\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function registerObservableStartUpEvent() {\r\n                observableSetLimitsObject.State.subscribe(function (stateValue) {\r\n                    switch (stateValue) {\r\n                        case eViewState.Start:\r\n                            onStart();\r\n                            break;\r\n\r\n                        case eViewState.Stop:\r\n                            onStop();\r\n                            break;\r\n                    }\r\n                });\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function onStart() {\r\n                setValidatedExtenders();\r\n                setComputables();\r\n                setSubscribers();\r\n\r\n                setInitial();\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function onStop() {\r\n                unsetSubscribers();\r\n                unsetComputables();\r\n                VmHelpers.CleanKoObservableSimpleObject(observableSetLimitsObject);\r\n\r\n                markClean();\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function limitsValdiationModel() {\r\n                observableSetLimitsObject.stopLossAmount.extend({\r\n                    positiveInteger: {\r\n                        message: Dictionary.GetItem('depCC_InvalidAmount'),\r\n                        params: true\r\n                    }\r\n                });\r\n                observableSetLimitsObject.takeProfitAmount.extend({\r\n                    positiveInteger: {\r\n                        message: Dictionary.GetItem('depCC_InvalidAmount'),\r\n                        params: true\r\n                    }\r\n                });\r\n\r\n                observableSetLimitsObject.displaySLAmount.extend({\r\n                    validation: {\r\n                        validator: function () {\r\n                            return observableSetLimitsObject.stopLossAmount.isValid();\r\n                        },\r\n                        params: observableSetLimitsObject.stopLossAmount\r\n                    }\r\n                });\r\n                observableSetLimitsObject.displayTPAmount.extend({\r\n                    validation: {\r\n                        validator: function () {\r\n                            return observableSetLimitsObject.takeProfitAmount.isValid();\r\n                        },\r\n                        params: observableSetLimitsObject.takeProfitAmount\r\n                    }\r\n                });\r\n\r\n                observableSetLimitsObject.ccySLAmount.extend({\r\n                    validation: {\r\n                        validator: function () {\r\n                            return observableSetLimitsObject.stopLossAmount.isValid();\r\n                        },\r\n                        params: observableSetLimitsObject.stopLossAmount\r\n                    }\r\n                });\r\n                observableSetLimitsObject.ccyTPAmount.extend({\r\n                    validation: {\r\n                        validator: function () {\r\n                            return observableSetLimitsObject.takeProfitAmount.isValid();\r\n                        },\r\n                        params: observableSetLimitsObject.takeProfitAmount\r\n                    }\r\n                });\r\n\r\n                observableSetLimitsObject.stopLossRate.extend({\r\n                    rate: {\r\n                        message: Dictionary.GetItem('limitLevelInvalid'),\r\n                        params: true\r\n                    }\r\n                });\r\n                observableSetLimitsObject.takeProfitRate.extend({\r\n                    rate: {\r\n                        message: Dictionary.GetItem('limitLevelInvalid'),\r\n                        params: true\r\n                    }\r\n                });\r\n\r\n                observableSetLimitsObject.stopLossPercent.extend({\r\n                    min: -0.001,\r\n                    max: 1000.001\r\n                });\r\n                observableSetLimitsObject.takeProfitPercent.extend({\r\n                    min: -0.001,\r\n                    max: 1000.001\r\n                });\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function updateFromInstrument(instrumentId) {\r\n                var instrument = $instrumentsManager.GetInstrument(instrumentId);\r\n\r\n                if (instrument) {\r\n                    observableSetLimitsObject.decimalDigit(instrument.DecimalDigit);\r\n                    setDecimalDigitsValidatorExtenders();\r\n                }\r\n            }\r\n\r\n            function setDecimalDigitsValidatorExtenders() {\r\n                observableSetLimitsObject.stopLossRate.extend({\r\n                    toNumericLength: {\r\n                        ranges: [\r\n                            { from: 0, to: Number.MAX_SAFE_INTEGER, decimalDigits: observableSetLimitsObject.decimalDigit() }\r\n                        ],\r\n                        isAllowNAValue: true\r\n                    }\r\n                });\r\n\r\n                observableSetLimitsObject.takeProfitRate.extend({\r\n                    toNumericLength: {\r\n                        ranges: [\r\n                            { from: 0, to: Number.MAX_SAFE_INTEGER, decimalDigits: observableSetLimitsObject.decimalDigit() }\r\n                        ],\r\n                        isAllowNAValue: true\r\n                    }\r\n                });\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setValidatedExtenders() {\r\n                updateFromInstrument(observableSetLimitsObject.instrumentId());\r\n\r\n                subscriptions.push(observableSetLimitsObject.displaySLLimit.subscribe(function (value) {\r\n                    var noSignValue = value.substring(1, value.length),\r\n                        rateValidationRule = {\r\n                            rate: {\r\n                                message: Dictionary.GetItem('limitLevelInvalid'),\r\n                                params: true\r\n                            },\r\n                            min: stopLossField.minValidation(),\r\n                            max: stopLossField.maxValidation()\r\n                        };\r\n\r\n                    // reset SL rate validation\r\n                    observableSetLimitsObject.stopLossRate.rules.removeAll();\r\n                    observableSetLimitsObject.stopLossRate.extend(rateValidationRule);\r\n\r\n                    observableSetLimitsObject.stopLossAmount.rules.removeAll();\r\n                    observableSetLimitsObject.stopLossAmount.extend({\r\n                        validation: {\r\n                            validator: function (slAmount) {\r\n                                var min = observableSetLimitsObject.SLLimitLabel.MinAmount(),\r\n                                    max = observableSetLimitsObject.SLLimitLabel.MaxAmount(),\r\n                                    absSlAmount = Math.abs(slAmount);\r\n\r\n                                if (!general.isEmptyValue(slAmount) && !general.isEmptyValue(min) && !general.isEmptyValue(max)) {\r\n                                    return min <= absSlAmount && absSlAmount <= max && observableSetLimitsObject.stopLossRate.isValid();\r\n                                }\r\n\r\n                                return observableSetLimitsObject.stopLossRate.isValid();\r\n                            },\r\n                            params: observableSetLimitsObject.stopLossRate\r\n                        }\r\n                    });\r\n\r\n                    observableSetLimitsObject.stopLossPercent.rules.removeAll();\r\n                    observableSetLimitsObject.stopLossPercent.extend({\r\n                        validation: {\r\n                            validator: function (slPercent) {\r\n                                var min = observableSetLimitsObject.SLLimitLabel.MinPercent(),\r\n                                    max = observableSetLimitsObject.SLLimitLabel.MaxPercent();\r\n\r\n                                if (!general.isEmptyValue(slPercent) && !general.isEmptyValue(min) && !general.isEmptyValue(max)) {\r\n                                    return min <= slPercent && slPercent <= max && observableSetLimitsObject.stopLossRate.isValid();\r\n                                }\r\n\r\n                                return observableSetLimitsObject.stopLossRate.isValid();\r\n                            },\r\n                            params: observableSetLimitsObject.stopLossRate\r\n                        }\r\n                    });\r\n\r\n                    // For the UI\r\n                    var splitRate = Format.tenthOfPipSplitRate(noSignValue, observableSetLimitsObject.instrumentId());\r\n\r\n                    observableSetLimitsObject.SLLimitLabel.First(splitRate.label.first);\r\n                    observableSetLimitsObject.SLLimitLabel.Last(splitRate.label.last);\r\n                }));\r\n\r\n                subscriptions.push(observableSetLimitsObject.displayTPLimit.subscribe(function (value) {\r\n                    var noSignValue = value.substring(1, value.length),\r\n                        rateValidationRule = {\r\n                            rate: {\r\n                                message: Dictionary.GetItem('limitLevelInvalid'),\r\n                                params: true\r\n                            },\r\n                            min: takeProfitField.minValidation(),\r\n                            max: takeProfitField.maxValidation()\r\n                        };\r\n\r\n                    // reset TP rate validation\r\n                    observableSetLimitsObject.takeProfitRate.rules.removeAll();\r\n                    observableSetLimitsObject.takeProfitRate.extend(rateValidationRule);\r\n\r\n                    observableSetLimitsObject.takeProfitAmount.rules.removeAll();\r\n                    observableSetLimitsObject.takeProfitAmount.extend({\r\n                        validation: {\r\n                            validator: function (tpAmount) {\r\n                                var min = observableSetLimitsObject.TPLimitLabel.MinAmount(),\r\n                                    max = observableSetLimitsObject.TPLimitLabel.MaxAmount(),\r\n                                    absTpAmount = Math.abs(tpAmount);\r\n\r\n                                if (!general.isEmptyValue(tpAmount) && !general.isEmptyValue(min) && !general.isEmptyValue(max)) {\r\n                                    return min <= absTpAmount && absTpAmount <= max && observableSetLimitsObject.takeProfitRate.isValid();\r\n                                }\r\n\r\n                                return observableSetLimitsObject.takeProfitRate.isValid();\r\n                            },\r\n                            params: observableSetLimitsObject.takeProfitRate\r\n                        }\r\n                    });\r\n\r\n                    observableSetLimitsObject.takeProfitPercent.rules.removeAll();\r\n                    observableSetLimitsObject.takeProfitPercent.extend({\r\n                        validation: {\r\n                            validator: function (tpPercent) {\r\n                                var min = observableSetLimitsObject.TPLimitLabel.MinPercent(),\r\n                                    max = observableSetLimitsObject.TPLimitLabel.MaxPercent();\r\n\r\n                                if (!general.isEmptyValue(tpPercent) && !general.isEmptyValue(min) && !general.isEmptyValue(max)) {\r\n                                    return min <= tpPercent && tpPercent <= max && observableSetLimitsObject.takeProfitRate.isValid();\r\n                                }\r\n\r\n                                return observableSetLimitsObject.takeProfitRate.isValid();\r\n                            },\r\n                            params: observableSetLimitsObject.takeProfitRate\r\n                        }\r\n                    });\r\n\r\n                    // For the UI\r\n                    var splitRate = Format.tenthOfPipSplitRate(noSignValue, observableSetLimitsObject.instrumentId());\r\n\r\n                    observableSetLimitsObject.TPLimitLabel.First(splitRate.label.first);\r\n                    observableSetLimitsObject.TPLimitLabel.Last(splitRate.label.last);\r\n                }));\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function unsetComputables() {\r\n                if (computables.length > 0) {\r\n                    for (var i = 0; i < computables.length; i++) {\r\n                        computables[i].dispose();\r\n                    }\r\n                }\r\n\r\n                computables.length = 0;\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setComputables() {\r\n                observableSetLimitsObject.SLLimit = ko.computed(setCalculatedSLRange, observableSetLimitsObject).extend({\r\n                    dirty: false\r\n                });\r\n                computables.push(observableSetLimitsObject.SLLimit);\r\n\r\n                observableSetLimitsObject.TPLimit = ko.computed(setCalculatedTPRange, observableSetLimitsObject).extend({\r\n                    dirty: false\r\n                });\r\n                computables.push(observableSetLimitsObject.TPLimit);\r\n\r\n                observableSetLimitsObject.isRangeChanged = ko.computed(function () {\r\n                    var slLimitValue = observableSetLimitsObject.SLLimit();\r\n                    var tpLimitValue = observableSetLimitsObject.TPLimit();\r\n\r\n                    return (!general.isEmptyType(slLimitValue) && general.toNumeric(slLimitValue.substring(1, slLimitValue.length)) > 0) ||\r\n                        (!general.isEmptyType(tpLimitValue) && general.toNumeric(tpLimitValue.substring(1, tpLimitValue.length)) > 0);\r\n                });\r\n                computables.push(observableSetLimitsObject.isRangeChanged);\r\n\r\n                observableSetLimitsObject.showsAvalibleSetLimits = ko.computed(function () {\r\n                    if (general.isDefinedType(observableSetLimitsObject.limitCalc())) {\r\n                        if (observableSetLimitsObject.isShowTabs() == false && inheritedInstance.getSettings(self).isAvalibleSetLimits && observableSetLimitsObject.limitCalc().isDirty())\r\n                            return true;\r\n                        else\r\n                            return false;\r\n                    } else {\r\n                        if (observableSetLimitsObject.isShowTabs() == false && inheritedInstance.getSettings(self).isAvalibleSetLimits)\r\n                            return true;\r\n                        else\r\n                            return false;\r\n                    }\r\n                }, observableSetLimitsObject);\r\n                computables.push(observableSetLimitsObject.showsAvalibleSetLimits);\r\n\r\n                observableSetLimitsObject.isSlRateDirty = ko.computed(function () {\r\n                    var slRate = observableSetLimitsObject.stopLossRate.isDirty() && observableSetLimitsObject.stopLossRate.isValid();\r\n                    var isSlNoneTab = observableSetLimitsObject.curSlActiveTab() == eSetLimitsTabs.None;\r\n                    var isSlRateTab = observableSetLimitsObject.curSlActiveTab() == eSetLimitsTabs.Rate;\r\n                    var isDirty = (isSlNoneTab || isSlRateTab) && slRate;\r\n\r\n                    return isDirty;\r\n                }).extend({ notify: 'always' });\r\n                computables.push(observableSetLimitsObject.isSlRateDirty);\r\n\r\n                observableSetLimitsObject.isSlAmountDirty = ko.computed(function () {\r\n                    var slAmount = observableSetLimitsObject.stopLossAmount.isDirty() && observableSetLimitsObject.stopLossAmount.isValid();\r\n                    var isSlNoneTab = observableSetLimitsObject.curSlActiveTab() == eSetLimitsTabs.None;\r\n                    var isSlAmountTab = observableSetLimitsObject.curSlActiveTab() == eSetLimitsTabs.Amount;\r\n                    var isDirty = (isSlNoneTab || isSlAmountTab) && slAmount;\r\n\r\n                    return isDirty;\r\n                }).extend({ notify: 'always' });\r\n                computables.push(observableSetLimitsObject.isSlAmountDirty);\r\n\r\n                observableSetLimitsObject.isSlPercentDirty = ko.computed(function () {\r\n                    var slPercent = observableSetLimitsObject.stopLossPercent.isDirty() && observableSetLimitsObject.stopLossPercent.isValid();\r\n                    var isSlNoneTab = observableSetLimitsObject.curSlActiveTab() == eSetLimitsTabs.None;\r\n                    var isSlPercentTab = observableSetLimitsObject.curSlActiveTab() == eSetLimitsTabs.Percent;\r\n                    var isDirty = (isSlNoneTab || isSlPercentTab) && slPercent;\r\n\r\n                    return isDirty;\r\n                }).extend({ notify: 'always' });\r\n                computables.push(observableSetLimitsObject.isSlPercentDirty);\r\n\r\n                observableSetLimitsObject.isTpRateDirty = ko.computed(function () {\r\n                    var tpRate = observableSetLimitsObject.takeProfitRate.isDirty() && observableSetLimitsObject.takeProfitRate.isValid();\r\n                    var isTpNoneTab = observableSetLimitsObject.curTpActiveTab() == eSetLimitsTabs.None;\r\n                    var isTpRateTab = observableSetLimitsObject.curTpActiveTab() == eSetLimitsTabs.Rate;\r\n                    var isDirty = (isTpNoneTab || isTpRateTab) && tpRate;\r\n\r\n                    return isDirty;\r\n                }).extend({ notify: 'always' });\r\n                computables.push(observableSetLimitsObject.isTpRateDirty);\r\n\r\n                observableSetLimitsObject.isTpAmountDirty = ko.computed(function () {\r\n                    var tpAmount = observableSetLimitsObject.takeProfitAmount.isDirty() && observableSetLimitsObject.takeProfitAmount.isValid();\r\n                    var isTpNoneTab = observableSetLimitsObject.curTpActiveTab() == eSetLimitsTabs.None;\r\n                    var isTpAmountTab = observableSetLimitsObject.curTpActiveTab() == eSetLimitsTabs.Amount;\r\n                    var isDirty = (isTpNoneTab || isTpAmountTab) && tpAmount;\r\n\r\n                    return isDirty;\r\n                }).extend({ notify: 'always' });\r\n                computables.push(observableSetLimitsObject.isTpAmountDirty);\r\n\r\n                observableSetLimitsObject.isTpPercentDirty = ko.computed(function () {\r\n                    var slAmount = observableSetLimitsObject.stopLossPercent.isDirty() && observableSetLimitsObject.stopLossPercent.isValid();\r\n                    var isTpNoneTab = observableSetLimitsObject.curTpActiveTab() == eSetLimitsTabs.None;\r\n                    var isTpPercentTab = observableSetLimitsObject.curTpActiveTab() == eSetLimitsTabs.Percent;\r\n                    var isDirty = (isTpNoneTab || isTpPercentTab) && slAmount;\r\n\r\n                    return isDirty;\r\n                }).extend({ notify: 'always' });\r\n                computables.push(observableSetLimitsObject.isTpPercentDirty);\r\n\r\n                observableSetLimitsObject.isDirty = ko.computed(function () {\r\n                    var isDirty = observableSetLimitsObject.isSlRateDirty() ||\r\n                        observableSetLimitsObject.isSlAmountDirty() ||\r\n                        observableSetLimitsObject.isSlPercentDirty() ||\r\n                        observableSetLimitsObject.isTpRateDirty() ||\r\n                        observableSetLimitsObject.isTpAmountDirty() ||\r\n                        observableSetLimitsObject.isTpPercentDirty();\r\n\r\n                    return isDirty;\r\n                }).extend({ notify: 'always' });\r\n                computables.push(observableSetLimitsObject.isDirty);\r\n\r\n                observableSetLimitsObject.isCustomerCurrency = ko.computed(function () {\r\n\r\n                    return observableSetLimitsObject.customerCcyName() && observableSetLimitsObject.customerCcyName().toLowerCase() == observableSetLimitsObject.symbolName().toLowerCase();\r\n                });\r\n                computables.push(observableSetLimitsObject.isCustomerCurrency);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function registerToParentObservable() {\r\n                observableSetLimitsObject.instrumentId = ko.computed(function () {\r\n                    if (parentData.selectedInstrument)\r\n                        return parentData.selectedInstrument();\r\n                    else if (parentData.instrumentId)\r\n                        return parentData.instrumentId();\r\n                    else if (parentData.instrumentID)\r\n                        return parentData.instrumentID();\r\n                    else\r\n                        return;\r\n                });\r\n\r\n                observableSetLimitsObject.bid = ko.computed(function () {\r\n                    return parentData.bid();\r\n                });\r\n\r\n                observableSetLimitsObject.ask = ko.computed(function () {\r\n                    return parentData.ask();\r\n                });\r\n\r\n                observableSetLimitsObject.open = ko.computed(function () {\r\n                    if (parentData.open)\r\n                        return parentData.open();\r\n                    return;\r\n                });\r\n\r\n                observableSetLimitsObject.close = ko.computed(function () {\r\n                    if (parentData.close)\r\n                        return parentData.close();\r\n                    return;\r\n                });\r\n\r\n                observableSetLimitsObject.change = ko.computed(function () {\r\n                    if (parentData.change)\r\n                        return parentData.change();\r\n                    return;\r\n                });\r\n\r\n                observableSetLimitsObject.ccyPair = ko.computed(function () {\r\n                    if (parentData.ccyPair)\r\n                        return parentData.ccyPair();\r\n                    return;\r\n                });\r\n\r\n                observableSetLimitsObject.orderDir = ko.computed(function () {\r\n                    if (parentData.orderDir)\r\n                        return parentData.orderDir();\r\n                    return;\r\n                });\r\n\r\n                observableSetLimitsObject.quoteForOtherCcyToAccountCcy = ko.computed(function () {\r\n                    if (parentData.quoteForOtherCcyToAccountCcy)\r\n                        return parentData.quoteForOtherCcyToAccountCcy();\r\n                    return;\r\n                }).extend({ empty: true });\r\n\r\n                observableSetLimitsObject.symbolName = ko.computed(function () {\r\n                    if (parentData.symbolName)\r\n                        return parentData.symbolName();\r\n                    if (parentData.baseSymbolName)\r\n                        return parentData.baseSymbolName();\r\n\r\n                    return;\r\n                });\r\n\r\n                observableSetLimitsObject.amountSymbol = ko.computed(function () {\r\n                    if (parentData.amountSymbol)\r\n                        return parentData.amountSymbol();\r\n                    return;\r\n                });\r\n\r\n                observableSetLimitsObject.selectedDealAmount = ko.computed(function () {\r\n                    if (general.isDefinedType(parentData.selectedDealAmount))\r\n                        return general.toNumeric(parentData.selectedDealAmount());\r\n                    else return;\r\n                });\r\n\r\n                observableSetLimitsObject.limitCalc = ko.computed(function () {\r\n                    if (general.isDefinedType(parentData.limitCalc)) {\r\n                        return parentData.limitCalc;\r\n                    }\r\n\r\n                    if (general.isDefinedType(parentData.openLimit)) {\r\n                        return parentData.openLimit;\r\n                    }\r\n\r\n                    return;\r\n                });\r\n\r\n                observableSetLimitsObject.additionalPL = ko.pureComputed(function () {\r\n                    if (general.isDefinedType(parentData.additionalPL))\r\n                        return general.toNumeric(parentData.additionalPL());\r\n                    else return;\r\n                });\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function unsetSubscribers() {\r\n                if (subscriptions.length > 0) {\r\n                    for (var i = 0; i < subscriptions.length; i++) {\r\n                        subscriptions[i].dispose();\r\n                    }\r\n                }\r\n\r\n                subscriptions.length = 0;\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function getRatesforCalculation() {\r\n                var curRates = {\r\n                    bid: observableSetLimitsObject.limitCalc() ? observableSetLimitsObject.limitCalc() : observableSetLimitsObject.bid,\r\n                    ask: observableSetLimitsObject.limitCalc() ? observableSetLimitsObject.limitCalc() : observableSetLimitsObject.ask\r\n                };\r\n\r\n                return curRates;\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function adjustDisplayAmountValue(value) {\r\n                if (!general.isEmptyValue(value) && value !== 'NA') {\r\n                    var numberValue = parseFloat(value);\r\n                    numberValue = Math.abs(numberValue);\r\n                    numberValue = Math.ceil(numberValue);\r\n\r\n                    return numberValue;\r\n                }\r\n\r\n                return value;\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setSubscribers() {\r\n                ///////////////////////////\r\n                // Bid & Ask & DealAmount\r\n                var rates = getRatesforCalculation(),\r\n                    bid = rates.bid,\r\n                    ask = rates.ask;\r\n\r\n                var debouncedRecalculate = debounce(function () {\r\n                    recalculate();\r\n                }, 50);\r\n\r\n                // When bid rate has been changed\r\n                subscriptions.push(bid.subscribe(debouncedRecalculate));\r\n\r\n                // When ask rate has been changed\r\n                subscriptions.push(ask.subscribe(debouncedRecalculate));\r\n\r\n                // When instrument has been changed\r\n                subscriptions.push(observableSetLimitsObject.selectedDealAmount.subscribe(function () {\r\n                    recalculate();\r\n                }));\r\n\r\n                // When orderDir has been changed\r\n                subscriptions.push(observableSetLimitsObject.orderDir.subscribe(debouncedRecalculate));\r\n\r\n                // When quoteForOtherCcyToAccountCcy has been changed\r\n                subscriptions.push(observableSetLimitsObject.quoteForOtherCcyToAccountCcy.subscribe(debouncedRecalculate));\r\n\r\n                subscriptions.push(observableSetLimitsObject.SLLimit.subscribe(function (value) {\r\n                    if (!general.isEmptyValue(value)) {\r\n                        debouncedRecalculate();\r\n                    }\r\n                }));\r\n\r\n                subscriptions.push(observableSetLimitsObject.TPLimit.subscribe(function (value) {\r\n                    if (!general.isEmptyValue(value)) {\r\n                        debouncedRecalculate();\r\n                    }\r\n                }));\r\n\r\n                ///////////////////////////\r\n                // SL Amount\r\n                subscriptions.push(observableSetLimitsObject.stopLossAmount.subscribe(function (value) {\r\n                    if (general.isEmptyType(value)) {\r\n                        observableSetLimitsObject.stopLossPercent('');\r\n                        observableSetLimitsObject.stopLossRate('');\r\n                        observableSetLimitsObject.ccySLAmount('');\r\n                        observableSetLimitsObject.displaySLAmount('');\r\n                    } else if (observableSetLimitsObject.curSlActiveTab() === eSetLimitsTabs.Amount) {\r\n                        calculate(eLimitField.SLAmount);\r\n                        ko.postbox.publish('stop-loss-changed', 'amount');\r\n                    } else {\r\n                        observableSetLimitsObject.displaySLAmount(adjustDisplayAmountValue(value));\r\n                    }\r\n                }));\r\n\r\n                subscriptions.push(observableSetLimitsObject.displaySLAmount.subscribe(function (value) {\r\n                    if (observableSetLimitsObject.curSlActiveTab() === eSetLimitsTabs.Amount) {\r\n                        observableSetLimitsObject.stopLossAmount(value);\r\n                    }\r\n                }));\r\n\r\n                ///////////////////////////\r\n                // SL Percent\r\n                subscriptions.push(observableSetLimitsObject.stopLossPercent.subscribe(function (value) {\r\n\r\n                    if (general.isEmptyType(value)) {\r\n                        observableSetLimitsObject.stopLossAmount('');\r\n                        observableSetLimitsObject.stopLossRate('');\r\n                        observableSetLimitsObject.ccySLAmount('');\r\n                        observableSetLimitsObject.displaySLAmount('');\r\n                    } else if (observableSetLimitsObject.curSlActiveTab() === eSetLimitsTabs.Percent) {\r\n                        calculate(eLimitField.SLPercent);\r\n                        ko.postbox.publish('stop-loss-changed', 'percent');\r\n                    }\r\n\r\n                }));\r\n\r\n                ///////////////////////////\r\n                // SL Rate\r\n                subscriptions.push(observableSetLimitsObject.stopLossRate.subscribe(function (value) {\r\n                    if (general.isEmptyType(value)) {\r\n                        observableSetLimitsObject.stopLossAmount('');\r\n                        observableSetLimitsObject.stopLossPercent('');\r\n                        observableSetLimitsObject.ccySLAmount('');\r\n                        observableSetLimitsObject.displaySLAmount('');\r\n                        observableSetLimitsObject.displaySLSummary(false);\r\n\r\n                        return;\r\n                    } else if (observableSetLimitsObject.curSlActiveTab() === eSetLimitsTabs.Rate || observableSetLimitsObject.curSlActiveTab() == observableSetLimitsObject.defaultTab) {\r\n                        calculate(eLimitField.SLRate);\r\n                        ko.postbox.publish('stop-loss-changed', 'rate');\r\n                    }\r\n\r\n                    var rate = Format.toRate(value, true, observableSetLimitsObject.instrumentId());\r\n                    var splitRate = Format.tenthOfPipSplitRate(rate, observableSetLimitsObject.instrumentId());\r\n\r\n                    observableSetLimitsObject.SLRateLabel.First(splitRate.label.first);\r\n                    observableSetLimitsObject.SLRateLabel.Last(splitRate.label.last);\r\n                    observableSetLimitsObject.displaySLSummary(true);\r\n                }));\r\n\r\n                ///////////////////////////\r\n                // TP Amount\r\n                subscriptions.push(observableSetLimitsObject.takeProfitAmount.subscribe(function (value) {\r\n                    if (general.isEmptyType(value)) {\r\n                        observableSetLimitsObject.takeProfitPercent('');\r\n                        observableSetLimitsObject.takeProfitRate('');\r\n                        observableSetLimitsObject.ccyTPAmount('');\r\n                        observableSetLimitsObject.displayTPAmount('');\r\n                    } else if (observableSetLimitsObject.curTpActiveTab() === eSetLimitsTabs.Amount) {\r\n                        calculate(eLimitField.TPAmount);\r\n                        ko.postbox.publish('take-profit-changed', 'amount');\r\n                    } else {\r\n                        observableSetLimitsObject.displayTPAmount(adjustDisplayAmountValue(value));\r\n                    }\r\n                }));\r\n\r\n                subscriptions.push(observableSetLimitsObject.displayTPAmount.subscribe(function (value) {\r\n                    if (observableSetLimitsObject.curTpActiveTab() === eSetLimitsTabs.Amount) {\r\n                        observableSetLimitsObject.takeProfitAmount(value);\r\n                    }\r\n                }));\r\n\r\n                ///////////////////////////\r\n                // TP Percent\r\n                subscriptions.push(observableSetLimitsObject.takeProfitPercent.subscribe(function (value) {\r\n\r\n                    if (general.isEmptyType(value)) {\r\n                        observableSetLimitsObject.takeProfitAmount('');\r\n                        observableSetLimitsObject.takeProfitRate('');\r\n                        observableSetLimitsObject.ccyTPAmount('');\r\n                        observableSetLimitsObject.displayTPAmount('');\r\n                    } else if (observableSetLimitsObject.curTpActiveTab() === eSetLimitsTabs.Percent) {\r\n                        calculate(eLimitField.TPPercent);\r\n                        ko.postbox.publish('take-profit-changed', 'percent');\r\n                    }\r\n\r\n                }));\r\n\r\n                ///////////////////////////\r\n                // TP Rate\r\n                subscriptions.push(observableSetLimitsObject.takeProfitRate.subscribe(function (value) {\r\n                    if (general.isEmptyType(value)) {\r\n                        observableSetLimitsObject.takeProfitAmount('');\r\n                        observableSetLimitsObject.takeProfitPercent('');\r\n                        observableSetLimitsObject.ccyTPAmount('');\r\n                        observableSetLimitsObject.displayTPAmount('');\r\n                        observableSetLimitsObject.displayTPSummary(false);\r\n\r\n                        return;\r\n                    } else if (observableSetLimitsObject.curTpActiveTab() === eSetLimitsTabs.Rate || observableSetLimitsObject.curTpActiveTab() == observableSetLimitsObject.defaultTab) {\r\n                        calculate(eLimitField.TPRate);\r\n                        ko.postbox.publish('take-profit-changed', 'rate');\r\n                    }\r\n\r\n                    var rate = Format.toRate(value, true, observableSetLimitsObject.instrumentId());\r\n                    var splitRate = Format.tenthOfPipSplitRate(rate, observableSetLimitsObject.instrumentId());\r\n\r\n                    observableSetLimitsObject.TPRateLabel.First(splitRate.label.first);\r\n                    observableSetLimitsObject.TPRateLabel.Last(splitRate.label.last);\r\n                    observableSetLimitsObject.displayTPSummary(true);\r\n                }));\r\n\r\n                // isShowTabs\r\n                subscriptions.push(observableSetLimitsObject.isShowTabs.subscribe(function (value) {\r\n                    if (value === true) {\r\n                        // set SL Rate for edit limit\r\n                        if (parentData.slRate && !general.isEmptyType(parentData.slRate()) && general.toNumeric(parentData.slRate())) {\r\n                            observableSetLimitsObject.stopLossRate(parentData.slRate());\r\n                        } else {\r\n                            observableSetLimitsObject.stopLossRate('');\r\n                        }\r\n\r\n                        // set TP Rate for edit limit\r\n                        if (parentData.tpRate && !general.isEmptyType(parentData.tpRate()) && general.toNumeric(parentData.tpRate())) {\r\n                            observableSetLimitsObject.takeProfitRate(parentData.tpRate());\r\n                        } else {\r\n                            observableSetLimitsObject.takeProfitRate('');\r\n                        }\r\n\r\n                        //make clean so it is not considered dirty\r\n                        markClean();\r\n                    }\r\n                }));\r\n\r\n                // Selected instrument\r\n                subscriptions.push(observableSetLimitsObject.instrumentId.subscribe(function () {\r\n                    updateFromInstrument(observableSetLimitsObject.instrumentId());\r\n                }));\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setDefaults() {\r\n                viewProperties.isNewLimit = function isNewLimit() {\r\n                    return inheritedInstance.getSettings(self).parentView == eViewTypes.vNewLimit;\r\n                };\r\n                viewProperties.isNewDeal = function isNewDeal() {\r\n                    return inheritedInstance.getSettings(self).parentView == eViewTypes.vNewDeal || inheritedInstance.getSettings(self).parentView == eViewTypes.vNewDealSlip;\r\n                };\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function computeAmountLimit(rateBoundary, limitType) {\r\n                var rates = getRatesforCalculation(),\r\n                    rateValue = ko.utils.unwrapObservable(rateBoundary),\r\n                    sign,\r\n                    noSignValue,\r\n                    rateLimit,\r\n                    limitRange;\r\n\r\n                if (!rateValue) {\r\n                    return '';\r\n                }\r\n\r\n                if (observableSetLimitsObject.quoteForOtherCcyToAccountCcy.isEmpty()) {\r\n                    return '';\r\n                }\r\n\r\n                sign = rateValue.substring(0, 1);\r\n                noSignValue = rateValue.substring(1, rateValue.length);\r\n                rateLimit = parseFloat(noSignValue);\r\n\r\n                if (limitType == eLimitType.StopLoss) {\r\n                    limitRange = observableSetLimitsObject.SLRange;\r\n                }\r\n\r\n                if (limitType == eLimitType.TakeProfit) {\r\n                    limitRange = observableSetLimitsObject.TPRange;\r\n                }\r\n\r\n                if (!general.isDefinedType(limitRange)) {\r\n                    return '';\r\n                }\r\n\r\n                if (sign === '>') {\r\n                    rateLimit += 1 / Math.pow(10, (observableSetLimitsObject.decimalDigit()));\r\n                }\r\n\r\n                if (sign === '<') {\r\n                    rateLimit -= 1 / Math.pow(10, (observableSetLimitsObject.decimalDigit()));\r\n                }\r\n\r\n                var values = LimitValuesCalculator.CalculateValuesFromRate(\r\n                    rates.bid(),\r\n                    rates.ask(),\r\n                    rateLimit,\r\n                    observableSetLimitsObject.orderDir(),\r\n                    limitType,\r\n                    observableSetLimitsObject.selectedDealAmount(),\r\n                    limitRange,\r\n                    observableSetLimitsObject.quoteForOtherCcyToAccountCcy(),\r\n                    observableSetLimitsObject.instrumentId()\r\n                );\r\n\r\n                if (!values.isValid) {\r\n                    return '';\r\n                }\r\n\r\n                return values;\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function normalizeMinPercent(floatValue, precision) {\r\n                var multiplier = Math.pow(10, precision);\r\n                return Math.ceil(floatValue * multiplier) / multiplier;\r\n            }\r\n\r\n            function normalizeAbovePercent(floatValue, precision) {\r\n                var multiplier = Math.pow(10, precision);\r\n                return Math.round(floatValue * multiplier) / multiplier;\r\n            }\r\n\r\n            function normalizeMaxPercent(floatValue, precision) {\r\n                var multiplier = Math.pow(10, precision);\r\n                return Math.floor(floatValue * multiplier) / multiplier;\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setDefaultObservables() {\r\n                viewProperties.isAdvancedView = ko.observable(false);\r\n\r\n                observableSetLimitsObject.SLRateLabel = {\r\n                    First: ko.observable(''),\r\n                    Last: ko.observable('')\r\n                };\r\n\r\n                observableSetLimitsObject.TPRateLabel = {\r\n                    First: ko.observable(''),\r\n                    Last: ko.observable('')\r\n                };\r\n\r\n                // Rate\r\n                observableSetLimitsObject.SLLimitLabel.First = ko.observable('');\r\n                observableSetLimitsObject.SLLimitLabel.Last = ko.observable('');\r\n\r\n                // Base CCY Amount\r\n                observableSetLimitsObject.SLLimitLabel.BaseCcyAboveAmount = ko.observable('').extend({ empty: true });\r\n                observableSetLimitsObject.SLLimitLabel.BaseCcyMinAmount = ko.observable('');\r\n                observableSetLimitsObject.SLLimitLabel.BaseCcyMaxAmount = ko.observable('');\r\n\r\n                // Amount\r\n                observableSetLimitsObject.SLLimitLabel.MinAmount = ko.computed(function () {\r\n                    var limitValues = computeAmountLimit(stopLossField.near, eLimitType.StopLoss),\r\n                        amount = '',\r\n                        baseCcyAmount = '',\r\n                        aboveValue = '';\r\n\r\n                    if (!general.isEmptyValue(limitValues)) {\r\n                        amount = Math.abs(Number(limitValues.amount)) || 0;\r\n\r\n                        baseCcyAmount = Math.ceil(Math.abs(Number(limitValues.value))) || 1;\r\n                        aboveValue = baseCcyAmount - 1;\r\n                    }\r\n\r\n                    observableSetLimitsObject.SLLimitLabel.BaseCcyMinAmount(baseCcyAmount);\r\n                    observableSetLimitsObject.SLLimitLabel.BaseCcyAboveAmount(aboveValue);\r\n\r\n                    return amount;\r\n                });\r\n\r\n                observableSetLimitsObject.SLLimitLabel.MaxAmount = ko.computed(function () {\r\n                    var limitValues = computeAmountLimit(stopLossField.far, eLimitType.StopLoss),\r\n                        amount,\r\n                        baseCcyAmount;\r\n\r\n                    if (!general.isEmptyValue(limitValues)) {\r\n                        amount = Math.abs(Number(limitValues.amount)) || 1;\r\n                        baseCcyAmount = Math.floor(Math.abs(Number(limitValues.value))) || 1;\r\n                    }\r\n\r\n                    observableSetLimitsObject.SLLimitLabel.BaseCcyMaxAmount(baseCcyAmount);\r\n\r\n                    return amount;\r\n                });\r\n\r\n                // Percent\r\n                observableSetLimitsObject.SLLimitLabel.AbovePercent = ko.observable('').extend({ empty: true });\r\n\r\n                observableSetLimitsObject.SLLimitLabel.MinPercent = ko.pureComputed(function () {\r\n                    var minPercent,\r\n                        decimalDigit = ko.toJS(observableSetLimitsObject.decimalDigit),\r\n                        orderDir = observableSetLimitsObject.orderDir(),\r\n                        minRate = ko.toJS(stopLossField.minValidation),\r\n                        maxRate = ko.toJS(stopLossField.maxValidation),\r\n                        rates = getRatesforCalculation(),\r\n                        bid = rates.bid(),\r\n                        ask = rates.ask(),\r\n                        aboveValue,\r\n                        limitRate;\r\n\r\n                    if (general.isEmptyValue(bid) || general.isEmptyValue(ask) || general.isEmptyValue(minRate) || general.isEmptyValue(maxRate)) {\r\n                        return;\r\n                    }\r\n\r\n                    if (orderDir === eOrderDir.Sell) {\r\n                        limitRate = minRate + (1 / Math.pow(10, decimalDigit));\r\n                        minPercent = LimitValuesCalculator.CalculatePercentFromRate(bid, limitRate);\r\n                    } else {\r\n                        limitRate = maxRate - (1 / Math.pow(10, decimalDigit));\r\n                        minPercent = LimitValuesCalculator.CalculatePercentFromRate(ask, limitRate);\r\n                    }\r\n\r\n                    minPercent = normalizeMinPercent(minPercent, 2);\r\n                    aboveValue = normalizeAbovePercent(minPercent - (1 / Math.pow(10, 2)), 2);\r\n                    observableSetLimitsObject.SLLimitLabel.AbovePercent(aboveValue);\r\n\r\n                    return minPercent;\r\n                }).extend({ empty: true });\r\n\r\n                observableSetLimitsObject.SLLimitLabel.MaxPercent = ko.pureComputed(function () {\r\n                    var maxPercent,\r\n                        orderDir = observableSetLimitsObject.orderDir(),\r\n                        minRate = ko.toJS(stopLossField.minValidation),\r\n                        maxRate = ko.toJS(stopLossField.maxValidation),\r\n                        rates = getRatesforCalculation(),\r\n                        bid = rates.bid(),\r\n                        ask = rates.ask();\r\n\r\n                    if (general.isEmptyValue(bid) || general.isEmptyValue(ask) || general.isEmptyValue(minRate) || general.isEmptyValue(maxRate)) {\r\n                        return;\r\n                    }\r\n\r\n                    if (orderDir === eOrderDir.Sell) {\r\n                        maxPercent = LimitValuesCalculator.CalculatePercentFromRate(bid, maxRate);\r\n                    } else {\r\n                        maxPercent = LimitValuesCalculator.CalculatePercentFromRate(ask, minRate);\r\n                    }\r\n\r\n                    maxPercent = normalizeMaxPercent(maxPercent, 2);\r\n\r\n                    return maxPercent;\r\n                });\r\n\r\n                // Rate\r\n                observableSetLimitsObject.TPLimitLabel.First = ko.observable('');\r\n                observableSetLimitsObject.TPLimitLabel.Last = ko.observable('');\r\n\r\n                // Base CCY Amount\r\n                observableSetLimitsObject.TPLimitLabel.BaseCcyAboveAmount = ko.observable('').extend({ empty: true });\r\n                observableSetLimitsObject.TPLimitLabel.BaseCcyMinAmount = ko.observable('');\r\n                observableSetLimitsObject.TPLimitLabel.BaseCcyMaxAmount = ko.observable('');\r\n\r\n                // Amount\r\n                observableSetLimitsObject.TPLimitLabel.MinAmount = ko.computed(function () {\r\n                    var limitValues = computeAmountLimit(takeProfitField.near, eLimitType.TakeProfit),\r\n                        amount = '',\r\n                        baseCcyAmount = '',\r\n                        aboveValue = '';\r\n\r\n                    if (!general.isEmptyValue(limitValues)) {\r\n                        amount = Math.abs(Number(limitValues.amount)) || 0;\r\n                        baseCcyAmount = Math.ceil(Math.abs(Number(limitValues.value))) || 1;\r\n                        aboveValue = baseCcyAmount - 1;\r\n                    }\r\n\r\n                    observableSetLimitsObject.TPLimitLabel.BaseCcyMinAmount(baseCcyAmount);\r\n                    observableSetLimitsObject.TPLimitLabel.BaseCcyAboveAmount(aboveValue);\r\n\r\n                    return amount;\r\n                });\r\n\r\n                observableSetLimitsObject.TPLimitLabel.MaxAmount = ko.computed(function () {\r\n                    var limitValues = computeAmountLimit(takeProfitField.far, eLimitType.TakeProfit),\r\n                        amount,\r\n                        baseCcyAmount;\r\n\r\n                    if (!general.isEmptyValue(limitValues)) {\r\n                        amount = Math.abs(Number(limitValues.amount)) || 1;\r\n                        baseCcyAmount = Math.floor(Math.abs(Number(limitValues.value))) || 1;\r\n                    }\r\n\r\n                    observableSetLimitsObject.TPLimitLabel.BaseCcyMaxAmount(baseCcyAmount);\r\n\r\n                    return amount;\r\n                });\r\n\r\n                // Percent\r\n                observableSetLimitsObject.TPLimitLabel.AbovePercent = ko.observable('').extend({ empty: true });\r\n\r\n                observableSetLimitsObject.TPLimitLabel.MinPercent = ko.pureComputed(function () {\r\n                    var minPercent,\r\n                        decimalDigit = ko.toJS(observableSetLimitsObject.decimalDigit),\r\n                        orderDir = observableSetLimitsObject.orderDir(),\r\n                        minRate = ko.toJS(takeProfitField.minValidation),\r\n                        maxRate = ko.toJS(takeProfitField.maxValidation),\r\n                        rates = getRatesforCalculation(),\r\n                        bid = rates.bid(),\r\n                        ask = rates.ask(),\r\n                        aboveValue,\r\n                        limitRate;\r\n\r\n                    if (general.isEmptyValue(bid) || general.isEmptyValue(ask) || general.isEmptyValue(minRate) || general.isEmptyValue(maxRate)) {\r\n                        return;\r\n                    }\r\n\r\n                    if (orderDir === eOrderDir.Sell) {\r\n                        limitRate = maxRate - (1 / Math.pow(10, decimalDigit));\r\n                        minPercent = LimitValuesCalculator.CalculatePercentFromRate(bid, limitRate);\r\n                    } else {\r\n                        limitRate = minRate + (1 / Math.pow(10, decimalDigit));\r\n                        minPercent = LimitValuesCalculator.CalculatePercentFromRate(ask, limitRate);\r\n                    }\r\n\r\n                    minPercent = normalizeMinPercent(minPercent, 2);\r\n                    aboveValue = normalizeAbovePercent(minPercent - (1 / Math.pow(10, 2)), 2);\r\n                    observableSetLimitsObject.TPLimitLabel.AbovePercent(aboveValue);\r\n\r\n                    return minPercent;\r\n                });\r\n\r\n                observableSetLimitsObject.TPLimitLabel.MaxPercent = ko.pureComputed(function () {\r\n                    var maxPercent,\r\n                        orderDir = observableSetLimitsObject.orderDir(),\r\n                        minRate = ko.toJS(takeProfitField.minValidation),\r\n                        maxRate = ko.toJS(takeProfitField.maxValidation),\r\n                        rates = getRatesforCalculation(),\r\n                        bid = rates.bid(),\r\n                        ask = rates.ask();\r\n\r\n                    if (general.isEmptyValue(bid) || general.isEmptyValue(ask) || general.isEmptyValue(minRate) || general.isEmptyValue(maxRate)) {\r\n                        return;\r\n                    }\r\n\r\n                    if (orderDir === eOrderDir.Sell) {\r\n                        maxPercent = LimitValuesCalculator.CalculatePercentFromRate(bid, minRate);\r\n                    } else {\r\n                        maxPercent = LimitValuesCalculator.CalculatePercentFromRate(ask, maxRate);\r\n                    }\r\n\r\n                    maxPercent = normalizeMaxPercent(maxPercent, 2);\r\n\r\n                    return maxPercent;\r\n                });\r\n\r\n                observableSetLimitsObject.stopLossAmount = ko.observable('').extend({\r\n                    dirty: false\r\n                });\r\n\r\n                observableSetLimitsObject.displaySLAmount = ko.observable('').extend({\r\n                    toNumericLength: {\r\n                        ranges: [{\r\n                            from: 0, to: Number.MAX_SAFE_INTEGER, decimalDigits: 0\r\n                        }],\r\n                        isAllowNAValue: true\r\n                    }\r\n                });\r\n\r\n                observableSetLimitsObject.takeProfitAmount = ko.observable('').extend({\r\n                    dirty: false\r\n                });\r\n\r\n                observableSetLimitsObject.displayTPAmount = ko.observable('').extend({\r\n                    toNumericLength: {\r\n                        ranges: [{\r\n                            from: 0, to: Number.MAX_SAFE_INTEGER, decimalDigits: 0\r\n                        }],\r\n                        isAllowNAValue: true\r\n                    }\r\n                });\r\n\r\n                observableSetLimitsObject.stopLossRate = ko.observable('').extend({\r\n                    dirty: false\r\n                });\r\n\r\n                observableSetLimitsObject.takeProfitRate = ko.observable('').extend({\r\n                    dirty: false\r\n                });\r\n\r\n                observableSetLimitsObject.stopLossPercent = ko.observable('').extend({\r\n                    dirty: false,\r\n                    toNumericLength: {\r\n                        ranges: [{\r\n                            from: 0, to: Number.MAX_SAFE_INTEGER, decimalDigits: 2\r\n                        }],\r\n                        isForceCeil: true,\r\n                        isAllowNAValue: true\r\n                    },\r\n                    incremental: {\r\n                        ranges: [\r\n                            { from: 0, to: 0.1, step: 0.01 },\r\n                            { from: 0.1, to: 0.5, step: 0.05 },\r\n                            { from: 0.5, to: 5, step: 0.1 },\r\n                            { from: 5, to: 10, step: 0.5 },\r\n                            { from: 10, to: Number.MAX_VALUE, step: 1 }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                observableSetLimitsObject.takeProfitPercent = ko.observable('').extend({\r\n                    dirty: false,\r\n                    toNumericLength: {\r\n                        ranges: [{\r\n                            from: 0, to: Number.MAX_SAFE_INTEGER, decimalDigits: 2\r\n                        }],\r\n                        isForceCeil: true,\r\n                        isAllowNAValue: true\r\n                    },\r\n                    incremental: {\r\n                        ranges: [\r\n                            { from: 0, to: 0.1, step: 0.01 },\r\n                            { from: 0.1, to: 0.5, step: 0.05 },\r\n                            { from: 0.5, to: 5, step: 0.1 },\r\n                            { from: 5, to: 10, step: 0.5 },\r\n                            { from: 10, to: Number.MAX_VALUE, step: 1 }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                observableSetLimitsObject.ccySLAmount = ko.observable('');\r\n                observableSetLimitsObject.ccyTPAmount = ko.observable('');\r\n\r\n                observableSetLimitsObject.customerCcyName = ko.observable('');\r\n\r\n                observableSetLimitsObject.curSlActiveTab = ko.observable(eSetLimitsTabs.NoTabs);\r\n                observableSetLimitsObject.curTpActiveTab = ko.observable(eSetLimitsTabs.NoTabs);\r\n                observableSetLimitsObject.visibleTab = ko.observable(eSetLimitsTabs.NoTabs);\r\n                observableSetLimitsObject.isShowTabs = ko.observable(false);\r\n                observableSetLimitsObject.isAmountAvailable = general.isDefinedType(inheritedInstance.getSettings(self).showSetLimitsAmountTab) ? inheritedInstance.getSettings(self).showSetLimitsAmountTab : true;\r\n                observableSetLimitsObject.State = ko.observable('');\r\n\r\n                observableSetLimitsObject.displaySLLimit = ko.observable('');\r\n                observableSetLimitsObject.displayTPLimit = ko.observable('');\r\n\r\n                observableSetLimitsObject.SLRange = new LimitRangesCalculator.LimitRange(ko);\r\n                observableSetLimitsObject.TPRange = new LimitRangesCalculator.LimitRange(ko);\r\n\r\n                observableSetLimitsObject.SetActiveTab = setActiveTab;\r\n                observableSetLimitsObject.SetSlActiveTab = setSlActiveTab;\r\n                observableSetLimitsObject.SetTpActiveTab = setTpActiveTab;\r\n\r\n                observableSetLimitsObject.ChangeTabVisibility = changeTabsVisibility;\r\n\r\n                observableSetLimitsObject.decimalDigit = ko.observable(0);\r\n\r\n                observableSetLimitsObject.displaySLSummary = ko.observable(false);\r\n                observableSetLimitsObject.displayTPSummary = ko.observable(false);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function markClean() {\r\n                observableSetLimitsObject.stopLossRate.markClean();\r\n                observableSetLimitsObject.takeProfitRate.markClean();\r\n                observableSetLimitsObject.stopLossAmount.markClean();\r\n                observableSetLimitsObject.takeProfitAmount.markClean();\r\n                observableSetLimitsObject.stopLossPercent.markClean();\r\n                observableSetLimitsObject.takeProfitPercent.markClean();\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function calculate(field) {\r\n                if (observableSetLimitsObject.State() != eViewState.Start) {\r\n                    return;\r\n                }\r\n\r\n                var rates = getRatesforCalculation(),\r\n                    bid = rates.bid,\r\n                    ask = rates.ask;\r\n\r\n                switch (field) {\r\n                    case eLimitField.SLAmount:\r\n\r\n                        var slLimitAmount = LimitValuesCalculator.CalculateValuesFromAmount(\r\n                            bid(),\r\n                            ask(),\r\n                            observableSetLimitsObject.stopLossAmount(),\r\n                            observableSetLimitsObject.orderDir(),\r\n                            eLimitType.StopLoss,\r\n                            observableSetLimitsObject.selectedDealAmount(),\r\n                            observableSetLimitsObject.SLRange,\r\n                            observableSetLimitsObject.quoteForOtherCcyToAccountCcy(),\r\n                            observableSetLimitsObject.instrumentId()\r\n                        );\r\n\r\n                        observableSetLimitsObject.stopLossRate(slLimitAmount.rate);\r\n                        observableSetLimitsObject.stopLossPercent(slLimitAmount.percent);\r\n                        // CCY SL Amount\r\n                        observableSetLimitsObject.ccySLAmount(slLimitAmount.value);\r\n\r\n                        break;\r\n                    case eLimitField.SLRate:\r\n\r\n                        var slLimitRate = LimitValuesCalculator.CalculateValuesFromRate(\r\n                            bid(),\r\n                            ask(),\r\n                            observableSetLimitsObject.stopLossRate(),\r\n                            observableSetLimitsObject.orderDir(),\r\n                            eLimitType.StopLoss,\r\n                            observableSetLimitsObject.selectedDealAmount(),\r\n                            observableSetLimitsObject.SLRange,\r\n                            observableSetLimitsObject.quoteForOtherCcyToAccountCcy(),\r\n                            observableSetLimitsObject.instrumentId(),\r\n                            observableSetLimitsObject.additionalPL()\r\n                        );\r\n\r\n                        observableSetLimitsObject.stopLossAmount(slLimitRate.amount);\r\n                        observableSetLimitsObject.stopLossPercent(slLimitRate.percent);\r\n                        // CCY SL Amount\r\n                        observableSetLimitsObject.ccySLAmount(slLimitRate.value);\r\n\r\n                        break;\r\n                    case eLimitField.SLPercent:\r\n\r\n                        var slLimitPercent = LimitValuesCalculator.CalculateValuesFromPercent(\r\n                            bid(),\r\n                            ask(),\r\n                            observableSetLimitsObject.stopLossPercent(),\r\n                            observableSetLimitsObject.orderDir(),\r\n                            eLimitType.StopLoss,\r\n                            observableSetLimitsObject.selectedDealAmount(),\r\n                            observableSetLimitsObject.SLRange,\r\n                            observableSetLimitsObject.quoteForOtherCcyToAccountCcy(),\r\n                            observableSetLimitsObject.instrumentId()\r\n                        );\r\n\r\n                        observableSetLimitsObject.stopLossRate(slLimitPercent.rate);\r\n                        observableSetLimitsObject.stopLossAmount(slLimitPercent.amount);\r\n                        // CCY SL Amount\r\n                        observableSetLimitsObject.ccySLAmount(slLimitPercent.value);\r\n\r\n                        break;\r\n                    case eLimitField.TPAmount:\r\n\r\n                        var tpLimitAmount = LimitValuesCalculator.CalculateValuesFromAmount(\r\n                            bid(),\r\n                            ask(),\r\n                            observableSetLimitsObject.takeProfitAmount(),\r\n                            observableSetLimitsObject.orderDir(),\r\n                            eLimitType.TakeProfit,\r\n                            observableSetLimitsObject.selectedDealAmount(),\r\n                            observableSetLimitsObject.TPRange,\r\n                            observableSetLimitsObject.quoteForOtherCcyToAccountCcy(),\r\n                            observableSetLimitsObject.instrumentId()\r\n                        );\r\n\r\n                        observableSetLimitsObject.takeProfitRate(tpLimitAmount.rate);\r\n                        observableSetLimitsObject.takeProfitPercent(tpLimitAmount.percent);\r\n                        // CCY TP Amount\r\n                        observableSetLimitsObject.ccyTPAmount(tpLimitAmount.value);\r\n\r\n                        break;\r\n                    case eLimitField.TPRate:\r\n\r\n                        var tpLimitRate = LimitValuesCalculator.CalculateValuesFromRate(\r\n                            bid(),\r\n                            ask(),\r\n                            observableSetLimitsObject.takeProfitRate(),\r\n                            observableSetLimitsObject.orderDir(),\r\n                            eLimitType.TakeProfit,\r\n                            observableSetLimitsObject.selectedDealAmount(),\r\n                            observableSetLimitsObject.TPRange,\r\n                            observableSetLimitsObject.quoteForOtherCcyToAccountCcy(),\r\n                            observableSetLimitsObject.instrumentId(),\r\n                            observableSetLimitsObject.additionalPL()\r\n                        );\r\n\r\n                        observableSetLimitsObject.takeProfitAmount(tpLimitRate.amount);\r\n                        observableSetLimitsObject.takeProfitPercent(tpLimitRate.percent);\r\n                        // CCY TP Amount\r\n                        observableSetLimitsObject.ccyTPAmount(tpLimitRate.value);\r\n\r\n                        break;\r\n                    case eLimitField.TPPercent:\r\n\r\n                        var tpLimitPercent = LimitValuesCalculator.CalculateValuesFromPercent(\r\n                            bid(),\r\n                            ask(),\r\n                            observableSetLimitsObject.takeProfitPercent(),\r\n                            observableSetLimitsObject.orderDir(),\r\n                            eLimitType.TakeProfit,\r\n                            observableSetLimitsObject.selectedDealAmount(),\r\n                            observableSetLimitsObject.TPRange,\r\n                            observableSetLimitsObject.quoteForOtherCcyToAccountCcy(),\r\n                            observableSetLimitsObject.instrumentId()\r\n                        );\r\n\r\n                        observableSetLimitsObject.takeProfitRate(tpLimitPercent.rate);\r\n                        observableSetLimitsObject.takeProfitAmount(tpLimitPercent.amount);\r\n                        // CCY TP Amount\r\n                        observableSetLimitsObject.ccyTPAmount(tpLimitPercent.value);\r\n\r\n                        break;\r\n                }\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function recalculate() {\r\n                /////////////////////////////////////////\r\n                // Amount\r\n                // stop loss amount\r\n                if ((observableSetLimitsObject.curSlActiveTab() === eSetLimitsTabs.Amount) && general.isNumber(observableSetLimitsObject.stopLossAmount())) {\r\n                    calculate(eLimitField.SLAmount);\r\n                }\r\n\r\n                // take profit amount\r\n                if ((observableSetLimitsObject.curTpActiveTab() === eSetLimitsTabs.Amount) && general.isNumber(observableSetLimitsObject.takeProfitAmount())) {\r\n                    calculate(eLimitField.TPAmount);\r\n                }\r\n\r\n                /////////////////////////////////////////\r\n                // Rate\r\n                // stop loss rate\r\n                if ((observableSetLimitsObject.curSlActiveTab() === eSetLimitsTabs.Rate) && general.isNumber(observableSetLimitsObject.stopLossRate())) {\r\n                    calculate(eLimitField.SLRate);\r\n                }\r\n\r\n                // take profit rate\r\n                if ((observableSetLimitsObject.curTpActiveTab() === eSetLimitsTabs.Rate) && general.isNumber(observableSetLimitsObject.takeProfitRate())) {\r\n                    calculate(eLimitField.TPRate);\r\n                }\r\n\r\n                /////////////////////////////////////////\r\n                // Percent\r\n                // stop loss percent\r\n                if ((observableSetLimitsObject.curSlActiveTab() === eSetLimitsTabs.Percent) && general.isNumber(observableSetLimitsObject.stopLossPercent())) {\r\n                    calculate(eLimitField.SLPercent);\r\n                }\r\n\r\n                // take profit percent\r\n                if ((observableSetLimitsObject.curTpActiveTab() === eSetLimitsTabs.Percent) && general.isNumber(observableSetLimitsObject.takeProfitPercent())) {\r\n                    calculate(eLimitField.TPPercent);\r\n                }\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setCalculatedTPRange() {\r\n                var bid = observableSetLimitsObject.bid();\r\n                var ask = observableSetLimitsObject.ask();\r\n\r\n                if (general.isEmptyValue(bid) || general.isEmptyValue(ask)) {\r\n                    observableSetLimitsObject.displayTPLimit('');\r\n                    return '';\r\n                }\r\n\r\n                var validRange = parentData.openLimit ? parentData.openLimit.isValid() : true;\r\n                var orderDir = observableSetLimitsObject.orderDir();\r\n                var instrument = $instrumentsManager.GetInstrument(observableSetLimitsObject.instrumentId());\r\n\r\n                if (!instrument) {\r\n                    return '';\r\n                }\r\n\r\n                if (isIfDone()) {\r\n                    LimitRangesCalculator.CalculateIfDoneRanges(bid, ask, observableSetLimitsObject.orderDir(), observableSetLimitsObject.SLRange, observableSetLimitsObject.TPRange, parentData.openLimit(), instrument, csFlagsManager.CSFlags.limitMultiplier);\r\n                } else {\r\n                    LimitRangesCalculator.CalculateClosingRanges(bid, ask, observableSetLimitsObject.orderDir(), observableSetLimitsObject.SLRange, observableSetLimitsObject.TPRange, instrument, csFlagsManager.CSFlags.limitMultiplier);\r\n                }\r\n\r\n                observableSetLimitsObject.decimalDigit(instrument.DecimalDigit);\r\n\r\n                var nearRate = parseFloat(Format.toRate(observableSetLimitsObject.TPRange.near(), true, instrument.id));\r\n                var farRate = parseFloat(Format.toRate(observableSetLimitsObject.TPRange.far(), true, instrument.id));\r\n\r\n                takeProfitField.precision(instrument.DecimalDigit);\r\n                takeProfitField.pipDigit(instrument.PipDigit);\r\n                takeProfitField.min(orderDir == eOrderDir.Sell ? farRate : nearRate);\r\n                takeProfitField.max(orderDir == eOrderDir.Sell ? nearRate : farRate);\r\n\r\n                var sign = general.addSign(observableSetLimitsObject.orderDir(), eLimitType.TakeProfit);\r\n                var signedRange = sign + Format.toRate(observableSetLimitsObject.TPRange.near(), true, instrument.id);\r\n\r\n                if (sign === '>') {\r\n                    takeProfitField.startSpinFrom(eStartSpinFrom.Above);\r\n                    takeProfitField.near('>' + nearRate);\r\n                    takeProfitField.far('<' + farRate);\r\n                } else {\r\n                    takeProfitField.startSpinFrom(eStartSpinFrom.Below);\r\n                    takeProfitField.near('<' + nearRate);\r\n                    takeProfitField.far('>' + farRate);\r\n                }\r\n\r\n                if (typeof parentData.openLimit !== 'undefined') //=> limit case\r\n                {\r\n                    if (orderDir === eOrderDir.None || !parentData.openLimit.isValid()) {\r\n                        takeProfitField.startSpinFrom(eStartSpinFrom.None);\r\n                    }\r\n                }\r\n\r\n                if (validRange) {\r\n                    observableSetLimitsObject.displayTPLimit(signedRange);\r\n                    return signedRange;\r\n                }\r\n\r\n                observableSetLimitsObject.displayTPLimit('');\r\n                return '';\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setCalculatedSLRange() {\r\n                var bid = observableSetLimitsObject.bid();\r\n                var ask = observableSetLimitsObject.ask();\r\n\r\n                if (general.isEmptyValue(bid) || general.isEmptyValue(ask)) {\r\n                    observableSetLimitsObject.displaySLLimit('');\r\n                    return '';\r\n                }\r\n\r\n                var validRange = parentData.openLimit ? parentData.openLimit.isValid() : true;\r\n                var orderDir = observableSetLimitsObject.orderDir();\r\n                var instrument = $instrumentsManager.GetInstrument(observableSetLimitsObject.instrumentId());\r\n\r\n                if (!instrument) {\r\n                    return '';\r\n                }\r\n\r\n                if (isIfDone()) {\r\n                    LimitRangesCalculator.CalculateIfDoneRanges(bid, ask, observableSetLimitsObject.orderDir(), observableSetLimitsObject.SLRange, observableSetLimitsObject.TPRange, parentData.openLimit(), instrument, csFlagsManager.CSFlags.limitMultiplier);\r\n                } else {\r\n                    LimitRangesCalculator.CalculateClosingRanges(bid, ask, observableSetLimitsObject.orderDir(), observableSetLimitsObject.SLRange, observableSetLimitsObject.TPRange, instrument, csFlagsManager.CSFlags.limitMultiplier);\r\n                }\r\n\r\n                observableSetLimitsObject.decimalDigit(instrument.DecimalDigit);\r\n\r\n                var nearRate = parseFloat(Format.toRate(observableSetLimitsObject.SLRange.near(), true, instrument.id));\r\n                var farRate = parseFloat(Format.toRate(observableSetLimitsObject.SLRange.far(), true, instrument.id));\r\n\r\n                stopLossField.precision(instrument.DecimalDigit);\r\n                stopLossField.pipDigit(instrument.PipDigit);\r\n                stopLossField.min(orderDir == eOrderDir.Sell ? nearRate : farRate);\r\n                stopLossField.max(orderDir == eOrderDir.Sell ? farRate : nearRate);\r\n\r\n                var sign = general.addSign(orderDir, eLimitType.StopLoss);\r\n                var signedRange = sign + Format.toRate(observableSetLimitsObject.SLRange.near(), true, instrument.id);\r\n\r\n                if (sign === '>') {\r\n                    stopLossField.startSpinFrom(eStartSpinFrom.Above);\r\n                    stopLossField.near('>' + nearRate);\r\n                    stopLossField.far('<' + farRate);\r\n                } else {\r\n                    stopLossField.startSpinFrom(eStartSpinFrom.Below);\r\n                    stopLossField.near('<' + nearRate);\r\n                    stopLossField.far('>' + farRate);\r\n                }\r\n\r\n                if (typeof parentData.openLimit !== 'undefined') //=> limit case\r\n                {\r\n                    if (orderDir === eOrderDir.None || !parentData.openLimit.isValid()) {\r\n                        stopLossField.startSpinFrom(eStartSpinFrom.None);\r\n                    }\r\n                }\r\n\r\n                if (validRange) {\r\n                    observableSetLimitsObject.displaySLLimit(signedRange);\r\n                    return signedRange;\r\n                }\r\n\r\n                observableSetLimitsObject.displaySLLimit('');\r\n                return '';\r\n            }\r\n\r\n            function isIfDone() {\r\n                if (parentData.PageName === eDealPage.NewLimitViewModel ||\r\n                    parentData.PageName === eDealPage.EditLimitViewModel ||\r\n                    parentData.PageName === eDealPage.EditIfDoneLimit) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function validate() {\r\n                var err = [];\r\n\r\n                return err.concat(validateSlRate(), validateTpRate());\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function validateSlRate() {\r\n                return !observableSetLimitsObject.stopLossRate.isValid() ?\r\n                    [Dictionary.GetItem('slLeveInvalid')] : [];\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function validateTpRate() {\r\n                return !observableSetLimitsObject.takeProfitRate.isValid() ?\r\n                    [Dictionary.GetItem('tpLeveInvalid')] : [];\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setActiveTab(activeTab) {\r\n                setSlActiveTab(activeTab);\r\n                setTpActiveTab(activeTab);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setSlActiveTab(activeTab) {\r\n                activeTab = activeTab || eSetLimitsTabs.None;\r\n\r\n                if (activeTab == eSetLimitsTabs.None) {\r\n                    // Set SL\r\n                    if (parentData.slRate && ko.isWriteableObservable(parentData.slRate)) {\r\n                        parentData.slRate(Dictionary.GetItem('setLimit'));\r\n                    }\r\n\r\n                    observableSetLimitsObject.stopLossRate('');\r\n                    observableSetLimitsObject.stopLossAmount('');\r\n                    observableSetLimitsObject.stopLossPercent('');\r\n                    observableSetLimitsObject.ccySLAmount('');\r\n\r\n                    // Set TP\r\n                    if (parentData.tpRate && ko.isWriteableObservable(parentData.tpRate)) {\r\n                        parentData.tpRate(Dictionary.GetItem('setLimit'));\r\n                    }\r\n\r\n                    ko.postbox.publish('stop-loss-changed', 'none');\r\n                }\r\n\r\n                observableSetLimitsObject.curSlActiveTab(activeTab);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setTpActiveTab(activeTab) {\r\n                activeTab = activeTab || eSetLimitsTabs.None;\r\n\r\n                if (activeTab == eSetLimitsTabs.None) {\r\n                    // Set TP\r\n                    if (parentData.tpRate && ko.isWriteableObservable(parentData.tpRate)) {\r\n                        parentData.tpRate(Dictionary.GetItem('setLimit'));\r\n                    }\r\n\r\n                    observableSetLimitsObject.takeProfitRate('');\r\n                    observableSetLimitsObject.takeProfitAmount('');\r\n                    observableSetLimitsObject.takeProfitPercent('');\r\n                    observableSetLimitsObject.ccyTPAmount('');\r\n\r\n                    ko.postbox.publish('take-profit-changed', 'none');\r\n                }\r\n\r\n                observableSetLimitsObject.curTpActiveTab(activeTab);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function changeTabsVisibility(tab) {\r\n                tab = tab || eSetLimitsTabs.None;\r\n\r\n                if (tab == eSetLimitsTabs.None) {\r\n                    setActiveTab(tab);\r\n                    observableSetLimitsObject.isShowTabs(false);\r\n                } else {\r\n                    observableSetLimitsObject.isShowTabs(true);\r\n                }\r\n\r\n                ko.postbox.publish('deal-slip-toggle', { limit: tab === eSetLimitsTabs.None ? 'minimized' : 'maximized' });\r\n\r\n                observableSetLimitsObject.visibleTab(tab);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setInitial() {\r\n                observableSetLimitsObject.customerCcyName(customer.prop.defaultCcy());\r\n\r\n                observableSetLimitsObject.isShowTabs(false);\r\n                viewProperties.isAdvancedView(false);\r\n                observableSetLimitsObject.defaultTab = inheritedInstance.getSettings(self).defaultTab;\r\n\r\n                setActiveTab(observableSetLimitsObject.defaultTab);\r\n\r\n                // Set SL\r\n                observableSetLimitsObject.stopLossAmount('');\r\n                observableSetLimitsObject.stopLossPercent('');\r\n                observableSetLimitsObject.ccySLAmount('');\r\n                observableSetLimitsObject.displaySLSummary(false);\r\n\r\n                // Set TP\r\n                observableSetLimitsObject.takeProfitAmount('');\r\n                observableSetLimitsObject.takeProfitPercent('');\r\n                observableSetLimitsObject.ccyTPAmount('');\r\n                observableSetLimitsObject.displayTPSummary(false);\r\n\r\n                // Set SL Rate for edit limit\r\n                if (parentData.slRate && !general.isEmptyType(parentData.slRate()) && general.toNumeric(parentData.slRate())) {\r\n                    observableSetLimitsObject.stopLossRate(parentData.slRate());\r\n                } else {\r\n                    observableSetLimitsObject.stopLossRate('');\r\n                }\r\n\r\n                // Set TP Rate for edit limit\r\n                if (parentData.tpRate && !general.isEmptyType(parentData.tpRate()) && general.toNumeric(parentData.tpRate())) {\r\n                    observableSetLimitsObject.takeProfitRate(parentData.tpRate());\r\n                } else {\r\n                    observableSetLimitsObject.takeProfitRate('');\r\n                }\r\n\r\n                //make clean so it is not considered dirty\r\n                markClean();\r\n\r\n                ko.postbox.publish('stop-loss-changed', 'none');\r\n                ko.postbox.publish('take-profit-changed', 'none');\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function state() {\r\n                return observableSetLimitsObject.State();\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function start(callback) {\r\n                observableSetLimitsObject.State(eViewState.Start);\r\n\r\n                if (general.isFunctionType(callback)) {\r\n                    callback();\r\n                }\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function stop() {\r\n                observableSetLimitsObject.State(eViewState.Stop);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            return {\r\n                TPField: takeProfitField,\r\n                SLField: stopLossField,\r\n                Data: observableSetLimitsObject,\r\n                ObservableSetLimitsObject: observableSetLimitsObject,\r\n                ViewProperties: viewProperties,\r\n                Init: init,\r\n                Validate: validate,\r\n                ValidateSlRate: validateSlRate,\r\n                ValidateTpRate: validateTpRate,\r\n                SetInitial: setInitial,\r\n                MarkClean: markClean,\r\n                SetActiveTab: setActiveTab,\r\n                SetSlActiveTab: setSlActiveTab,\r\n                SetTpActiveTab: setTpActiveTab,\r\n                ChangeTabVisibility: changeTabsVisibility,\r\n                State: state,\r\n                Start: start,\r\n                Stop: stop\r\n            };\r\n        }\r\n\r\n        return SetLimitsViewModel;\r\n    }\r\n);",
  "isBase64": false
}