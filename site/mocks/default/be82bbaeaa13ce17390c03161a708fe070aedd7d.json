{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/Deals/DealMarginViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/Deals/DealMarginViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'FxNet/LogicLayer/Deal/DealMarginCalculator',\r\n        'cachemanagers/InstrumentVolumeManager',\r\n        'dataaccess/dalorder',\r\n        'cachemanagers/ClientStateHolderManager',\r\n        'initdatamanagers/Customer',\r\n        'cachemanagers/PortfolioStaticManager',\r\n        'LoadDictionaryContent!deals_RequireMargin'\r\n    ],\r\n    function DealMarginDef(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            dealMarginCalculator = require('FxNet/LogicLayer/Deal/DealMarginCalculator'),\r\n            instrumentVolumeManager = require('cachemanagers/InstrumentVolumeManager'),\r\n            dalOrders = require('dataaccess/dalorder'),\r\n            csHolderManager = require('cachemanagers/ClientStateHolderManager'),\r\n            customer = require('initdatamanagers/Customer'),\r\n            portfolioManager = require('cachemanagers/PortfolioStaticManager');\r\n\r\n        var DealMarginViewModel = general.extendClass(KoComponentViewModel, function DealMarginClass(_newDealData, _content) {\r\n            var self = this,\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = this.Data, // inherited from KoComponentViewModel\r\n                newDealData = _newDealData || {};\r\n\r\n            var init = function (settings) {\r\n                parent.init.call(self, settings);   // inherited from KoComponentViewModel\r\n\r\n                setObservables();\r\n                setComputables();\r\n                setSubscribers();\r\n\r\n                csHolderManager.OnChange.Add(onClientStateChange);\r\n                onClientStateChange();\r\n            };\r\n\r\n            var getDealMarginPercentage = function () {\r\n                dalOrders.GetDealMarginDetails(newDealData.selectedInstrument()).then(function (result) {\r\n                    data.requiredMarginPercentage(result[0].Result.MarginPercentage);\r\n                }).done();\r\n            };\r\n\r\n            var setObservables = function () {\r\n                data.triggerDealMarginCalculation = ko.observable().extend({ notify: 'always' });\r\n                data.requiredMarginPercentage = ko.observable(\"\");\r\n                data.displayDealMargin = ko.observable(\"\");\r\n                data.prevInstrumentId = ko.observable(\"\");\r\n\r\n                var symbolName = ko.utils.unwrapObservable(newDealData.customerSymbolName);\r\n\r\n                data.currencySymbol = ko.observable(symbolName);\r\n                data.customerSymbolId = ko.observable(customer.prop.baseCcyId());\r\n                data.isDealMarginHigher = ko.observable(false);\r\n                data.spreadWorth = ko.observable();\r\n                data.availableMargin = ko.observable();\r\n            };\r\n\r\n            var setComputables = function () {\r\n                data.dealMargin = self.createComputed(function () {\r\n                    var otherSymbolAmount = 0,\r\n                        baseSymbolAmount = 0,\r\n                        dealRate,\r\n                        instrumentId = newDealData.selectedInstrument(),\r\n                        item = instrumentVolumeManager.InstrumentVolumes.GetItem(instrumentId),\r\n                        orderDir = newDealData.orderDir(),\r\n                        hasLimitLevel = newDealData.openLimit && newDealData.openLimit(),\r\n                        hasPosition = false;\r\n\r\n                    if (item) {\r\n                        otherSymbolAmount = item.OtherSymbolAmount;\r\n                        baseSymbolAmount = item.BaseSymbolAmount;\r\n                        hasPosition = true;\r\n                    }\r\n\r\n                    if (!hasPosition && orderDir == eOrderDir.None) {\r\n                        orderDir = eOrderDir.Buy;\r\n                    }\r\n\r\n                    if (hasLimitLevel) {\r\n                        if (newDealData.openLimit() < newDealData.bid()) {\r\n                            dealRate = Format.toMidRate(newDealData.bid(), newDealData.ask());\r\n                        }\r\n                        else {\r\n                            dealRate = newDealData.openLimit();\r\n                        }\r\n                    } else {\r\n                        dealRate = orderDir == eOrderDir.Sell ? newDealData.bid() : newDealData.ask();\r\n                    }\r\n\r\n                    var params = {\r\n                        'orderDir': orderDir,\r\n                        'dealAmount': general.toNumeric(newDealData.selectedDealAmount()),\r\n                        'dealRate': general.toNumeric(dealRate),\r\n                        'ask': general.toNumeric(newDealData.ask()),\r\n                        'bid': general.toNumeric(newDealData.bid()),\r\n                        'quoteForBaseCcyToAccountCcy': newDealData.quoteForBaseCcyToAccountCcy(),\r\n                        'quoteForOtherCcyToAccountCcy': newDealData.quoteForOtherCcyToAccountCcy(),\r\n                        'otherSymbol': newDealData.amountSymbol(),\r\n                        'baseSymbol': newDealData.baseSymbol(),\r\n                        'hasPosition': hasPosition,\r\n                        'otherSymbolAmount': otherSymbolAmount,\r\n                        'baseSymbolAmount': baseSymbolAmount,\r\n                        'requiredMarginPercentage': hasPosition ? general.toNumeric(data.requiredMarginPercentage()) / 100 : general.toNumeric(data.requiredMarginPercentage())\r\n                    };\r\n\r\n                    data.triggerDealMarginCalculation();\r\n\r\n                    var spreadWorth = dealMarginCalculator.SpreadWorthInAcountCCY(params);\r\n\r\n                    data.spreadWorth(spreadWorth);\r\n\r\n                    var dealMargin = dealMarginCalculator.DealMargin(params);\r\n                    var displayDealMargin = Math.round((dealMargin + spreadWorth) * 100) / 100;\r\n\r\n                    displayDealMargin = Math.abs(displayDealMargin);\r\n                    data.displayDealMargin(displayDealMargin);\r\n\r\n                    return dealMargin;\r\n\r\n                }).extend({ empty: true });\r\n\r\n                data.isDealMarginPositive = self.createComputed(function () {\r\n                    var dealMargin = general.toNumeric(data.dealMargin()),\r\n                        tradingBonus = newDealData && newDealData.isStock && newDealData.isStock() ?\r\n                            general.toNumeric(portfolioManager.Portfolio.tradingBonus) : 0;\r\n\r\n                    if (dealMargin > 0 || (dealMargin <= 0 && Math.abs(dealMargin) < data.spreadWorth())) {\r\n                        if (data.displayDealMargin() >= (data.availableMargin() - tradingBonus)) {\r\n                            data.isDealMarginHigher(true);\r\n                        }\r\n                        else {\r\n                            data.isDealMarginHigher(false);\r\n                        }\r\n\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        data.isDealMarginHigher(false);\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                data.isCompleted = self.createComputed(function () {\r\n                    return !data.dealMargin.isEmpty() && !isNaN(data.dealMargin());\r\n                });\r\n\r\n                data.selectedInstrumentId = self.createComputed(function () {\r\n                    return newDealData.selectedInstrument();\r\n                });\r\n\r\n                data.isBaseEqualWithCustomerCcy = self.createComputed(function () {\r\n                    return newDealData.baseSymbol() === customer.prop.baseCcyId();\r\n                });\r\n            };\r\n\r\n            var setSubscribers = function () {\r\n                self.subscribeAndNotify(data.selectedInstrumentId, function (instrumentId) {\r\n                    var item = instrumentVolumeManager.InstrumentVolumes.GetItem(instrumentId);\r\n\r\n                    if (item) {\r\n                        data.requiredMarginPercentage(item.RequiredMarginPercentage);\r\n                    } else if (data.prevInstrumentId() != instrumentId) {\r\n                        getDealMarginPercentage();\r\n                    }\r\n\r\n                    data.prevInstrumentId(instrumentId);\r\n                });\r\n\r\n                self.addDisposable(\r\n                    ko.postbox.subscribe('deal-slip-error-details', function (error) {\r\n                        if (error.reason == 'OrderError12') {\r\n                            data.triggerDealMarginCalculation(true);\r\n                        }\r\n                    })\r\n                );\r\n            };\r\n\r\n            function onClientStateChange() {\r\n                var csHolder = csHolderManager.CSHolder;\r\n                var availableMargin = general.toNumeric(csHolder.availableMargin);\r\n\r\n                if (customer.prop.baseCcyId() == customer.prop.selectedCcyId()) {\r\n                    data.availableMargin(availableMargin);\r\n                }\r\n                else {\r\n                    var availableMarginConverted = dealMarginCalculator.Convert(availableMargin, newDealData.quoteForUsdCcyToAccountCcy());\r\n\r\n                    data.availableMargin(availableMarginConverted);\r\n                }\r\n            }\r\n\r\n            var dispose = function () {\r\n                csHolderManager.OnChange.Remove(onClientStateChange);\r\n                parent.dispose.call(self);\r\n            };\r\n\r\n            return {\r\n                init: init,\r\n                content: _content,\r\n                dispose: dispose\r\n            };\r\n        });\r\n\r\n        var createViewModel = function (params) {\r\n            var viewModel = new DealMarginViewModel(params.data, params.content);\r\n\r\n            viewModel.init();\r\n\r\n            return viewModel;\r\n        };\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            }\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}