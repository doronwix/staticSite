{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/managers/AdvinionChart/AdvinionChartInitilizer.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "﻿define(\r\n    'managers/AdvinionChart/AdvinionChartInitilizer',\r\n    [\r\n        'require',\r\n        'handlers/general',\r\n        'global/UrlResolver',\r\n        'modules/ThemeSettings',\r\n        'enums/enums'\r\n    ],\r\n    function (require) {\r\n        var general = require('handlers/general'),\r\n            UrlResolver = require('global/UrlResolver'),\r\n            ThemeSettings = require('modules/ThemeSettings');\r\n\r\n        var AdvinionChartInitializer = function () {\r\n            var colors = {\r\n                    white: 'rgba(255,255,255,1)',\r\n                    grey: 'rgba(85, 85, 85,1)',\r\n                    transparentGray: 'rgba(247,247,247,0.8)',\r\n                    transparentWhite: 'rgba(255,255,255,0.8)',\r\n                    transparent: 'rgba(0,0,0,0)',\r\n                    black: 'rgba(0,0,0,1)'\r\n                },\r\n                horizontalLineSolidStyle = [],\r\n                horizontalLineMargin = [2, 0, 0, 0],\r\n                horizontalLineWidth = 1,\r\n                horizontalLineLabelBackground = colors.transparent,\r\n                horizontalLineLabelFont = '10px Verdana',\r\n                horizontalLineLabelAlignment = 'left',\r\n                horizontalLineLabelLeftPadding = 2,\r\n                priceLines = {};\r\n\r\n            priceLines[eChartPriceLineType.CurrentRate] = {\r\n                panelId: 'price',\r\n                lineColor: 'rgba(3,165,217,1)',\r\n                lineWidth: horizontalLineWidth,\r\n                dashStyle: horizontalLineSolidStyle,\r\n                labelColor: 'rgba(0,184,240,1)',\r\n                labelfont: horizontalLineLabelFont,\r\n                labelAlignment: horizontalLineLabelAlignment,\r\n                horizontalPadding: horizontalLineLabelLeftPadding,\r\n                margin: horizontalLineMargin,\r\n                inPriceRange: false,\r\n                labelBackgroundColor: horizontalLineLabelBackground,\r\n                boxColor: 'rgba(0,183,241,1)',\r\n                boxTextColor: colors.white,\r\n                allowDragLine: false\r\n            };\r\n\r\n            priceLines[eChartPriceLineType.LimitLevel] = {\r\n                panelId: 'price',\r\n                lineColor: 'rgba(150,150,150,1)',\r\n                lineWidth: horizontalLineWidth,\r\n                dashStyle: horizontalLineSolidStyle,\r\n                labelColor: 'rgba(150,150,150,1)',\r\n                labelfont: horizontalLineLabelFont,\r\n                labelAlignment: horizontalLineLabelAlignment,\r\n                horizontalPadding: horizontalLineLabelLeftPadding,\r\n                margin: horizontalLineMargin,\r\n                inPriceRange: false,\r\n                labelBackgroundColor: horizontalLineLabelBackground,\r\n                boxColor: 'rgba(150,150,150,1)',\r\n                boxTextColor: colors.white,\r\n                allowDragLine: true\r\n            };\r\n\r\n            priceLines[eChartPriceLineType.StopLoss] = {\r\n                panelId: 'price',\r\n                lineColor: 'rgba(246,87,86,1)',\r\n                lineWidth: horizontalLineWidth,\r\n                dashStyle: horizontalLineSolidStyle,\r\n                labelColor: 'rgba(246,87,86,1)',\r\n                labelfont: horizontalLineLabelFont,\r\n                labelAlignment: horizontalLineLabelAlignment,\r\n                horizontalPadding: horizontalLineLabelLeftPadding,\r\n                margin: horizontalLineMargin,\r\n                inPriceRange: false,\r\n                labelBackgroundColor: horizontalLineLabelBackground,\r\n                boxColor: 'rgba(251,138,142,1)',\r\n                boxTextColor: colors.black,\r\n                allowDragLine: true\r\n            };\r\n\r\n            priceLines[eChartPriceLineType.TakeProfit] = {\r\n                panelId: 'price',\r\n                lineColor: 'rgba(93,185,92,1)',\r\n                lineWidth: horizontalLineWidth,\r\n                dashStyle: horizontalLineSolidStyle,\r\n                labelColor: 'rgba(93,185,92,1)',\r\n                labelfont: horizontalLineLabelFont,\r\n                labelAlignment: horizontalLineLabelAlignment,\r\n                horizontalPadding: horizontalLineLabelLeftPadding,\r\n                margin: horizontalLineMargin,\r\n                inPriceRange: false,\r\n                labelBackgroundColor: horizontalLineLabelBackground,\r\n                boxColor: 'rgba(172,224,133,1)',\r\n                boxTextColor: colors.black,\r\n                allowDragLine: true\r\n            };\r\n\r\n            priceLines[eChartPriceLineType.OpenRate] = {\r\n                panelId: 'price',\r\n                lineColor: 'rgba(150,150,150,1)',\r\n                lineWidth: horizontalLineWidth,\r\n                dashStyle: horizontalLineSolidStyle,\r\n                labelColor: 'rgba(150,150,150,1)',\r\n                labelfont: horizontalLineLabelFont,\r\n                labelAlignment: horizontalLineLabelAlignment,\r\n                horizontalPadding: horizontalLineLabelLeftPadding,\r\n                margin: horizontalLineMargin,\r\n                inPriceRange: false,\r\n                labelBackgroundColor: horizontalLineLabelBackground,\r\n                boxColor: 'rgba(150,150,150,1)',\r\n                boxTextColor: colors.white,\r\n                allowDragLine: false\r\n            };\r\n\r\n            priceLines[eChartPriceLineType.PriceAlertRate] = {\r\n                panelId: 'price',\r\n                lineColor: 'rgba(150,150,150,1)',\r\n                lineWidth: horizontalLineWidth,\r\n                dashStyle: horizontalLineSolidStyle,\r\n                labelColor: 'rgba(150,150,150,1)',\r\n                labelfont: horizontalLineLabelFont,\r\n                labelAlignment: horizontalLineLabelAlignment,\r\n                horizontalPadding: horizontalLineLabelLeftPadding,\r\n                margin: horizontalLineMargin,\r\n                inPriceRange: false,\r\n                labelBackgroundColor: horizontalLineLabelBackground,\r\n                boxColor: 'rgba(150,150,150,1)',\r\n                boxTextColor: colors.white,\r\n                allowDragLine: true\r\n            };\r\n\r\n            var advinionChartInitConfiguration = {\r\n                rootPath: UrlResolver.getStaticJSPath('Scripts/AdvinionChartCustomizations'),\r\n                dataFeedSettings: {\r\n                    instrumentsNumber: 10,\r\n                    comparisonInstrumentsNumber: 10,\r\n                    requestTimeout: 500,\r\n                    searchInstrumentsNumber: 1000,\r\n                    TickMinutes: '2',\r\n                    RateValueMode: 'mid'\r\n                },\r\n                studySettings: [\r\n                    {\r\n                        propertyPath: ['rsi', 'renderitem1', 'drawtype'],\r\n                        value: 'line'\r\n                    }\r\n                ],\r\n                dateFormatSettings: {\r\n                    realtime: 'DD/MM/YYYY HH:mm:ss',\r\n                    minutes: 'DD/MM/YYYY HH:mm:ss',\r\n                    hours: 'DD/MM/YYYY HH:mm:ss',\r\n                    eod: 'DD/MM/YYYY',\r\n                    datebarYear: 'YYYY',\r\n                    datebarMonthDay: 'DD/MM/YYYY',\r\n                    datebarDay: 'DD',\r\n                    datebarFull: 'DD/MM/YYYY',\r\n                    datebarHoursMinutes: 'HH:mm',\r\n                    datebarMonth: 'MM',\r\n                    datebarHoursMinutesSeconds: 'HH:mm:ss'\r\n                },\r\n                priceLines: priceLines,\r\n                getPriceBoxSettings: function (lineType, content) {\r\n                    return [\r\n                        'outOfRangeAxisMarker', true,\r\n                        'outOfRangeBoxColor', priceLines[lineType].boxColor,\r\n                        'outOfRangeTextColor', priceLines[lineType].boxTextColor,\r\n                        'outOfRangeLabel', content,\r\n                        'boxColor', priceLines[lineType].boxColor,\r\n                        'boxTextColor', priceLines[lineType].boxTextColor\r\n                    ];\r\n                },\r\n                languages: [\r\n                    { id: 'ar', name: 'العربية', dir: 'rtl' },\r\n                    { id: 'he', name: 'עברית', dir: 'rtl' },\r\n                    { id: 'it', name: 'Italiano', dir: 'ltr' },\r\n                    { id: 'fr', name: 'Français', dir: 'ltr' },\r\n                    { id: 'ru', name: 'Русский', dir: 'ltr' },\r\n                    { id: 'pt', name: 'Português', dir: 'ltr' },\r\n                    { id: 'nl', name: 'Nederlands', dir: 'ltr' },\r\n                    { id: 'es', name: 'Español', dir: 'ltr' },\r\n                    { id: 'tr', name: 'Türk', dir: 'ltr' },\r\n                    { id: 'ja', name: '日本人', dir: 'ltr' },\r\n                    { id: 'de', name: 'Deutsch', dir: 'ltr' },\r\n                    { id: 'pl', name: 'Polski', dir: 'ltr' },\r\n                    { id: 'gr', name: 'ελληνικά', dir: 'ltr' },\r\n                    { id: 'ro', name: 'Română', dir: 'ltr' },\r\n                    { id: 'en', name: 'English', dir: 'ltr' },\r\n                    { id: 'zh', name: '中文', dir: 'ltr' },\r\n                    { id: 'cs', name: 'Čeština', dir: 'ltr' },\r\n                    { id: 'hu', name: 'Magyar', dir: 'ltr' },\r\n                    { id: 'id', name: 'Bahasa Indonesia', dir: 'ltr' },\r\n                    { id: 'ms', name: 'Bahasa Melayu', dir: 'ltr' },\r\n                    { id: 'sv', name: 'Svenska', dir: 'ltr' },\r\n                    { id: 'tl', name: 'Filipino', dir: 'ltr' },\r\n                    { id: 'hi', name: 'हिंदी', dir: 'ltr' },\r\n                    { id: 'ko', name: '한국어', dir: 'ltr' },\r\n                    { id: 'th', name: 'ไทย', dir: 'ltr' }\r\n                ],\r\n                timeframes: [\r\n                    { n: 'tick', id: eChartTimeFramesIds.tick, f: 1, t1: 't', t2: '' },\r\n                    { n: '1 Minute', id: eChartTimeFramesIds['1 Minute'], f: 1, t1: '1', t2: 'm' },\r\n                    { n: '5 Minutes', id: eChartTimeFramesIds['5 Mintes'], f: 1, t1: '5', t2: 'm' },\r\n                    { n: '10 Minutes', id: eChartTimeFramesIds['10 Minutes'], f: 1, t1: '10', t2: 'm' },\r\n                    { n: '15 Minutes', id: eChartTimeFramesIds['15 Minutes'], f: 1, t1: '15', t2: 'm' },\r\n                    { n: '30 Minutes', id: eChartTimeFramesIds['30 Minutes'], f: 1, t1: '30', t2: 'm' },\r\n                    { n: '1 Hour', id: eChartTimeFramesIds['1 Hour'], f: 1, t1: '1', t2: 'h' },\r\n                    { n: '2 Hours', id: eChartTimeFramesIds['2 Hours'], f: 1, t1: '2', t2: 'h' },\r\n                    { n: '4 Hours', id: eChartTimeFramesIds['4 Hours'], f: 1, t1: '4', t2: 'h' },\r\n                    { n: '5 Hours', id: eChartTimeFramesIds['5 Hours'], f: 1, t1: '5', t2: 'h' },\r\n                    { n: '6 Hours', id: eChartTimeFramesIds['6 Hours'], f: 1, t1: '6', t2: 'h' },\r\n                    { n: '7 Hours', id: eChartTimeFramesIds['7 Hours'], f: 1, t1: '7', t2: 'h' },\r\n                    { n: '8 Hours', id: eChartTimeFramesIds['8 Hours'], f: 1, t1: '8', t2: 'h' },\r\n                    { n: '9 Hours', id: eChartTimeFramesIds['9 Hours'], f: 1, t1: '9', t2: 'h' },\r\n                    { n: '10 Hours', id: eChartTimeFramesIds['10 Hours'], f: 1, t1: '10', t2: 'h' },\r\n                    { n: '12 Hours', id: eChartTimeFramesIds['12 Hours'], f: 1, t1: '12', t2: 'h' },\r\n                    { n: '14 Hours', id: eChartTimeFramesIds['14 Hours'], f: 1, t1: '14', t2: 'h' },\r\n                    { n: '1 Day', id: eChartTimeFramesIds['1 Day'], f: 1, t1: 'D', t2: '' },\r\n                    { n: '1 Week', id: eChartTimeFramesIds['1 Week'], f: 1, t1: 'W', t2: '' },\r\n                    { n: '1 Month', id: eChartTimeFramesIds['1 Month'], f: 1, t1: 'M', t2: '' },\r\n                    { n: '3 Months', id: eChartTimeFramesIds['3 Months'], f: 1, t1: '3', t2: 'M' },\r\n                    { n: '6 Months', id: eChartTimeFramesIds['6 Months'], f: 1, t1: '6', t2: 'M' },\r\n                    { n: '1 Year', id: eChartTimeFramesIds['1 Year'], f: 1, t1: 'Y', t2: '' }\r\n                ]\r\n            };\r\n\r\n            function getChartNewDealSlipSettings(startArgs) {\r\n                var selectedTheme = ThemeSettings.GetTheme(),\r\n                    startSettings = {\r\n                        isMobile: function () {\r\n                            return false;\r\n                        },\r\n                        ChartLayoutContainer: '#dealChartContainer',\r\n                        ParentRelativeObjectID: 'dealChartContainer',\r\n                        Template: (selectedTheme === 'light' ? eChartCustomTemplates.web : eChartCustomTemplates.webDark) +\r\n                            UrlResolver.getDefaultBroker(),\r\n                        Layout: 'layout99',\r\n                        CustomLayoutFile: 'ChartUI/LayoutScripts/webNewDealSlipLayout.js',\r\n                        SelectedInstrumentId: startArgs.instrumentId,\r\n                        OrderDirection: startArgs.orderDir,\r\n                        chart: {\r\n                            DefaultTimeScale: eChartTimeFramesIds['1 Minute'],\r\n                            DynWick: true,\r\n                            LegendOnlyWithCrosshair: false,\r\n                            ShowBarData: 'true',\r\n                            PriceChartType: 'candlesticks',\r\n                            WaterMark: false,\r\n                            TimeZone: 0,\r\n                            ExtraData: eChartTimeFramesIds['5 Mintes'],\r\n                            LineLastCloseMarkRadius: 0,\r\n                            AlignToLeft: false,\r\n                            MaximumBars: 500,\r\n                            HistoryCandlesCount: 500,\r\n                            NumberOfVisibleBars: 100,\r\n                            TwoFingersPriceSlide: null\r\n                        },\r\n                        actions: {\r\n                            showMajors: true,\r\n                            showCompares: true,\r\n                            setLastUpdateEvent: false,\r\n                            enableShowUserPosition: false,\r\n                            setOpenOptionToolbar: false,\r\n                            isExpirationRequired: false\r\n                        },\r\n                        appiinit_indicators: [],\r\n                        tracking: {\r\n                            eventName: startArgs.tracking.eventName\r\n                        },\r\n                        events: {\r\n                            onDialogAddStudy: general.emptyFn\r\n                        },\r\n                        api: {\r\n                            props: {\r\n                                chart: {\r\n                                    gui: {\r\n                                        zoom: {\r\n                                            interval_font_color: selectedTheme === 'dark' ? colors.grey : colors.black\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                startSettings = Object.assign({}, advinionChartInitConfiguration, startSettings);\r\n\r\n                startSettings.priceLines[eChartPriceLineType.StopLoss].boxTextColor =\r\n                    selectedTheme === 'dark' ? colors.white : colors.black;\r\n                startSettings.priceLines[eChartPriceLineType.TakeProfit].boxTextColor =\r\n                    selectedTheme === 'dark' ? colors.white : colors.black;\r\n\r\n                return startSettings;\r\n            }\r\n\r\n            function getChartNewDealSlipMobileSettings(startArgs) {\r\n                var selectedTheme = ThemeSettings.GetTheme(),\r\n                    startSettings = {\r\n                        isMobile: function () {\r\n                            return true;\r\n                        },\r\n                        enableCrosshairMode: true,\r\n                        ChartLayoutContainer: '#chartContainer',\r\n                        ParentRelativeObjectID: 'chartContainer',\r\n                        Template: (selectedTheme === 'light' ? eChartCustomTemplates.mobile : eChartCustomTemplates.mobileDark) +\r\n                            UrlResolver.getDefaultBroker(),\r\n                        Layout: 'layout99',\r\n                        CustomLayoutFile: 'ChartUI/LayoutScripts/mobileNewDealSlipLayout.js',\r\n                        SelectedInstrumentId: startArgs.instrumentId,\r\n                        OrderDirection: startArgs.orderDir,\r\n                        chart: {\r\n                            DefaultTimeScale: eChartTimeFramesIds['1 Minute'],\r\n                            DynWick: true,\r\n                            LegendOnlyWithCrosshair: true,\r\n                            ShowBarData: 'true',\r\n                            PriceChartType: 'candlesticks',\r\n                            WaterMark: false,\r\n                            TimeZone: 0,\r\n                            ExtraData: eChartTimeFramesIds['5 Mintes'],\r\n                            LineLastCloseMarkRadius: 0,\r\n                            AlignToLeft: false,\r\n                            MaximumBars: 500,\r\n                            HistoryCandlesCount: 500,\r\n                            NumberOfVisibleBars: 100,\r\n                            TwoFingersPriceSlide: true\r\n                        },\r\n                        actions: {\r\n                            showMajors: true,\r\n                            showCompares: true,\r\n                            setLastUpdateEvent: false,\r\n                            enableShowUserPosition: false,\r\n                            setOpenOptionToolbar: false,\r\n                            isExpirationRequired: false\r\n                        },\r\n                        appiinit_indicators: [],\r\n                        tracking: {\r\n                            eventName: 'deal-slip-chart-interaction'\r\n                        },\r\n                        events: {\r\n                            onDialogAddStudy: function onDialogAddStudyImpl(studyName, jqDialogContentElement) {\r\n                                if (jqDialogContentElement) {\r\n                                    jqDialogContentElement.dialog('close');\r\n                                }\r\n                            }\r\n                        },\r\n                        api: {\r\n                            props: {\r\n                                chart: {\r\n                                    gui: {\r\n                                        zoom: {\r\n                                            interval_font_size: 11,\r\n                                            interval_font_bold: false,\r\n                                            interval_font_color: selectedTheme === 'dark' ? colors.grey : colors.black\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                startSettings = Object.assign({}, advinionChartInitConfiguration, startSettings);\r\n\r\n                startSettings.priceLines[eChartPriceLineType.CurrentRate].labelBackgroundColor = colors.transparent;\r\n                startSettings.priceLines[eChartPriceLineType.StopLoss].boxTextColor =\r\n                    selectedTheme === 'dark' ? colors.white : colors.black;\r\n                startSettings.priceLines[eChartPriceLineType.TakeProfit].boxTextColor =\r\n                    selectedTheme === 'dark' ? colors.white : colors.black;\r\n\r\n                return startSettings;\r\n            }\r\n\r\n            function getStartSettings(instanceType, startArgs) {\r\n                var set = null;\r\n\r\n                switch (instanceType) {\r\n                    case eChartInstanceType.newDealSlip:\r\n                        set = getChartNewDealSlipSettings(startArgs);\r\n                        break;\r\n\r\n                    case eChartInstanceType.newDealMobile:\r\n                        set = getChartNewDealSlipMobileSettings(startArgs);\r\n                        break;\r\n\r\n                    default:\r\n                        ErrorManager.onError(\r\n                            '/AdvinionChartInitializer',\r\n                            'Invalid chart type for the start settings',\r\n                            eErrorSeverity.high\r\n                        );\r\n                        break;\r\n                }\r\n\r\n                return set;\r\n            }\r\n\r\n            return {\r\n                getStartSettings: getStartSettings\r\n            };\r\n        };\r\n\r\n        return new AdvinionChartInitializer();\r\n    }\r\n);\r\n",
  "isBase64": false
}