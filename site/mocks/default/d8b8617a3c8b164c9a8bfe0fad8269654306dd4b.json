{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/Limits/EditLimitBaseViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/Limits/EditLimitBaseViewModel',\r\n    [\r\n        'require',\r\n        'helpers/ObservableCustomExtender',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'configuration/initconfiguration',\r\n        'Dictionary',\r\n        'dataaccess/dalorder',\r\n        'deviceviewmodels/BaseOrder',\r\n        'viewmodels/limits/SetLimitsViewModel',\r\n        'viewmodels/limits/RateFieldModel',\r\n        'devicemanagers/ViewModelsManager',\r\n        'cachemanagers/activelimitsmanager',\r\n        'managers/instrumentTranslationsManager',\r\n        'initdatamanagers/InstrumentsManager',\r\n        'cachemanagers/QuotesManager',\r\n        'viewmodels/limits/ExpirationDateModel',\r\n        'managers/CustomerProfileManager',\r\n        'initdatamanagers/Customer',\r\n        'initdatamanagers/SymbolsManager',\r\n        'devicemanagers/AlertsManager',\r\n        'StateObject!Transaction',\r\n        'managers/viewsmanager',\r\n        'modules/BuilderForInBetweenQuote',\r\n        'FxNet/LogicLayer/Deal/DealAmountLabel',\r\n        'viewmodels/Limits/AmountFieldsWrapper',\r\n        'cachemanagers/ClientStateFlagsManager',\r\n        'calculators/LimitRangeCalculator',\r\n        'FxNet/LogicLayer/Deal/DealLifeCycle',\r\n        'handlers/limit'\r\n    ],\r\n    function EditLimitBaseDef(require) {\r\n        var ko = require('helpers/ObservableCustomExtender'),\r\n            general = require('handlers/general'),\r\n            Dictionary = require('Dictionary'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            settings = require('configuration/initconfiguration').EditLimitSettingsConfiguration,\r\n            dalOrders = require('dataaccess/dalorder'),\r\n            BaseOrder = require('deviceviewmodels/BaseOrder'),\r\n            SetLimitsViewModel = require('viewmodels/limits/SetLimitsViewModel'),\r\n            ViewModelsManager = require('devicemanagers/ViewModelsManager'),\r\n            ActiveLimitsManager = require('cachemanagers/activelimitsmanager'),\r\n            InstrumentTranslationsManager = require('managers/instrumentTranslationsManager'),\r\n            InstrumentsManager = require('initdatamanagers/InstrumentsManager'),\r\n            QuotesManager = require('cachemanagers/QuotesManager'),\r\n            ExpirationDateModel = require('viewmodels/limits/ExpirationDateModel'),\r\n            CustomerProfileManager = require('managers/CustomerProfileManager'),\r\n            Customer = require('initdatamanagers/Customer'),\r\n            SymbolsManager = require('initdatamanagers/SymbolsManager'),\r\n            AlertsManager = require('devicemanagers/AlertsManager'),\r\n            stateObject = require('StateObject!Transaction'),\r\n            viewsManager = require('managers/viewsmanager'),\r\n            BuilderForInBetweenQuote = require('modules/BuilderForInBetweenQuote'),\r\n            DealAmountLabel = require('FxNet/LogicLayer/Deal/DealAmountLabel'),\r\n            AmountFieldsWrapper = require('viewmodels/Limits/AmountFieldsWrapper'),\r\n            ClientStateFlagsManager = require('cachemanagers/ClientStateFlagsManager'),\r\n            RateFieldModel = require('viewmodels/limits/RateFieldModel'),\r\n            LimitRangesCalculator = require('calculators/LimitRangeCalculator'),\r\n            dealLifeCycle = require('FxNet/LogicLayer/Deal/DealLifeCycle'),\r\n            tlimit = require('handlers/limit');\r\n\r\n        var EditLimitBaseViewModel = general.extendClass(KoComponentViewModel, function EditLimitBaseClass() {\r\n            var self = this,\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = this.Data, // inherited from KoComponentViewModel\r\n                orderId = null,\r\n                activeQuote = null,\r\n                selectedLimit = null,\r\n                validationModel = {},\r\n                baseOrder = new BaseOrder(),\r\n                fieldWrappers = new AmountFieldsWrapper(),\r\n                expirationDateModel = new ExpirationDateModel(),\r\n                setLimitsViewModel = new SetLimitsViewModel(),\r\n                limitLevelField = new RateFieldModel();\r\n\r\n            function init(customSettings) {\r\n                parent.init.call(self, customSettings); // inherited from KoComponentViewModel\t\r\n\r\n                baseOrder.Init({}, data);\r\n                expirationDateModel.Init();\r\n\r\n                setProperties();\r\n                setObservables();\r\n                setComputables();\r\n                setSubscribers();\r\n\r\n                setStaticInfo();\r\n\r\n                registerToDispatcher();\r\n                updateRateValue();\r\n                setLimitsViewModel.Init(data, self.getSettings().setlimitsConfiguration);\r\n                fieldWrappers.init(setLimitsViewModel, data);\r\n\r\n                setActiveSLOrTP();\r\n                setChartProperties();\r\n                stateObject.update('currentRateDirectionSwitch', viewsManager.GetViewArgs(eViewTypes.vEditLimit).currentRateDirectionSwitch);\r\n            }\r\n\r\n            function setProperties() {\r\n                data.PageName = ViewModelsManager.VManager.GetViewArgs(eViewTypes.vEditLimit).pageName;\r\n            }\r\n\r\n            function setObservables() {\r\n                data.ccyPair = stateObject.set('ccyPair', ko.observable(''));\r\n                data.orderID = ko.observable(\"\");\r\n                data.entryTime = ko.observable(\"\");\r\n                data.instrumentID = ko.observable(0);\r\n                data.dealAmountLabel = ko.observable(\"\");\r\n                data.selectedDealAmount = stateObject.set('selectedDealAmount', ko.observable('').extend({ dirty: false }));\r\n                data.buySymbol = ko.observable(\"\");\r\n                data.sellSymbol = ko.observable(\"\");\r\n                data.orderDir = stateObject.set('orderDir', ko.observable(''));\r\n                data.isNonForex = ko.observable(true);\r\n                data.bid = stateObject.set('bid', ko.observable(''));\r\n                data.ask = stateObject.set('ask', ko.observable(''));\r\n                data.spotRateLabel = ko.observable(\"\");\r\n                data.isActiveQuote = stateObject.set('isActiveQuote', ko.observable(false));\r\n                data.openLimit = ko.observable(\"\").extend({ dirty: false, rate: true });\r\n                data.openLimitLowerRange = new LimitRangesCalculator.LimitRange(ko);\r\n                data.openLimitHigherRange = new LimitRangesCalculator.LimitRange(ko);\r\n                data.lowerRangeNear = ko.observable(\"\").extend({ dirty: false });\r\n                data.higherRangeNear = ko.observable(\"\").extend({ dirty: false });\r\n                data.decimalDigit = ko.observable(0);\r\n                data.limitCalc = ko.observable(\"\").extend({ dirty: false });\r\n                data.onSaveLimitEnable = ko.observable(\"\");\r\n                data.setLimitsIsDirty = ko.observable(false);\r\n                data.templateToUse = ko.observable(\"\");\r\n                data.isShowEditableRate = ko.observable(\"\");\r\n                data.ready = ko.observable(false);\r\n                data.hasInstrument = ko.observable(false);\r\n                data.customerSymbolId = ko.observable(Customer.prop.baseCcyId());\r\n                data.onRemoveLimitEnable = ko.observable(true);\r\n                data.isProcessing = ko.observable(false);\r\n                data.limitType = ko.observable(eLimitType.None);\r\n                data.baseSymbolId = ko.observable(\"\");\r\n                data.otherSymbolId = ko.observable(\"\");\r\n                data.lowerRangeNearLabel = ko.observable(\"\");\r\n                data.higherRangeNearLabel = ko.observable(\"\");\r\n                data.expirationDate = ko.observable(\"\");\r\n                data.isStock = ko.observable(false);\r\n\r\n                data.selectedInstrument = stateObject.set('selectedInstrument', ko.observable(''));\r\n                data.profileKeyForDefaultTab = ko.observable(settings.profileKeyForDefaultTab);\r\n                data.initialToolTab = stateObject.set('initialToolTab', ko.observable(''));\r\n                data.customerSymbolName = stateObject.set('customerSymbolName', ko.observable(''));\r\n                data.changePips = ko.observable(\"\");\r\n\r\n                data.quoteForOtherCcyToAccountCcy = stateObject.get(\"quoteForOtherCcyToAccountCcy\");\r\n\r\n                if (data.quoteForOtherCcyToAccountCcy) {\r\n                    data.quoteForOtherCcyToAccountCcy('');\r\n                } else {\r\n                    data.quoteForOtherCcyToAccountCcy = stateObject.set('quoteForOtherCcyToAccountCcy', ko.observable(''));\r\n                }\r\n\r\n                data.quoteForAccountCcyToOtherCcy = ko.observable(\"\");\r\n                data.amountSymbol = stateObject.set('amountSymbol', ko.observable(''));\r\n                data.bidPips = ko.observable(\"\");\r\n                data.askPips = ko.observable(\"\");\r\n                data.isFuture = stateObject.set('isFuture', ko.observable(''));\r\n                data.isShare = stateObject.set('isShare', ko.observable(''));\r\n                data.open = stateObject.set('open', ko.observable(''));\r\n                data.close = stateObject.set('close', ko.observable(''));\r\n                data.change = stateObject.set('change', ko.observable(''));\r\n                data.formattedChange = stateObject.set(\"formattedChange\", ko.observable(\"\"));\r\n                data.tradeTime = stateObject.set('tradeTime', ko.observable(''));\r\n                data.highBid = stateObject.set('highBid', ko.observable(''));\r\n                data.lowAsk = stateObject.set('lowAsk', ko.observable(''));\r\n                data.isForex = ko.observable(\"\");\r\n                data.prevBid = ko.observable(\"\");\r\n                data.prevAsk = ko.observable(\"\");\r\n\r\n                data.enableSLLimit = ko.observable(false);\r\n                data.enableTPLimit = ko.observable(false);\r\n\r\n                data.enableLimitLevel = ko.observable(false);\r\n                data.showLimits = ko.observable(false).extend({ notify: \"always\" });\r\n                data.limitsReady = ko.observable(false);\r\n                data.isSlRateActiveTab = ko.observable(false);\r\n                data.displaySlPercentSymbol = ko.observable(false);\r\n                data.displayTpPercentSymbol = ko.observable(false);\r\n                data.isSlAmountActiveTab = ko.observable(false);\r\n                data.isSlPercentActiveTab = ko.observable(false);\r\n                data.isTpRateActiveTab = ko.observable(false);\r\n                data.isTpAmountActiveTab = ko.observable(false);\r\n                data.isTpPercentActiveTab = ko.observable(false);\r\n                data.displaySlAmountCcySymbol = ko.observable(false);\r\n                data.displayTpAmountCcySymbol = ko.observable(false);\r\n\r\n                data.slRate = ko.observable(\"\").extend({ dirty: false });\r\n                data.tpRate = ko.observable(\"\").extend({ dirty: false });\r\n\r\n                data.customerSymbolName(Customer.prop.baseCcyName());\r\n                data.initialToolTab(CustomerProfileManager.ProfileCustomer()[settings.profileKeyForDefaultTab] || eNewDealTool.Chart);\r\n                data.addSlTpType = ko.observable(eLimitType.None);\r\n\r\n                data.corporateActionDate = ko.observable();\r\n                data.showShareCorporateActionDealInfo = ko.observable();\r\n                data.chartTransactionEnabled = stateObject.set('chartTransactionEnabled', ko.observable(false));\r\n            }\r\n\r\n            function setComputables() {\r\n                data.isShowBuyBox = self.createComputed(function () {\r\n                    return data.orderDir() === eOrderDir.Buy;\r\n                });\r\n\r\n                data.isShowSellBox = self.createComputed(function () {\r\n                    return data.orderDir() === eOrderDir.Sell;\r\n                });\r\n\r\n                data.setLimitsIsDirty = self.createComputed(function () {\r\n                    var limitsReady = data.limitsReady();\r\n\r\n                    if (!limitsReady) {\r\n                        return false;\r\n                    }\r\n\r\n                    var slOriginalRate = general.toNumeric(data.slRate.originalValue()),\r\n                        stopLossRate = general.toNumeric(setLimitsViewModel.Data.stopLossRate() || \"0\"),\r\n                        slChanged = slOriginalRate !== stopLossRate,\r\n\r\n                        tpOriginalRate = general.toNumeric(data.tpRate.originalValue()),\r\n                        takeProfitRate = general.toNumeric(setLimitsViewModel.Data.takeProfitRate() || \"0\"),\r\n                        tpChanged = tpOriginalRate !== takeProfitRate;\r\n\r\n                    if (slChanged || tpChanged) {\r\n                        return true;\r\n                    }\r\n\r\n                    return false;\r\n                });\r\n\r\n                data.baseSymbolName = self.createComputed(function () {\r\n                    return data.orderDir() == eOrderDir.Buy ? data.buySymbol() : data.sellSymbol();\r\n                });\r\n\r\n                data.ViewModelReady = self.createComputed(function () {\r\n                    if (data.ready()) {\r\n                        return true;\r\n                    }\r\n\r\n                    var hasInstrument = data.hasInstrument(),\r\n                        hasLimits = data.limitsReady();\r\n\r\n                    var isReady = hasInstrument && hasLimits;\r\n                    data.ready(isReady);\r\n\r\n                    return isReady;\r\n                });\r\n\r\n                data.ValidationRules = self.createComputed(function () {\r\n                    if (data.lowerRangeNear() != data.higherRangeNear()) {\r\n                        data.openLimit.rules.removeAll();\r\n\r\n                        var limitRange = {};\r\n\r\n                        if (data.orderDir() === eOrderDir.Buy) {\r\n\r\n                            limitRange.minfar = general.toNumeric(Format.toRate(data.openLimitHigherRange.far(), true, data.instrumentID()));\r\n                            limitRange.minnear = general.toNumeric(Format.toRate(data.openLimitHigherRange.near(), true, data.instrumentID()));\r\n                            limitRange.maxnear = general.toNumeric(Format.toRate(data.openLimitLowerRange.near(), true, data.instrumentID()));\r\n                            limitRange.maxfar = general.toNumeric(Format.toRate(data.openLimitLowerRange.far(), true, data.instrumentID()));\r\n\r\n                            return {\r\n                                required: true,\r\n                                rangeInterval: limitRange,\r\n                                rate: {\r\n                                    message: Dictionary.GetItem(\"limitLevelInvalid\"),\r\n                                    params: true\r\n                                },\r\n                                toNumericLength: {\r\n                                    ranges: [{\r\n                                        from: 0, to: Number.MAX_SAFE_INTEGER, decimalDigits: data.decimalDigit()\r\n                                    }]\r\n                                }\r\n                            };\r\n                        } else {\r\n\r\n                            limitRange.minfar = general.toNumeric(Format.toRate(data.openLimitLowerRange.far(), true, data.instrumentID()));\r\n                            limitRange.minnear = general.toNumeric(Format.toRate(data.openLimitLowerRange.near(), true, data.instrumentID()));\r\n                            limitRange.maxnear = general.toNumeric(Format.toRate(data.openLimitHigherRange.near(), true, data.instrumentID()));\r\n                            limitRange.maxfar = general.toNumeric(Format.toRate(data.openLimitHigherRange.far(), true, data.instrumentID()));\r\n\r\n                            return {\r\n                                required: true,\r\n                                rangeInterval: limitRange,\r\n                                rate: {\r\n                                    message: Dictionary.GetItem(\"limitLevelInvalid\"),\r\n                                    params: true\r\n                                },\r\n                                toNumericLength: {\r\n                                    ranges: [{\r\n                                        from: 0, to: Number.MAX_SAFE_INTEGER, decimalDigits: data.decimalDigit()\r\n                                    }]\r\n                                }\r\n                            };\r\n                        }\r\n                    } else {\r\n                        return data.openLimit.rules;\r\n                    }\r\n                }).extend({ notify: 'always' });\r\n\r\n                data.EditLimitReady = self.createComputed(function () {\r\n                    var isActiveQuote = data.isActiveQuote(),\r\n                        isDirtyOpenLimit = data.openLimit.isDirty(),\r\n                        isDirtyLimitsModel = !!data.setLimitsIsDirty(),\r\n                        isDirtyExpirationDateTime = expirationDateModel.Data.isExpirationDateDirty(),\r\n                        isLimitLevelValid = data.openLimit ? data.openLimit.isValid() : false,\r\n                        // In web case we don't need to disbale update button if we have errors on SL/TP limits\r\n                        hasLimitsErrors = settings.showValidationTooltips ? false : setLimitsViewModel.Validate().length > 0,\r\n                        isDirty = (isDirtyOpenLimit || isDirtyLimitsModel || isDirtyExpirationDateTime),\r\n\r\n                        isGuiContextAvailable = data.onSaveLimitEnable(),\r\n                        isExpirationDateTimeValid = expirationDateModel.IsValid(),\r\n                        isBrokerAllowLimitsOnNoRates = Customer.prop.brokerAllowLimitsOnNoRates,\r\n\r\n                        result = ((isBrokerAllowLimitsOnNoRates || isActiveQuote) && isGuiContextAvailable && isExpirationDateTimeValid && isDirty && isLimitLevelValid && !hasLimitsErrors);\r\n\r\n                    return result;\r\n                }).extend({ notify: 'always' });\r\n            }\r\n\r\n            function setSubscribers() {\r\n                self.subscribeTo(data.ValidationRules, function () {\r\n                    data.openLimit.extend(data.ValidationRules());\r\n                });\r\n\r\n                self.subscribeTo(data.openLimit, function (openLimitValue) {\r\n                    var rate = general.toNumeric(openLimitValue);\r\n\r\n                    if (general.isNullOrUndefined(data.openLimitLowerRange) || general.isNullOrUndefined(data.openLimitHigherRange)) {\r\n                        return;\r\n                    }\r\n\r\n                    if (general.InRange(rate, data.openLimitLowerRange) || general.InRange(rate, data.openLimitHigherRange)) {\r\n                        data.limitCalc(rate);\r\n                    }\r\n                });\r\n            }\r\n\r\n            function setActiveSLOrTP() {\r\n                var limitType = ViewModelsManager.VManager.GetViewArgs(eViewTypes.vEditLimit).limitType;\r\n\r\n                var profileCustomer = CustomerProfileManager.ProfileCustomer();\r\n                data.showLimits(profileCustomer.editLimitIfDoneExpanded === 1);\r\n\r\n                selectedLimit = ActiveLimitsManager.limits.GetItem(orderId);\r\n                if (selectedLimit) {\r\n                    if (limitType) {\r\n                        data.showLimits(true);\r\n                        data.addSlTpType(limitType);\r\n                    }\r\n\r\n                    if (limitType === eLimitType.StopLoss) {\r\n                        data.enableSLLimit(true);\r\n                    }\r\n\r\n                    if (limitType === eLimitType.TakeProfit) {\r\n                        data.enableTPLimit(true);\r\n                    }\r\n \r\n                    if (!general.isNullOrUndefined(selectedLimit.slRate) && selectedLimit.slRate != 0) {\r\n                        data.enableSLLimit(true);\r\n                    }\r\n\r\n                    if (!general.isNullOrUndefined(selectedLimit.tpRate) && selectedLimit.tpRate != 0) {\r\n                        data.enableTPLimit(true);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setRateLabel(rate, instrumentId) {\r\n                var rateLabel = {\r\n                    First: 0,\r\n                    Middle: 0,\r\n                    Last: 0\r\n                };\r\n\r\n                var splitSpotRate = Format.tenthOfPipSplitRate(rate, instrumentId);\r\n\r\n                rateLabel.First = splitSpotRate.button.first;\r\n                rateLabel.Middle = splitSpotRate.button.middle;\r\n                rateLabel.Last = splitSpotRate.button.last;\r\n\r\n                return rateLabel;\r\n            }\r\n\r\n            function setStaticInfo() {\r\n                orderId = ViewModelsManager.VManager.GetViewArgs(eViewTypes.vEditLimit).orderId;\r\n\r\n                data.onSaveLimitEnable(true);\r\n                data.onRemoveLimitEnable(true);\r\n\r\n                selectedLimit = ActiveLimitsManager.limits.GetItem(orderId);\r\n\r\n                if (selectedLimit) {\r\n                    data.orderID(orderId);\r\n                    data.entryTime(selectedLimit.entryTime);\r\n                    data.limitType(selectedLimit.type);\r\n                    data.instrumentID(selectedLimit.instrumentID);\r\n                    data.ccyPair(InstrumentTranslationsManager.Long(selectedLimit.instrumentID));\r\n                    data.selectedDealAmount(selectedLimit.orderDir == eOrderDir.Sell ? selectedLimit.sellAmount : selectedLimit.buyAmount);\r\n                    data.buySymbol(SymbolsManager.GetTranslatedSymbolById(selectedLimit.buySymbolID));\r\n                    data.sellSymbol(SymbolsManager.GetTranslatedSymbolById(selectedLimit.sellSymbolID));\r\n                    data.orderDir(selectedLimit.orderDir);\r\n                    data.limitCalc(selectedLimit.orderRate);\r\n                    data.selectedInstrument(selectedLimit.instrumentID);\r\n                    data.templateToUse(eTemplateNames.editLimitNavigator);\r\n                    data.isShowEditableRate(false);\r\n                    data.openLimit(selectedLimit.orderRate);\r\n                    data.expirationDate(selectedLimit.expirationDate);\r\n\r\n                    data.slRate(selectedLimit.slRate);\r\n                    data.slRate.markClean();\r\n\r\n                    data.tpRate(selectedLimit.tpRate);\r\n                    data.tpRate.markClean();\r\n\r\n                    var instrument = InstrumentsManager.GetInstrument(selectedLimit.instrumentID);\r\n                    if (instrument) {\r\n                        var result = DealAmountLabel.Translate(instrument),\r\n                            corporateActionDate = instrument.getCorporateActionDate();\r\n                        data.dealAmountLabel(result.label);\r\n\r\n                        data.isNonForex(instrument.instrumentTypeId !== eInstrumentType.Currencies);\r\n                        data.decimalDigit(instrument.DecimalDigit);\r\n                        limitLevelField.precision(instrument.DecimalDigit);\r\n                        data.amountSymbol(instrument.otherSymbol);\r\n                        data.isFuture(instrument.isFuture);\r\n                        data.isForex(instrument.isForex);\r\n                        data.isShare(instrument.isShare);\r\n                        data.enableSLLimit(false);\r\n                        data.enableTPLimit(false);\r\n                        data.baseSymbolId(instrument.baseSymbol);\r\n                        data.otherSymbolId(instrument.otherSymbol);\r\n\r\n                        populateInBetweenQuotes(instrument);\r\n\r\n                        expirationDateModel.UpdateSelectedWithToday(selectedLimit.instrumentID);\r\n                        data.hasInstrument(true);\r\n                        data.isStock(instrument.isStock);\r\n\r\n                        data.corporateActionDate(corporateActionDate);\r\n                        data.showShareCorporateActionDealInfo(\r\n                            dealLifeCycle.sharesIsCorporateActionDateSignificant_BeforeDeal(\r\n                                Customer.prop.dealPermit,\r\n                                instrument.assetTypeId,\r\n                                corporateActionDate\r\n                            )\r\n                        );\r\n                    }\r\n\r\n                    if (!general.isEmpty(selectedLimit.expirationDate) && settings.showExpirationCalendar) {\r\n                        expirationDateModel.SetOrder(selectedLimit.orderID);\r\n                    }\r\n                }\r\n\r\n                data.openLimit.markClean();\r\n\r\n                if (activeQuote) {\r\n                    updateDistances();\r\n                }\r\n            }\r\n\r\n            function populateInBetweenQuotes(instrument) {\r\n                BuilderForInBetweenQuote.GetInBetweenQuote(instrument.otherSymbol, Customer.prop.baseCcyId())\r\n                    .then(function (response) {\r\n                        data.quoteForOtherCcyToAccountCcy(response);\r\n                    }).done();\r\n\r\n                BuilderForInBetweenQuote.GetInBetweenQuote(Customer.prop.baseCcyId(), instrument.otherSymbol)\r\n                    .then(function (response) {\r\n                        data.quoteForAccountCcyToOtherCcy(response);\r\n                    }).done();\r\n            }\r\n\r\n            function updateDistances() {\r\n                selectedLimit = ActiveLimitsManager.limits.GetItem(orderId);\r\n                var instrument = InstrumentsManager.GetInstrument(selectedLimit.instrumentID),\r\n                    orderDir = data.orderDir();\r\n\r\n                LimitRangesCalculator.CalculateOpeningRanges(data.bid(), data.ask(), orderDir, data.openLimitLowerRange, data.openLimitHigherRange, instrument, ClientStateFlagsManager.CSFlags.limitMultiplier);\r\n                var openLimitLowerRange = orderDir === eOrderDir.Sell ? data.openLimitLowerRange.near() : data.openLimitHigherRange.near();\r\n                data.lowerRangeNear(Format.toRate(openLimitLowerRange, true, data.instrumentID()));\r\n\r\n                var openLimitHigherRange = orderDir === eOrderDir.Sell ? data.openLimitHigherRange.near() : data.openLimitLowerRange.near();\r\n                data.higherRangeNear(Format.toRate(openLimitHigherRange, true, data.instrumentID()));\r\n\r\n                data.lowerRangeNearLabel(setRateLabel(data.lowerRangeNear(), data.instrumentID()));\r\n                data.higherRangeNearLabel(setRateLabel(data.higherRangeNear(), data.instrumentID()));\r\n\r\n                var min1 = orderDir === eOrderDir.Sell ? data.openLimitLowerRange.far() : data.openLimitHigherRange.far();\r\n                var max1 = Math.min(data.openLimitHigherRange.near(), data.openLimitLowerRange.near());\r\n\r\n                var min2 = Math.max(data.openLimitHigherRange.near(), data.openLimitLowerRange.near());\r\n                var max2 = orderDir === eOrderDir.Sell ? data.openLimitHigherRange.far() : data.openLimitLowerRange.far();\r\n\r\n                limitLevelField.pipDigit(instrument.PipDigit);\r\n                limitLevelField.precision(instrument.DecimalDigit);\r\n\r\n                limitLevelField.min1(min1);\r\n                limitLevelField.max1(max1);\r\n\r\n                limitLevelField.min2(min2);\r\n                limitLevelField.max2(max2);\r\n            }\r\n\r\n            function updateRateValue() {\r\n                selectedLimit = ActiveLimitsManager.limits.GetItem(orderId);\r\n                if (selectedLimit) {\r\n\r\n                    activeQuote = QuotesManager.Quotes.GetItem(selectedLimit.instrumentID);\r\n\r\n                    if (activeQuote) {\r\n                        data.isActiveQuote(activeQuote.isActive());\r\n                        data.prevBid(data.bid());\r\n                        data.prevAsk(data.ask());\r\n                        data.bid(activeQuote.bid);\r\n                        data.ask(activeQuote.ask);\r\n                        data.changePips(activeQuote.changePips);\r\n                        data.open(activeQuote.open);\r\n                        data.close(activeQuote.close);\r\n                        data.change(Format.toPercent(activeQuote.change));\r\n                        data.formattedChange(Format.toSignedPercent(activeQuote.change, ''));\r\n                        data.tradeTime(activeQuote.tradeTime);\r\n                        data.highBid(activeQuote.highBid);\r\n                        data.lowAsk(activeQuote.lowAsk);\r\n                        var spotRate = selectedLimit.orderDir == eOrderDir.Buy ? activeQuote.ask : activeQuote.bid;\r\n                        data.spotRateLabel(setRateLabel(spotRate, selectedLimit.instrumentID));\r\n\r\n                        updateDistances();\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setLimitTabsFromClientProfile() {\r\n                var profileCustomer = CustomerProfileManager.ProfileCustomer();\r\n\r\n                if (profileCustomer.defaultEditSlLimitTab) {\r\n                    setLimitsViewModel.SetSlActiveTab(profileCustomer.defaultEditSlLimitTab);\r\n                } else {\r\n                    setLimitsViewModel.SetSlActiveTab(eSetLimitsTabs.Amount);\r\n                }\r\n\r\n                if (profileCustomer.defaultEditTpLimitTab) {\r\n                    setLimitsViewModel.SetTpActiveTab(profileCustomer.defaultEditTpLimitTab);\r\n                } else {\r\n                    setLimitsViewModel.SetTpActiveTab(eSetLimitsTabs.Amount);\r\n                }\r\n            }\r\n\r\n            function saveDefaultLimitTab() {\r\n                var profileCustomer = CustomerProfileManager.ProfileCustomer();\r\n                profileCustomer.defaultEditSlLimitTab = setLimitsViewModel.Data.curSlActiveTab();\r\n                profileCustomer.defaultEditTpLimitTab = setLimitsViewModel.Data.curTpActiveTab();\r\n                CustomerProfileManager.ProfileCustomer(profileCustomer);\r\n            }\r\n\r\n            function onLimitsChange(updatedItems) {\r\n                if (updatedItems.newLimits && updatedItems.newLimits.length > 0) {\r\n\r\n                    orderId = updatedItems.newLimits[0];\r\n\r\n                    var limit = ActiveLimitsManager.limits.GetItem(orderId);\r\n                    if (limit) {\r\n                        data.openLimit(limit.orderRate);\r\n                        data.openLimit.markClean();\r\n                    }\r\n                }\r\n            }\r\n\r\n            function registerToDispatcher() {\r\n                QuotesManager.OnChange.Add(updateRateValue);\r\n                ActiveLimitsManager.OnChange.Add(onLimitsChange);\r\n            }\r\n\r\n            function unRegisterFromDispatcher() {\r\n                QuotesManager.OnChange.Remove(updateRateValue);\r\n                ActiveLimitsManager.OnChange.Remove(onLimitsChange);\r\n            }\r\n\r\n            function unsetValidationModel() {\r\n                if (validationModel.Limits &&\r\n                    validationModel.Limits.isValid &&\r\n                    general.isFunctionType(validationModel.Limits.isValid.dispose)) {\r\n                    validationModel.Limits.isValid.dispose();\r\n                }\r\n\r\n                validationModel.Limits = null;\r\n            }\r\n\r\n            function validate() {\r\n                selectedLimit = ActiveLimitsManager.limits.GetItem(orderId);\r\n\r\n                if (!selectedLimit) {\r\n                    AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, String.format(\"{0}\", Dictionary.GetItem(\"OrderError7\")), null, { redirectToView: eForms.Limits });\r\n                    AlertsManager.PopAlert(AlertTypes.ServerResponseAlert);\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            function onRemoveLimit() {\r\n                if (!data.onRemoveLimitEnable()) {\r\n                    return;\r\n                }\r\n\r\n                if (validate()) {\r\n                    selectedLimit = ActiveLimitsManager.limits.GetItem(orderId);\r\n\r\n                    if (baseOrder.LimitValidate(selectedLimit.instrumentID, setLimitsViewModel.Validate()) && baseOrder.LimitValidateQuote(selectedLimit.instrumentID)) {\r\n                        var limit = new tlimit(selectedLimit.orderID);\r\n                        fillLimitData(limit);\r\n\r\n                        data.isProcessing(true);\r\n                        data.onRemoveLimitEnable(false);\r\n\r\n                        dalOrders.DeleteLimit(limit, onRemoveLimitReturn);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function onRemoveLimitReturn(result, callerId, requestData) {\r\n                data.onRemoveLimitEnable(true);\r\n                data.isProcessing(false);\r\n\r\n                var instrument = InstrumentsManager.GetInstrument(data.instrumentID());\r\n\r\n                if (instrument) {\r\n                    baseOrder.OnActionReturn(result, callerId, instrument, { redirectToView: eForms.Limits, requestData: requestData });\r\n                }\r\n            }\r\n\r\n            function fillLimitData(limit) {\r\n                limit.positionNumber = 0;\r\n                limit.instrumentID = data.instrumentID();\r\n                limit.amount = data.selectedDealAmount();\r\n                limit.orderDir = data.orderDir();\r\n                limit.limitRate = data.openLimit();\r\n                limit.ifDoneSLRate = setLimitsViewModel.ObservableSetLimitsObject.stopLossRate() == \"\" ? 0 : setLimitsViewModel.ObservableSetLimitsObject.stopLossRate();\r\n                limit.ifDoneTPRate = setLimitsViewModel.ObservableSetLimitsObject.takeProfitRate() == \"\" ? 0 : setLimitsViewModel.ObservableSetLimitsObject.takeProfitRate();\r\n                limit.expirationDate = getExpirationDate();\r\n                limit.mode = eLimitMode.OpenDeal;\r\n                limit.type = eLimitType.None;\r\n            }\r\n\r\n            function getExpirationDate() {\r\n                var expirationDate = null;\r\n\r\n                if (!expirationDateModel.Data.expirationDateSelector.IsGoodTillCancelChecked()) {\r\n                    expirationDate = expirationDateModel.Data.expirationDate();\r\n                    var selectedHoursValue = expirationDateModel.Data.selectedHoursValue();\r\n\r\n                    if (general.isObjectType(selectedHoursValue) && general.isEmptyType(selectedHoursValue)) {\r\n                        expirationDate += \"  \" + selectedHoursValue.value;\r\n                    } else if (general.isStringType(selectedHoursValue) && !general.isEmptyType(selectedHoursValue)) {\r\n                        expirationDate += \"  \" + selectedHoursValue;\r\n                    } else {\r\n                        expirationDate += \"  00:00\";\r\n                    }\r\n                }\r\n\r\n                return expirationDate;\r\n            }\r\n\r\n            function editLimitInternal() {\r\n                if (!data.EditLimitReady()) {\r\n                    return;\r\n                }\r\n\r\n                var limitsErrors = setLimitsViewModel.Validate();\r\n\r\n                if (limitsErrors.length) {\r\n                    if (settings.showValidationTooltips) {\r\n                        // expand set limits section if there are errors\r\n                        ko.postbox.publish('deal-slip-show-validation-tooltips');\r\n                        data.showLimits(true);\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                onSaveLimit();\r\n            }\r\n\r\n            var editLimit = debounce(editLimitInternal);\r\n\r\n            function onSaveLimit() {\r\n                if (validate()) {\r\n                    selectedLimit = ActiveLimitsManager.limits.GetItem(orderId);\r\n\r\n                    if (baseOrder.LimitValidate(selectedLimit.instrumentID, setLimitsViewModel.Validate()) && baseOrder.LimitValidateQuote(selectedLimit.instrumentID)) {\r\n                        var limit = new tlimit(selectedLimit.orderID);\r\n                        fillLimitData(limit);\r\n\r\n                        if (invalidEnableSlTpLimit(limit)) {\r\n                            return enabledSltpValidationError();\r\n                        }\r\n\r\n                        limit.removedIfDoneSLRate = (0 == parseFloat(limit.ifDoneSLRate) && 0 < parseFloat(selectedLimit.slRate));\r\n                        limit.removedIfDoneTPRate = (0 == parseFloat(limit.ifDoneTPRate) && 0 < parseFloat(selectedLimit.tpRate));\r\n\r\n                        data.onSaveLimitEnable(false);\r\n                        data.isProcessing(true);\r\n\r\n                        dalOrders.EditLimit(limit, onSaveLimitReturn);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function onSaveLimitReturn(result, callerId, requestData) {\r\n                data.onSaveLimitEnable(true);\r\n\r\n                selectedLimit = ActiveLimitsManager.limits.GetItem(orderId);\r\n\r\n                if (selectedLimit) {\r\n                    var instrument = InstrumentsManager.GetInstrument(selectedLimit.instrumentID);\r\n\r\n                    if (instrument) {\r\n\r\n                        if (baseOrder.ResultStatusSuccess(result)) {\r\n                            saveDefaultLimitTab();\r\n                        }\r\n\r\n                        data.isProcessing(false);\r\n                        data.isShowEditableRate(false);\r\n                        setLimitsViewModel.MarkClean();\r\n                        baseOrder.OnActionReturn(result, callerId, instrument, { redirectToView: eForms.Limits, requestData: requestData });\r\n                    }\r\n                }\r\n            }\r\n\r\n            function invalidEnableSlTpLimit(limit) {\r\n                return data.enableSLLimit() && limit.ifDoneSLRate === 0 || data.enableTPLimit() && limit.ifDoneTPRate === 0;\r\n            }\r\n\r\n            function ignoreSltpValidationError() {\r\n                data.enableSLLimit(false);\r\n                data.enableTPLimit(false);\r\n                onSaveLimit();\r\n            }\r\n\r\n            function enabledSltpValidationError() {\r\n                AlertsManager.UpdateAlert(\r\n                    AlertTypes.GeneralOkAlert,\r\n                    Dictionary.GetItem('pleaseNoteTitle'),\r\n                    Dictionary.GetItem('sltpValidationMsg', 'deals_EditLimit'),\r\n                    null,\r\n                    { okButtonCallback: ignoreSltpValidationError }\r\n                );\r\n                AlertsManager.PopAlert(AlertTypes.GeneralOkAlert);\r\n            }\r\n\r\n            function switchToRate() {\r\n                setLimitsViewModel.SetActiveTab(eSetLimitsTabs.Rate);\r\n            }\r\n\r\n            function setChartProperties() {\r\n                stateObject.update('stopLossRate', setLimitsViewModel.Data.stopLossRate);\r\n                stateObject.update('takeProfitRate', setLimitsViewModel.Data.takeProfitRate);\r\n                stateObject.update('openLimit', data.openLimit);\r\n                stateObject.update('chart', viewsManager.GetViewArgs(eViewTypes.vEditLimit).chart);\r\n                stateObject.update('switchToRate', switchToRate);\r\n            }\r\n\r\n            function dispose() {\r\n                setLimitsViewModel.Stop();\r\n                unRegisterFromDispatcher();\r\n                unsetValidationModel();\r\n                fieldWrappers.dispose();\r\n                fieldWrappers = null;\r\n                stateObject.unset('cachedOvernightFinancing');\r\n                stateObject.unset('currentRateDirectionSwitch');\r\n                parent.dispose.call(self);\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Data: data,\r\n                BaseOrder: baseOrder,\r\n                EditLimit: editLimit,\r\n                ExpirationDate: expirationDateModel,\r\n                SetLimitsInfo: setLimitsViewModel.ObservableSetLimitsObject,\r\n                SetLimitsViewProperties: setLimitsViewModel.ViewProperties,\r\n                TPField: setLimitsViewModel.TPField,\r\n                SLField: setLimitsViewModel.SLField,\r\n                FieldWrappers: fieldWrappers,\r\n                DeleteLimit: onRemoveLimit,\r\n                LimitLevelField: limitLevelField,\r\n                ValidationModel: validationModel,\r\n                SetLimitsViewModel: setLimitsViewModel,\r\n                setLimitTabsFromClientProfile: setLimitTabsFromClientProfile,\r\n                FillLimitData: fillLimitData\r\n            };\r\n        });\r\n\r\n        return EditLimitBaseViewModel;\r\n    }\r\n);",
  "isBase64": false
}