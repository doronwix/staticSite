{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/UploadDocumentsComponentViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\"viewmodels/UploadDocumentsComponentViewModel\", [\r\n\t\"require\",\r\n\t\"knockout\",\r\n\t\"handlers/general\",\r\n\t\"helpers/KoComponentViewModel\",\r\n\t\"Q\",\r\n\t\"modules/environmentData\",\r\n\t\"Dictionary\",\r\n\t\"initdatamanagers/Customer\",\r\n\t\"global/UrlResolver\",\r\n\t\"dataaccess/dalClaims\",\r\n\t\"dataaccess/dalCommon\",\r\n\t\"devicemanagers/StatesManager\",\r\n\t\"dataaccess/dalCompliance\",\r\n\t\"FxNet/UILayer/Managers/InterWindowsCommunicator\",\r\n\t\"modules/permissionsmodule\",\r\n\t\"configuration/initconfiguration\",\r\n\t\"FxNet/UILayer/ViewModels/UploadDocumentsPopUpsManager\",\r\n\t\"FxNet/Common/Utils/Version/versionPci.require\",\r\n\t\"StateObject!VerificationDocument\",\r\n], function UploadDocumentsComponentDef(require) {\r\n\tvar ko = require(\"knockout\"),\r\n\t\tgeneral = require(\"handlers/general\"),\r\n\t\tQ = require(\"Q\"),\r\n\t\tenvironmentData = require(\"modules/environmentData\").get(),\r\n\t\tDictionary = require(\"Dictionary\"),\r\n\t\tCustomer = require(\"initdatamanagers/Customer\"),\r\n\t\turlResolver = require(\"global/UrlResolver\"),\r\n\t\tdalClaims = require(\"dataaccess/dalClaims\"),\r\n\t\tdalCommon = require(\"dataaccess/dalCommon\"),\r\n\t\tdalCompliance = require(\"dataaccess/dalCompliance\"),\r\n\t\tInterWindowsCommunicator = require(\"FxNet/UILayer/Managers/InterWindowsCommunicator\"),\r\n\t\tStatesManager = require(\"devicemanagers/StatesManager\"),\r\n\t\tpermissionsModule = require(\"modules/permissionsmodule\"),\r\n\t\tsettings = require(\"configuration/initconfiguration\").UploadDocumentsConfiguration,\r\n\t\tuploadDocumentsPopUpsManager = require(\"FxNet/UILayer/ViewModels/UploadDocumentsPopUpsManager\"),\r\n\t\tKoComponentViewModel = require(\"helpers/KoComponentViewModel\"),\r\n\t\tStateVerificationDocument = require(\"StateObject!VerificationDocument\"),\r\n\t\tversionPci = require(\"FxNet/Common/Utils/Version/versionPci.require\");\r\n\r\n\tvar UploadDocumentsComponentViewModel = general.extendClass(\r\n\t\tKoComponentViewModel,\r\n\t\tfunction UploadDocumentsComponentClass(params) {\r\n\t\t\tvar self = this,\r\n\t\t\t\tparent = this.parent, // inherited from KoComponentViewModel\r\n\t\t\t\tdata = this.Data, // inherited from KoComponentViewModel\r\n\t\t\t\tid = params.id || \"unknown\",\r\n\t\t\t\thashTag = params.hashTag || \"\",\r\n\t\t\t\tcommunicator = InterWindowsCommunicator(window, id.toString() + hashTag),\r\n\t\t\t\tclaimGuid,\r\n\t\t\t\tcurrentFile,\r\n\t\t\t\ttimeoutDefered = Q.defer(),\r\n\t\t\t\tuploadFrameInterval,\r\n\t\t\t\tcurrentRetryCount = 0,\r\n\t\t\t\tframeId = general.createGuid(),\r\n\t\t\t\tdocumentTypeName = params.documentTypeName,\r\n\t\t\t\tcustomSuccessMessage = params.customSuccessMessage || \"\",\r\n\t\t\t\trecordType = params.recordType || eClaimRecordType.generalDocument,\r\n\t\t\t\tform = {},\r\n\t\t\t\tlogDataExtra = null;\r\n\r\n\t\t\tfunction init() {\r\n\t\t\t\tparent.init.call(self);\r\n\r\n\t\t\t\tform.idByShufti = Customer.prop.idByShufti;\r\n\t\t\t\tform.ubByShufti = Customer.prop.ubByShufti;\r\n\r\n\t\t\t\tsetVerificationDocState();\r\n\t\t\t\tsetObservables();\r\n\t\t\t\tsetComputables();\r\n\t\t\t\tsetSubscribers();\r\n\t\t\t\tsetUpRetryMechanism();\r\n\t\t\t\tregisterCommunicator();\r\n\r\n\t\t\t\tdalCommon.LogUploadCommunication(\"VM load\", \"load promise timeout started\", \"written\");\r\n                    StatesManager.StartGetDocumentsStatus();\r\n\t\t\t}\r\n\r\n\t\t\tfunction setObservables() {\r\n\t\t\t\tform.progressVisible = ko.observable(false);\r\n\t\t\t\tform.textFileUpload = ko.observable();\r\n\t\t\t\tform.iframeReady = ko.observable(false);\r\n\t\t\t\tform.autoUpload = params.autoUpload || false;\r\n\t\t\t\tform.iframeElement = ko.observable();\r\n\t\t\t\tform.canBrowse = ko.observable(true);\r\n\t\t\t\tform.canUpload = ko.observable(false);\r\n\t\t\t\tform.files = ko.observableArray();\r\n\t\t\t\tform.iframeSrc = ko.observable(getIframeSrc()).extend({ notify: \"always\" });\r\n\t\t\t\tform.successFirst = ko.observable(false);\r\n\r\n\t\t\t\tsetVerificationDocObservables();\r\n\t\t\t}\r\n\r\n\t\t\tfunction setVerificationDocState() {\r\n\t\t\t\tif (StateVerificationDocument.containsKey(documentTypeName)) {\r\n                       return;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tStateVerificationDocument.set(documentTypeName, {\r\n\t\t\t\t\tnormalUpload: false,\r\n\t\t\t\t\tenableConfirm: true,\r\n\t\t\t\t\tshowDocStatusText: true,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tfunction setVerificationDocObservables() {\r\n\t\t\t\tvar state = StateVerificationDocument.containsKey(documentTypeName)\r\n\t\t\t\t\t? StateVerificationDocument.get(documentTypeName)\r\n\t\t\t\t\t: null;\r\n\r\n\t\t\t\tform.enableConfirm = ko.observable(state ? state.enableConfirm : false);\r\n\t\t\t\tform.normalUpload = ko.observable(state ? state.normalUpload : false);\r\n\t\t\t\tform.showDocStatusText = ko.observable(state ? state.showDocStatusText : true);\r\n\t\t\t}\r\n\r\n\t\t\tfunction setComputables() {\r\n\t\t\t\tform.isBrowseEnabled = ko.computed(function () {\r\n\t\t\t\t\treturn form.iframeReady() && form.canBrowse();\r\n\t\t\t\t});\r\n\r\n\t\t\t\tform.isBrowseUploadOneClickEnabled = ko.computed(function () {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\tform.iframeReady() && form.canBrowse() && permissionsModule.CheckPermissions(\"uploadDocuments\")\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tform.isUploadEnabled = ko.computed(function () {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\tform.iframeReady() && form.canUpload() && permissionsModule.CheckPermissions(\"uploadDocuments\")\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tform.CddCompleted = ko.computed(function () {\r\n\t\t\t\t\treturn StatesManager.GetStates().CddStatus() === eCDDStatus.Complete;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tform.isIdByShuftiEnabled = ko.pureComputed(function () {\r\n\t\t\t\t\treturn form.idByShufti === true && form.CddCompleted() === true && !form.normalUpload();\r\n\t\t\t\t}, form);\r\n\r\n\t\t\t\tform.isUbByShuftiEnabled = ko.pureComputed(function () {\r\n\t\t\t\t\treturn form.ubByShufti === true && form.CddCompleted() === true && !form.normalUpload();\r\n\t\t\t\t}, form);\r\n\t\t\t}\r\n\r\n\t\t\tfunction setSubscribers() {\r\n\t\t\t\tko.postbox.subscribe(eAppEvents.dialogClosed, function () {\r\n\t\t\t\t\tif (params.isCloseable) {\r\n\t\t\t\t\t\tform.iframeSrc(\"\");\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tStateVerificationDocument.subscribe(documentTypeName, function (value) {\r\n\t\t\t\t\tform.normalUpload(value.normalUpload);\r\n\t\t\t\t\tform.enableConfirm(value.enableConfirm);\r\n\t\t\t\t\tform.showDocStatusText(value.showDocStatusText);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tfunction setUpRetryMechanism() {\r\n\t\t\t\ttimeoutDefered.promise\r\n\t\t\t\t\t.timeout(settings.interWindowsCommunicationLimit)\r\n\t\t\t\t\t.then(\r\n\t\t\t\t\t\tfunction (result) {\r\n\t\t\t\t\t\t\tdalCommon.LogUploadCommunication(\r\n\t\t\t\t\t\t\t\t\"VM load\",\r\n\t\t\t\t\t\t\t\t\"load promise timeout was resolved with result: \" + result,\r\n\t\t\t\t\t\t\t\t\"written\"\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tfunction () {\r\n\t\t\t\t\t\t\tuploadFrameInterval = setInterval(reloadUploadFrame, settings.uploadFrameReloadTimeout);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.done();\r\n\t\t\t}\r\n\r\n\t\t\tfunction getIframeSrc() {\r\n\t\t\t\treturn getFrameUrl() + getFrameIdentifiersForUrl();\r\n\t\t\t}\r\n\r\n\t\t\tfunction getIframeSrcWithCacheBuster() {\r\n\t\t\t\tvar url = getFrameUrl();\r\n\r\n\t\t\t\treturn urlResolver.getUrlWithRndKeyValue(url) + getFrameIdentifiersForUrl();\r\n\t\t\t}\r\n\r\n\t\t\tfunction getFrameUrl() {\r\n\t\t\t\treturn (\r\n\t\t\t\t\tenvironmentData.pciPath +\r\n\t\t\t\t\tenvironmentData.pciFileUploadPage +\r\n\t\t\t\t\t\"?id=\" +\r\n\t\t\t\t\tid +\r\n\t\t\t\t\t\"&v=\" +\r\n\t\t\t\t\tversionPci +\r\n\t\t\t\t\t\"&d=\" +\r\n\t\t\t\t\twindow.location.host.replace(/\\./g, \"_\")\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tfunction getFrameIdentifiersForUrl() {\r\n\t\t\t\tvar frameDetails = \"an=\" + Customer.prop.accountNumber + \"&guid=\" + frameId;\r\n\r\n\t\t\t\treturn typeof params.hashTag !== \"undefined\"\r\n\t\t\t\t\t? \"#\" + id + params.hashTag + \"&\" + frameDetails\r\n\t\t\t\t\t: \"#\" + frameDetails;\r\n\t\t\t}\r\n\r\n\t\t\tfunction reloadUploadFrame() {\r\n\t\t\t\tif (currentRetryCount > settings.uploadFrameRetryCount) {\r\n\t\t\t\t\tclearInterval(uploadFrameInterval);\r\n\t\t\t\t\tvar frameSrc = form.iframeSrc();\r\n\r\n\t\t\t\t\tdalCommon.LogFrameNotLoadedMessage(\r\n\t\t\t\t\t\teTokenizationError.frameNotLoaded,\r\n\t\t\t\t\t\tencodeURI(frameSrc),\r\n\t\t\t\t\t\tgeneral.extractGuid(frameSrc)\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrentRetryCount++;\r\n\r\n\t\t\t\tform.iframeSrc(getIframeSrcWithCacheBuster());\r\n\t\t\t}\r\n\r\n\t\t\t//message handlers\r\n\t\t\tfunction handleReady() {\r\n\t\t\t\tclearInterval(uploadFrameInterval);\r\n\t\t\t\ttimeoutDefered.resolve(\"ready\");\r\n\t\t\t\tform.iframeReady(true);\r\n\t\t\t\tpostMessage({ msg: \"ready\" });\r\n\t\t\t}\r\n\r\n\t\t\tfunction handleFileData(value) {\r\n\t\t\t\tvalue.errorText = getError(value.errorType);\r\n\t\t\t\tform.textFileUpload(value.name);\r\n\t\t\t\tform.canUpload(!value.isFinished);\r\n\t\t\t\tcurrentFile = value;\r\n\r\n\t\t\t\tif (value.isFinished) {\r\n\t\t\t\t\tform.files.push(currentFile);\r\n\t\t\t\t\thandleFileDataStatus(currentFile, eTokenizationError.uploadError, value);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (value.errorType) {\r\n\t\t\t\t\tnotifyDependencies();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!value.isFinished && form.autoUpload) {\r\n\t\t\t\t\tupload();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfunction handleUploadStatus(value) {\r\n\t\t\t\tform.canBrowse(true);\r\n\t\t\t\tform.canUpload(false);\r\n\r\n\t\t\t\tvar fileData = value.data;\r\n\t\t\t\tvar index = form.files().length - 1;\r\n\r\n\t\t\t\tfileData.errorText = getError(fileData.errorType);\r\n\t\t\t\tfileData.name = form.files()[index].name;\r\n\t\t\t\tform.files.replace(form.files()[index], fileData);\r\n\r\n\t\t\t\thandleFileDataStatus(fileData, eTokenizationError.uploadError, value);\r\n\r\n\t\t\t\tif (fileData.errorType) {\r\n\t\t\t\t\tnotifyDependencies();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (value.result) {\r\n\t\t\t\t\tform.textFileUpload(\"\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfunction handleLogFileUploadData(fileData) {\r\n\t\t\t\tvar guid =\r\n\t\t\t\t\t!fileData.uploadResult || !fileData.uploadResult.guid ? claimGuid : fileData.uploadResult.guid;\r\n\t\t\t\tvar fileName =\r\n\t\t\t\t\t!fileData.uploadResult || !fileData.uploadResult.name\r\n\t\t\t\t\t\t? form.textFileUpload()\r\n\t\t\t\t\t\t: fileData.uploadResult.name;\r\n\t\t\t\tvar fileSize = !fileData.uploadResult || !fileData.uploadResult.size ? \"\" : fileData.uploadResult.size;\r\n\t\t\t\tvar contType =\r\n\t\t\t\t\t!fileData.uploadResult || !fileData.uploadResult.contenttype\r\n\t\t\t\t\t\t? \"\"\r\n\t\t\t\t\t\t: fileData.uploadResult.contenttype;\r\n\t\t\t\tvar errNum = -1; // -1 Unknown error (default)\r\n\t\t\t\tvar errorType = fileData.errType || fileData.uploadResult.error;\r\n\r\n\t\t\t\t// validationErrorCode existing\r\n\t\t\t\tif (\r\n\t\t\t\t\tfileData.uploadResult &&\r\n\t\t\t\t\tfileData.uploadResult.validationErrorCode &&\r\n\t\t\t\t\t/^\\d+$/.test(fileData.uploadResult.validationErrorCode)\r\n\t\t\t\t) {\r\n\t\t\t\t\terrNum = fileData.uploadResult.validationErrorCode;\r\n\t\t\t\t} else if (fileData.uploadResult && !fileData.uploadResult.validationErrorCode) {\r\n\t\t\t\t\t// validationErrorCode isn't exists\r\n\t\t\t\t\terrNum = fileSize > 0 && fileName.length && contType.length > 0 ? 0 : errNum; // 0 - uploaded success\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnotifyDependencies();\r\n\r\n\t\t\t\tif (errNum === 0) {\r\n\t\t\t\t\tif (recordType === eUploadDocumentType.ProofOfID) {\r\n\t\t\t\t\t\tStatesManager.States.docProofOfID(eUploadDocumentStatus.Processing);\r\n\t\t\t\t\t} else if (recordType === eUploadDocumentType.ProofOfResidence) {\r\n\t\t\t\t\t\tStatesManager.States.docProofOfResidence(eUploadDocumentStatus.Processing);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tuploadDocumentsPopUpsManager.showPopUp(recordType, customSuccessMessage);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar dalComplianceLogData = {\r\n\t\t\t\t\tErrNum: errNum,\r\n\t\t\t\t\tErrType: errorType,\r\n\t\t\t\t\tFileName: fileName,\r\n\t\t\t\t\tFileSize: fileSize,\r\n\t\t\t\t\tContType: contType,\r\n\t\t\t\t\tGuId: guid,\r\n\t\t\t\t\tRecType: recordType,\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (logDataExtra) {\r\n\t\t\t\t\tdalComplianceLogData.LogDataExtra = JSON.stringify(logDataExtra);\r\n\t\t\t\t\tlogDataExtra = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdalCompliance.logUploadResult(dalComplianceLogData);\r\n\t\t\t}\r\n\r\n\t\t\tfunction notifyDependencies() {\r\n\t\t\t\tif (general.isFunctionType(params.uploadResponseCallback)) {\r\n\t\t\t\t\tparams.uploadResponseCallback();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//actions\r\n\t\t\tfunction browse() {\r\n\t\t\t\tpostMessage({ msg: \"browse\" });\r\n\t\t\t}\r\n\r\n\t\t\tfunction upload() {\r\n\t\t\t\tform.canUpload(false);\r\n\t\t\t\tform.canBrowse(false);\r\n\t\t\t\tform.files.push(currentFile);\r\n\r\n\t\t\t\tgetClaim();\r\n\t\t\t}\r\n\r\n\t\t\tfunction uploadStringImage(imageDetails, extraInfo) {\r\n\t\t\t\tpostMessage({\r\n\t\t\t\t\tmsg: \"uploadStringImage\",\r\n\t\t\t\t\tvalue: {\r\n\t\t\t\t\t\tbase64Image: imageDetails.content,\r\n\t\t\t\t\t\tfileName: imageDetails.fileName,\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\r\n\t\t\t\tlogDataExtra = extraInfo || null;\r\n\t\t\t}\r\n\r\n\t\t\tfunction removeFileLog(fileData) {\r\n\t\t\t\tform.files.remove(fileData);\r\n\t\t\t}\r\n\r\n\t\t\t//helper functions\r\n\t\t\tfunction postMessage(message) {\r\n\t\t\t\tcommunicator.postMessage(form.iframeElement(), message, environmentData.pciPath);\r\n\t\t\t}\r\n\r\n\t\t\tfunction getClaim() {\r\n\t\t\t\tdalClaims\r\n\t\t\t\t\t.getClaim(eClaimActionType.Save, recordType, Customer.prop.accountNumber)\r\n\t\t\t\t\t.then(processClaim)\r\n\t\t\t\t\t.then(postClaim)\r\n\t\t\t\t\t.fail(onClaimError)\r\n\t\t\t\t\t.done();\r\n\t\t\t}\r\n\r\n\t\t\tfunction processClaim(claimResponseText) {\r\n\t\t\t\tvar claimResponse = JSONHelper.STR2JSON(\r\n\t\t\t\t\t\"UploadDocumentsComponentViewModel:processClaim\",\r\n\t\t\t\t\tclaimResponseText\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (!claimResponse || claimResponse.error) {\r\n\t\t\t\t\tthrow new Error(claimResponseText);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn claimResponse;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfunction postClaim(claimResponse) {\r\n\t\t\t\tpostMessage({\r\n\t\t\t\t\tmsg: \"upload\",\r\n\t\t\t\t\tvalue: claimResponse,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (form.successFirst()) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tform.successFirst(true);\r\n\t\t\t}\r\n\r\n\t\t\tfunction onClaimError(errorData) {\r\n\t\t\t\tform.canBrowse(true);\r\n\t\t\t\tform.canUpload(false);\r\n\t\t\t\tform.textFileUpload(\"\");\r\n\r\n\t\t\t\tvar index = form.files().length - 1;\r\n\t\t\t\tvar fileData = $.extend({}, form.files()[index]);\r\n\r\n\t\t\t\tfileData.errorText = getError(\"uploadError\");\r\n\t\t\t\tfileData.errorType = \"uploadError\";\r\n\t\t\t\tfileData.isSuccessfull = false;\r\n\t\t\t\tfileData.showProgress = false;\r\n\t\t\t\tfileData.isFinished = true;\r\n\t\t\t\tform.files.replace(form.files()[index], fileData);\r\n\r\n\t\t\t\tvar errorText = errorData.status ? \"Claim request failed with status \" + errorData.status : errorData;\r\n\t\t\t\thandleFileDataStatus(fileData, eTokenizationError.claimError, errorText);\r\n\r\n\t\t\t\tform.canUpload(false);\r\n\t\t\t\tform.canBrowse(true);\r\n\r\n\t\t\t\tnotifyDependencies();\r\n\t\t\t}\r\n\r\n\t\t\tfunction handleFileDataStatus(fileData, errorType, errorData) {\r\n\t\t\t\tif (!fileData.isSuccessfull && shouldWriteUploadErrorActivityLog(fileData)) {\r\n\t\t\t\t\tdalCommon.LogUploadActivityMessage(\r\n\t\t\t\t\t\terrorType,\r\n\t\t\t\t\t\tencodeURI(form.iframeSrc()) + \" \" + getErrorData(errorData)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//error related functions\r\n\t\t\tfunction getErrorData(errorData) {\r\n\t\t\t\tif (!errorData) {\r\n\t\t\t\t\treturn \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (errorData instanceof Error) {\r\n\t\t\t\t\treturn errorData.message + \" StackTrace: \" + (errorData.stack || \"\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn JSON.stringify(errorData);\r\n\t\t\t}\r\n\r\n\t\t\tfunction shouldWriteUploadErrorActivityLog(fileData) {\r\n\t\t\t\tif (!fileData.errorType) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!permissionsModule.CheckPermissions(\"uploadDocuments\")) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn fileData.errorType === \"uploadError\";\r\n\t\t\t}\r\n\r\n\t\t\tfunction getError(errorType) {\r\n\t\t\t\tif (errorType) {\r\n\t\t\t\t\tswitch (errorType) {\r\n\t\t\t\t\t\tcase \"noFileToUpload\":\r\n\t\t\t\t\t\tcase \"uploadError\":\r\n\t\t\t\t\t\t\treturn Dictionary.GetItem(\"lblErrMsgSendindFaildTitle\");\r\n\r\n\t\t\t\t\t\tcase \"fileTypeError\":\r\n\t\t\t\t\t\t\treturn Dictionary.GetItem(\"lblFileTypeError\");\r\n\r\n\t\t\t\t\t\tcase \"fileNumberError\":\r\n\t\t\t\t\t\t\treturn Dictionary.GetItem(\"lblFileCountError\");\r\n\r\n\t\t\t\t\t\tcase \"invalidFileName\":\r\n\t\t\t\t\t\t\treturn Dictionary.GetItem(\"lblFileNameError\");\r\n\r\n\t\t\t\t\t\tcase \"maxSize\":\r\n\t\t\t\t\t\t\treturn Dictionary.GetItem(\"lblFileSizeError\");\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn errorType;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn Dictionary.GetItem(\"lblSuccessfullyUploaded\");\r\n\t\t\t}\r\n\r\n\t\t\tfunction dispose() {\r\n\t\t\t\tform.iframeSrc(\"\");\r\n\t\t\t\tcommunicator.unregisterMessageHandler();\r\n\t\t\t\ttimeoutDefered.resolve(\"dispose\");\r\n\r\n\t\t\t\tif (uploadFrameInterval) {\r\n\t\t\t\t\tclearInterval(uploadFrameInterval);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tparent.dispose.call(self); // inherited from KoComponentViewModel\r\n\t\t\t}\r\n\r\n\t\t\tfunction registerCommunicator() {\r\n\t\t\t\tcommunicator.registerMessageHandler(environmentData.pciPath, {\r\n\t\t\t\t\tuploadStatus: handleUploadStatus,\r\n\t\t\t\t\tready: handleReady,\r\n\t\t\t\t\tlogUploadData: handleLogFileUploadData,\r\n\t\t\t\t\tfileData: handleFileData,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n        init:init,\r\n\t\t\t\tdispose: dispose,\r\n\t\t\t\tData: data,\r\n\t\t\t\tUpload: upload,\r\n\t\t\t\tUploadStringImage: uploadStringImage,\r\n\t\t\t\tBrowse: browse,\r\n\t\t\t\tRemoveFileLog: removeFileLog,\r\n\t\t\t\tForm: form,\r\n\t\t\t};\r\n\t\t}\r\n\t);\r\n\r\n  var createViewModel = function(params) {\r\n\t\tvar viewModel = new UploadDocumentsComponentViewModel(params);\r\n\r\n\t\tviewModel.init();\r\n\r\n\t\treturn viewModel;\r\n\t};\r\n\r\n\treturn {\r\n\t\tviewModel: { createViewModel: createViewModel },\r\n\t};\r\n});\r\n",
  "isBase64": false
}