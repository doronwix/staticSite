{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/NotificationsSettingsViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/NotificationsSettingsViewModel',\r\n    [\r\n        'helpers/ObservableCustomExtender',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'dataaccess/dalCompliance',\r\n        'devicemanagers/ViewModelsManager',\r\n        'initdatamanagers/Customer',\r\n        'Dictionary',\r\n        'modules/permissionsmodule',\r\n        'StateObject!Setting',\r\n        'devicemanagers/AlertsManager',\r\n        'JSONHelper'\r\n\r\n    ],\r\n    function (ko, general, KoComponentViewModel, dalCompliance, viewModelsManager, customer, dictionary, permissionsModule, settingStateObject, alertsManager, JSONHelper) {\r\n        var NotificationsSettingsViewModel = general.extendClass(KoComponentViewModel, function () {\r\n            var self = this,\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = this.Data, // inherited from KoComponentViewModel\r\n                handlers = {};\r\n\r\n            var eCampaignCategories = {\r\n                Other: 0,\r\n                Legal: 1,\r\n                AccountInformation: 2,\r\n                MovementsAndEvents: 3,\r\n                PromotionsOffers: 4,\r\n                Informative: 5,\r\n                EconomicCalendar: 6,\r\n                PriceAlert: 7,\r\n                LimitExecution: 8,\r\n                LowMarginAlert: 9,\r\n                AccountLiquidation: 10,\r\n                Support: 11\r\n            }\r\n\r\n            var tradingInformationCategories = [eCampaignCategories.LimitExecution, eCampaignCategories.LowMarginAlert, eCampaignCategories.AccountLiquidation],\r\n                marketingCategories = [eCampaignCategories.MovementsAndEvents, eCampaignCategories.EconomicCalendar, eCampaignCategories.Support, eCampaignCategories.PromotionsOffers];\r\n\r\n            var eNotificationsSettings_TradingInformation = {\r\n                CCID_8: 0,\r\n                CCID_9: 1,\r\n                CCID_10: 2\r\n            };\r\n\r\n            var eNotificationsSettings_Marketing = {\r\n                CCID_3: 0,\r\n                CCID_6: 1,\r\n                CCID_11: 2,\r\n                CCID_4: 3\r\n            };\r\n\r\n            var eNotificationsSettingsGroups = {\r\n                TradingInformation: 1,\r\n                Marketing: 2\r\n            }\r\n\r\n            var setObservables = function () {\r\n                data.isReady = ko.observable(false);\r\n                data.areNotificationsChanging = ko.observable(false);\r\n                data.notificationCategories = ko.observableArray([]);\r\n                data.lowMarginAlertValue = ko.observable();\r\n                data.minMargin = ko.observable(0.25);\r\n                data.maxMargin = ko.observable(10);\r\n                data.step = 0.25;\r\n                data.lowMarginAlertMinMax = ko.observable([data.minMargin(), data.maxMargin()]);\r\n                data.lowMarginAlertValue.extend({ amountValidation: data.lowMarginAlertMinMax, dirty: false });\r\n\r\n                data.lowMarginAlertValue.extend({\r\n                    notify: \"always\"\r\n                });\r\n                data.lowMarginAlertValueValid = ko.observable(true);\r\n                data.isCollapsed = ko.observable(true);\r\n                data.saveMarginButtonEnabled = ko.observable(false);\r\n                data.spinnerEnabled = ko.observable(false);\r\n                data.updated = Q.defer();\r\n                data.isProcessing = ko.observable(false);\r\n            };\r\n\r\n            var setSubscribers = function () {\r\n                data.lowMarginAlertValueValid.subscribe(updateAlertMarginValueSaveAvailable)\r\n                data.lowMarginAlertValue.subscribe(updateAlertMarginValueSaveAvailable);\r\n                data.updated.promise.then(function () {\r\n                    data.isReady(true);\r\n                })\r\n            }\r\n\r\n            function updateAlertMarginValueSaveAvailable() {\r\n                var lowMarginCategory = data.notificationCategories().find(function (category) {\r\n                    return category.CampaignCategoryID === eCampaignCategories.LowMarginAlert;\r\n                });\r\n                if (lowMarginCategory) {\r\n                    var validLowMarginValue = !general.isNullOrUndefined(data.lowMarginAlertValue()) && data.lowMarginAlertValue() !== '' && data.lowMarginAlertValueValid();\r\n                    var categoryAllowed = false;\r\n                    for (var i = 0, length = lowMarginCategory.CategoryMethods.length; i < length; i++) {\r\n                        if (lowMarginCategory.CategoryMethods[i].Enable) {\r\n                            categoryAllowed = categoryAllowed || lowMarginCategory.CategoryMethods[i].ObservableAllowed();\r\n                        }\r\n                    }\r\n                    data.spinnerEnabled(categoryAllowed)\r\n                    data.saveMarginButtonEnabled(validLowMarginValue && categoryAllowed && data.lowMarginAlertValue.isDirty());\r\n                }\r\n\r\n\r\n            }\r\n\r\n            var updateNotificationCategories = function (responseText) {\r\n                var response = JSONHelper.STR2JSON(\"NotificationsSettingsViewModel/getNotificationsSettings\",\r\n                    responseText,\r\n                    eErrorSeverity.medium);\r\n\r\n                if (response && response.Status === eOperationStatus.Success) {\r\n\r\n                    if (response.Result.MinExposureCoverage !== 0 && response.Result.MaxExposureCoverage !== 0) {\r\n                        data.minMargin(response.Result.MinExposureCoverage);\r\n                        data.maxMargin(response.Result.MaxExposureCoverage);\r\n                        data.lowMarginAlertMinMax([data.minMargin(), data.maxMargin()]);\r\n                    }\r\n\r\n                    if (!data.lowMarginAlertValue() && response.Result.MinPctEQXP !== 0) {\r\n                        data.lowMarginAlertValue(response.Result.MinPctEQXP);\r\n                        data.lowMarginAlertValue.markClean();\r\n                    }\r\n\r\n                    response.Result.SendingCategoryList.forEach(function (category) {\r\n                        if (tradingInformationCategories.indexOf(category.CampaignCategoryID) > -1) {\r\n                            category.groupId = eNotificationsSettingsGroups.TradingInformation;\r\n                            category.order = eNotificationsSettings_TradingInformation['CCID_' + category.CampaignCategoryID];\r\n                        }\r\n                        if (marketingCategories.indexOf(category.CampaignCategoryID) > -1) {\r\n                            category.groupId = eNotificationsSettingsGroups.Marketing;\r\n                            category.order = eNotificationsSettings_Marketing['CCID_' + category.CampaignCategoryID];\r\n                        }\r\n\r\n                        category.subscriptions = category.subscriptions || [];\r\n                        for (var i = 0, length = category.CategoryMethods.length; i < length; i++) {\r\n\r\n                            if (category.CategoryMethods[i].Enable) {\r\n                                category.CategoryMethods[i].ObservableAllowed = ko.observable(category.CategoryMethods[i].Allowed);\r\n\r\n                                if (!isRestricted()) {\r\n                                    category.subscriptions.push(\r\n                                        setSubscriber(category.CategoryMethods[i].ObservableAllowed,\r\n                                            { categoryId: category.CampaignCategoryID, methodId: category.CategoryMethods[i].SendingMethodId }));\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    var prevCategoriesArray = data.notificationCategories();\r\n                    prevCategoriesArray.forEach(function (category) {\r\n                        category.subscriptions.forEach(function (subcription) {\r\n                            subcription.dispose();\r\n                        });\r\n                    });\r\n\r\n                    data.notificationCategories(response.Result.SendingCategoryList);\r\n\r\n                    data.areNotificationsChanging(false);\r\n                    updateAlertMarginValueSaveAvailable();\r\n                }\r\n                data.updated.resolve();\r\n            };\r\n\r\n            var getNotificationsSettings = function () {\r\n                dalCompliance.getNotificationsSettings()\r\n                    .then(updateNotificationCategories)\r\n                    .done();\r\n            };\r\n\r\n            var setSubscriber = function (allowedObservable, context) {\r\n\r\n                return self.subscribeTo(allowedObservable, function (allowed) {\r\n                    var categoryId = this.categoryId,\r\n                        methodId = this.methodId;\r\n\r\n\r\n                    if (data.areNotificationsChanging()) {\r\n                        return;\r\n                    }\r\n\r\n                    var currentChangedCategory = data.notificationCategories().find(function (category) {\r\n                        return category.CampaignCategoryID === categoryId;\r\n                    });\r\n\r\n                    if (!currentChangedCategory) {\r\n                        return;\r\n                    }\r\n\r\n                    var currentChangedMethod = currentChangedCategory.CategoryMethods.find(function (method) {\r\n                        return method.SendingMethodId === methodId;\r\n                    });\r\n\r\n                    if (!currentChangedMethod) {\r\n                        return;\r\n                    }\r\n\r\n                    currentChangedMethod.Allowed = allowed;\r\n\r\n                    ko.postbox.publish(\r\n                        'notifications-settings-change',\r\n                        currentChangedCategory.CampaignCategoryName + '+' + currentChangedMethod.SendingMethodName + '+' + currentChangedMethod.Allowed\r\n                    );\r\n\r\n                    data.areNotificationsChanging(true);\r\n\r\n                    dalCompliance.setNotificationsSettings(data.notificationCategories())\r\n                        .then(updateNotificationCategories)\r\n                        .done();\r\n                }, context);\r\n            };\r\n\r\n            var init = function (settings) {\r\n                parent.init.call(self, settings);   // inherited from KoComponentViewModel\r\n\r\n                setObservables();\r\n\r\n                setSubscribers();\r\n\r\n                getNotificationsSettings();\r\n\r\n                isOpenCollapsed();\r\n\r\n            };\r\n            if (!settingStateObject.get(\"AccountHubSetting\")) {\r\n                settingStateObject.set(\"AccountHubSetting\", null);\r\n            }\r\n            settingStateObject.subscribe(\"AccountHubSetting\", function (view) {\r\n                data.isCollapsed(view !== eViewTypes.vNotificationsSettings);\r\n            });\r\n\r\n            function saveButtonHandler() {\r\n                if (isRestricted()) {\r\n                    restrictedAlert();\r\n                    return;\r\n                }\r\n\r\n                data.isProcessing(true);\r\n                customer.prop.minPctEQXP = data.lowMarginAlertValue();\r\n\r\n\r\n                dalCompliance.sendExposureCoverage(data.lowMarginAlertValue(),\r\n                    function () {\r\n                        data.isProcessing(false);\r\n                        data.lowMarginAlertValue.markClean();\r\n                        updateAlertMarginValueSaveAvailable();\r\n                    });\r\n            }\r\n\r\n            function isOpenCollapsed() {\r\n                if (customer.prop.isDemo) {\r\n                    return data.isCollapsed(true);\r\n                }\r\n\r\n                if (viewModelsManager.VManager.GetViewArgs(eViewTypes.vNotificationsSettings) === eViewTypes.vNotificationsSettings)\r\n                    data.isCollapsed(false);\r\n            }\r\n\r\n            function getDataByGroup(groupId) {\r\n                var group = data.notificationCategories().filter(function (categoryData) {\r\n                    return categoryData.groupId === groupId;\r\n                });\r\n                group = group.sort(function (l, r) { return l.order > r.order ? 1 : -1 });\r\n                return group;\r\n            }\r\n\r\n            var collapsedToggle = function () {\r\n\r\n                if (customer.prop.isDemo) {\r\n                    viewModelsManager.VManager.RedirectToForm(eForms.Settings, eViewTypes.vNotificationsSettings);\r\n                    return;\r\n                }\r\n                data.isCollapsed(!data.isCollapsed());\r\n            }\r\n\r\n            function isRestricted() {\r\n                return !permissionsModule.CheckPermissions('notificationsSettings');\r\n            }\r\n\r\n            function restrictedAlert() {\r\n                alertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, Dictionary.GetItem(\"GenericAlert\"), Dictionary.GetItem('Forbidden'), null);\r\n                alertsManager.PopAlert(AlertTypes.ServerResponseAlert);\r\n            }\r\n\r\n            function checkPermissions() {\r\n                if (isRestricted())\r\n                    restrictedAlert();\r\n            }\r\n\r\n            var dispose = function () {\r\n                handlers.notificationSettingChanged = null;\r\n                parent.dispose.call(self);          // inherited from KoComponentViewModel\r\n            };\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Handlers: handlers,\r\n                Data: data,\r\n                Dictionary: dictionary,\r\n                GetDataByGroup: getDataByGroup,\r\n                eNotificationsSettingsGroups: eNotificationsSettingsGroups,\r\n                eCampaignCategories: eCampaignCategories,\r\n                CollapsedToggle: collapsedToggle,\r\n                SaveButtonHandler: saveButtonHandler,\r\n                IsRestricted: isRestricted,\r\n                CheckPermissions: checkPermissions\r\n            };\r\n        });\r\n\r\n        var createViewModel = function (params) {\r\n            var viewModel = new NotificationsSettingsViewModel(params);\r\n            viewModel.init();\r\n\r\n            return viewModel;\r\n        };\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            },\r\n            NotificationsSettingsViewModel: NotificationsSettingsViewModel\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}