{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/devices/web/uilayer/viewmodels/Deals/Modules/CloseDealModule.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'deviceviewmodels/Deals/Modules/CloseDealModule',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'dataaccess/dalorder',\r\n        'managers/CustomerProfileManager',\r\n        'initdatamanagers/InstrumentsManager',\r\n        'devicemanagers/StatesManager',\r\n        'StateObject!Transaction',\r\n        'viewmodels/Deals/CloseDealBaseViewModel'\r\n    ],\r\n    function CloseDealModuleDefault(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            dalOrders = require('dataaccess/dalorder'),\r\n            CloseDealBaseViewModel = require('viewmodels/Deals/CloseDealBaseViewModel'),\r\n            instrumentsManager = require('initdatamanagers/InstrumentsManager'),\r\n\r\n            StatesManager = require('devicemanagers/StatesManager'),\r\n            stateObject = require('StateObject!Transaction'),\r\n            customerProfileManager = require('managers/CustomerProfileManager');\r\n\r\n        var CloseDealModule = general.extendClass(CloseDealBaseViewModel, function CloseDealModuleClass() {\r\n            var self = this,\r\n                parent = this.parent, // inherited from CloseDealBaseViewModel\r\n                data = this.Data, // inherited from CloseDealBaseViewModel\r\n                baseOrder = parent.BaseOrder;\r\n\r\n            function init(customSettings) {\r\n                if (!stateObject.containsKey(\"stateObjectIsReadyDefer\")) {\r\n                    stateObject.set('stateObjectIsReadyDefer', Q.defer());\r\n                }\r\n\r\n                parent.init.call(self, customSettings);\r\n\r\n                setObservables();\r\n                setComputables();\r\n                setSubscribers();\r\n\r\n                setViewByUserProfile();\r\n\r\n                stateObject.get('stateObjectIsReadyDefer').resolve();\r\n            }\r\n\r\n            function setObservables() {\r\n                data.showTools = stateObject.set('showTools', ko.observable(false));\r\n            }\r\n\r\n            function setComputables() {\r\n                data.showForwardPips = self.createComputed(function () {\r\n                    if (!data.HasPosition()) {\r\n                        return false;\r\n                    }\r\n\r\n                    var selectedPosition = ko.utils.unwrapObservable(data.SelectedPosition);\r\n                    var fwPips = ko.utils.unwrapObservable(selectedPosition.fwPips);\r\n\r\n                    return parseFloat(fwPips) !== 0;\r\n                });\r\n            }\r\n\r\n            function setSubscribers() {\r\n                self.subscribeTo(data.showTools, function (isExpanded) {\r\n                    var profileCustomer = customerProfileManager.ProfileCustomer();\r\n\r\n                    profileCustomer.closeDealTools = Number(isExpanded);\r\n\r\n                    customerProfileManager.ProfileCustomer(profileCustomer);\r\n                });\r\n            }\r\n\r\n            function setViewByUserProfile() {\r\n                var profileCustomer = customerProfileManager.ProfileCustomer();\r\n\r\n                data.showTools(profileCustomer.closeDealTools === 1);\r\n            }\r\n\r\n            function closeDeal() {\r\n                if (!data.CloseDealReady()) {\r\n                    return;\r\n                }\r\n\r\n                data.isProcessing(true);\r\n\r\n                if (StatesManager.States.fxDenied() == true) {\r\n                    baseOrder.ValidateOnlineTradingUser();\r\n                    data.isProcessing(false);\r\n                    return;\r\n                }\r\n\r\n                dalOrders.CloseDeals([\r\n                    {\r\n                        positionNumber: data.SelectedPosition().positionNumber,\r\n                        spotRate: data.SelectedPosition().spotRate,\r\n                        fwPips: data.SelectedPosition().fwPips,\r\n                        dealRate: data.SelectedPosition().dealRate,\r\n                        instrumentID: data.SelectedPosition().instrumentID\r\n                    }\r\n                ], onCloseDealReturn, { failCallback: onCloseDealFail });\r\n            }\r\n\r\n            function onCloseDealReturn(result, callerId, requestData) {\r\n                data.isProcessing(false);\r\n                var instrument = instrumentsManager.GetInstrument(data.selectedInstrument());\r\n\r\n                if (instrument) {\r\n                    baseOrder.OnActionReturn(result, callerId, instrument, { requestData: requestData });\r\n                }\r\n            }\r\n\r\n            function onCloseDealFail() {\r\n                data.isProcessing(false);\r\n            }\r\n\r\n            function toggleView() {\r\n                data.isCollapsed(!data.isCollapsed());\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                Data: data,\r\n                ToggleView: toggleView,\r\n                CloseDeal: closeDeal\r\n            };\r\n        });\r\n\r\n        return {\r\n            ViewModel: CloseDealModule\r\n        };\r\n    }\r\n);",
  "isBase64": false
}