{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/devices/web/uilayer/viewmodels/Deals/Modules/EditLimitModule.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'deviceviewmodels/Deals/Modules/EditLimitModule',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'managers/CustomerProfileManager',\r\n        'StateObject!Transaction',\r\n        'viewmodels/Limits/EditLimitBaseViewModel'\r\n    ],\r\n    function EditLimitModuleDefault(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            customerProfileManager = require('managers/CustomerProfileManager'),\r\n            stateObject = require('StateObject!Transaction'),\r\n            EditLimitBaseViewModel = require('viewmodels/Limits/EditLimitBaseViewModel');\r\n\r\n        var EditLimitModule = general.extendClass(EditLimitBaseViewModel, function EditLimitModuleClass() {\r\n            var self = this,\r\n                parent = this.parent, // inherited from EditLimitBaseViewModel\r\n                data = this.Data, // inherited from EditLimitBaseViewModel\r\n                validationModel = parent.ValidationModel,\r\n                isValid = ko.observable(false),\r\n                fieldWrappers = parent.FieldWrappers,\r\n                setLimitsViewModel = parent.SetLimitsViewModel;\r\n\r\n            var init = function (customSettings) {\r\n                if (!stateObject.containsKey(\"stateObjectIsReadyDefer\")) {\r\n                    stateObject.set('stateObjectIsReadyDefer', Q.defer());\r\n                }\r\n\r\n                parent.init.call(self, customSettings); // inherited from EditLimitBaseViewModel    \r\n\r\n                setObservables();\r\n                setComputables();\r\n                setSubscribers();\r\n\r\n                setLimitsViewModel.Start(setLimitsModelDependencies);\r\n\r\n                setViewByUserProfile();\r\n\r\n                stateObject.get('stateObjectIsReadyDefer').resolve();\r\n            };\r\n\r\n            var setObservables = function () {\r\n                data.showLimitsSlideCompleted = ko.observable(false);\r\n\r\n                //Limits\r\n                data.toggleLimitsSection = function () {\r\n                    var currentValue = !!data.showLimits();\r\n                    data.showLimits(!currentValue);\r\n                };\r\n\r\n                //Tools\r\n                data.showTools = stateObject.set('showTools', ko.observable(false));\r\n\r\n                data.corporateActionDate(general.str2Date(data.corporateActionDate(), \"d/m/Y H:M\"));\r\n            };\r\n\r\n            var setComputables = function () {\r\n                data.showSLSummary = self.createComputed(function () {\r\n                    var displaySummary = !!ko.utils.unwrapObservable(setLimitsViewModel.Data.displaySLSummary);\r\n\r\n                    return !data.showLimits() && data.enableSLLimit() && displaySummary;\r\n                });\r\n\r\n                data.showTPSummary = self.createComputed(function () {\r\n                    var displaySummary = !!ko.utils.unwrapObservable(setLimitsViewModel.Data.displayTPSummary);\r\n\r\n                    return !data.showLimits() && data.enableTPLimit() && displaySummary;\r\n                });\r\n\r\n                data.showLimitsSummary = self.createComputed(function () {\r\n                    return data.showSLSummary() || data.showTPSummary();\r\n                });\r\n\r\n            };\r\n\r\n            var setSubscribers = function () {\r\n                self.subscribeTo(data.showTools, function (isExpanded) {\r\n                    var profileCustomer = customerProfileManager.ProfileCustomer();\r\n                    profileCustomer.editLimitTools = Number(isExpanded);\r\n                    customerProfileManager.ProfileCustomer(profileCustomer);\r\n                });\r\n\r\n                self.subscribeTo(data.EditLimitReady, (function (value) {\r\n                    isValid(value);\r\n                }));\r\n\r\n                self.subscribeTo(data.showLimits, function (isExpanded) {\r\n                    var profileCustomer = customerProfileManager.ProfileCustomer();\r\n                    profileCustomer.editLimitIfDoneExpanded = Number(isExpanded);\r\n                    customerProfileManager.ProfileCustomer(profileCustomer);\r\n\r\n                    data.showLimitsSlideCompleted(false);\r\n\r\n                    if (!isExpanded && data.ViewModelReady()) {\r\n                        // SL\r\n                        setLimitsViewModel.Data.stopLossRate.closeTooltip();\r\n                        fieldWrappers.Data.stopLossInCustomerCcy.closeTooltip();\r\n                        setLimitsViewModel.Data.stopLossPercent.closeTooltip();\r\n\r\n                        // TP\r\n                        setLimitsViewModel.Data.takeProfitRate.closeTooltip();\r\n                        fieldWrappers.Data.takeProfitInCustomerCcy.closeTooltip();\r\n                        setLimitsViewModel.Data.takeProfitPercent.closeTooltip();\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(data.showLimitsSlideCompleted, function (slideCompleted) {\r\n                    if (slideCompleted && data.showLimits()) {\r\n                        // SL\r\n                        setLimitsViewModel.Data.stopLossRate.resetTooltip();\r\n                        fieldWrappers.Data.stopLossInCustomerCcy.resetTooltip();\r\n                        setLimitsViewModel.Data.stopLossPercent.resetTooltip();\r\n\r\n                        // TP\r\n                        setLimitsViewModel.Data.takeProfitRate.resetTooltip();\r\n                        fieldWrappers.Data.takeProfitInCustomerCcy.resetTooltip();\r\n                        setLimitsViewModel.Data.takeProfitPercent.resetTooltip();\r\n                    }\r\n                });\r\n            };\r\n\r\n            var setViewByUserProfile = function () {\r\n                var profileCustomer = customerProfileManager.ProfileCustomer();\r\n                data.showTools(profileCustomer.editLimitTools === 1);\r\n            };\r\n\r\n            var setLimitsModelDependencies = function () {\r\n                validationModel.Limits = ko.validatedObservable({\r\n                    stopLossAmount: setLimitsViewModel.Data.stopLossAmount,\r\n                    takeProfitAmount: setLimitsViewModel.Data.takeProfitAmount,\r\n                    ccySLAmount: setLimitsViewModel.Data.ccySLAmount,\r\n                    ccyTPAmount: setLimitsViewModel.Data.ccyTPAmount,\r\n                    stopLossRate: setLimitsViewModel.Data.stopLossRate,\r\n                    takeProfitRate: setLimitsViewModel.Data.takeProfitRate,\r\n                    stopLossPercent: setLimitsViewModel.Data.stopLossPercent,\r\n                    takeProfitPercent: setLimitsViewModel.Data.takeProfitPercent\r\n                });\r\n\r\n                var slAmountTooltip = ko.observable(false);\r\n                var slRateTooltip = ko.observable(false);\r\n                var slPercentTooltip = ko.observable(false);\r\n                var tpAmountTooltip = ko.observable(false);\r\n                var tpRateTooltip = ko.observable(false);\r\n                var tpPercentTooltip = ko.observable(false);\r\n\r\n                // SL amount tooltip validation\r\n                fieldWrappers.Data.stopLossInCustomerCcy.extend({\r\n                    tooltipValidation: {\r\n                        message: Dictionary.GetItem(\"txtRateValidationTooltip\", null, \"\"),\r\n                        showTooltip: function () {\r\n                            return (setLimitsViewModel.Data.curSlActiveTab() == eSetLimitsTabs.Amount || setLimitsViewModel.Data.curSlActiveTab() == setLimitsViewModel.Data.defaultTab) && slAmountTooltip();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(fieldWrappers.Data.stopLossInCustomerCcy.tooltipClosed, function (isClosed) {\r\n                    if (isClosed) {\r\n                        slAmountTooltip(false);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(fieldWrappers.Data.stopLossInCustomerCcy, function () {\r\n                    slAmountTooltip(false);\r\n                });\r\n\r\n                // SL rate tooltip validation\r\n                setLimitsViewModel.Data.stopLossRate.extend({\r\n                    tooltipValidation: {\r\n                        message: Dictionary.GetItem(\"txtRateValidationTooltip\", null, \"\"),\r\n                        showTooltip: function () {\r\n                            return (setLimitsViewModel.Data.curSlActiveTab() == eSetLimitsTabs.Rate || setLimitsViewModel.Data.curSlActiveTab() == setLimitsViewModel.Data.defaultTab) && slRateTooltip();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsViewModel.Data.stopLossRate.tooltipClosed, function (isClosed) {\r\n                    if (isClosed) {\r\n                        slRateTooltip(false);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsViewModel.Data.stopLossRate, function () {\r\n                    slRateTooltip(false);\r\n                });\r\n\r\n                // SL percent tooltip validation\r\n                setLimitsViewModel.Data.stopLossPercent.extend({\r\n                    tooltipValidation: {\r\n                        message: Dictionary.GetItem(\"txtRateValidationTooltip\", null, \"\"),\r\n                        showTooltip: function () {\r\n                            return (setLimitsViewModel.Data.curSlActiveTab() === eSetLimitsTabs.Percent || setLimitsViewModel.Data.curSlActiveTab() === setLimitsViewModel.Data.defaultTab) && slPercentTooltip();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsViewModel.Data.stopLossPercent.tooltipClosed, function (isClosed) {\r\n                    if (isClosed) {\r\n                        slPercentTooltip(false);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsViewModel.Data.stopLossPercent, function () {\r\n                    slPercentTooltip(false);\r\n                });\r\n\r\n                // TP amount tooltip validation\r\n                fieldWrappers.Data.takeProfitInCustomerCcy.extend({\r\n                    tooltipValidation: {\r\n                        message: Dictionary.GetItem(\"txtRateValidationTooltip\", null, \"\"),\r\n                        showTooltip: function () {\r\n                            return (setLimitsViewModel.Data.curTpActiveTab() === eSetLimitsTabs.Amount || setLimitsViewModel.Data.curTpActiveTab() == setLimitsViewModel.Data.defaultTab) && tpAmountTooltip();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(fieldWrappers.Data.takeProfitInCustomerCcy.tooltipClosed, function (isClosed) {\r\n                    if (isClosed) {\r\n                        tpAmountTooltip(false);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(fieldWrappers.Data.takeProfitInCustomerCcy, function () {\r\n                    tpAmountTooltip(false);\r\n                });\r\n\r\n                // TP rate tooltip validation\r\n                setLimitsViewModel.Data.takeProfitRate.extend({\r\n                    tooltipValidation: {\r\n                        message: Dictionary.GetItem(\"txtRateValidationTooltip\", null, \"\"),\r\n                        showTooltip: function () {\r\n                            return (setLimitsViewModel.Data.curTpActiveTab() == eSetLimitsTabs.Rate || setLimitsViewModel.Data.curTpActiveTab() == setLimitsViewModel.Data.defaultTab) && tpRateTooltip();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsViewModel.Data.takeProfitRate.tooltipClosed, function (isClosed) {\r\n                    if (isClosed) {\r\n                        tpRateTooltip(false);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsViewModel.Data.takeProfitRate, function () {\r\n                    tpRateTooltip(false);\r\n                });\r\n\r\n                // TP percent tooltip validation\r\n                setLimitsViewModel.Data.takeProfitPercent.extend({\r\n                    tooltipValidation: {\r\n                        message: Dictionary.GetItem(\"txtRateValidationTooltip\", null, \"\"),\r\n                        showTooltip: function () {\r\n                            return (setLimitsViewModel.Data.curTpActiveTab() === eSetLimitsTabs.Percent || setLimitsViewModel.Data.curTpActiveTab() === setLimitsViewModel.Data.defaultTab) && tpPercentTooltip();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsViewModel.Data.takeProfitPercent.tooltipClosed, function (isClosed) {\r\n                    if (isClosed) {\r\n                        tpPercentTooltip(false);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsViewModel.Data.takeProfitPercent, function () {\r\n                    tpPercentTooltip(false);\r\n                });\r\n\r\n                // reset toolpip visibility\r\n                self.addDisposable(\r\n                    ko.postbox.subscribe('deal-slip-show-validation-tooltips', function () {\r\n                        slAmountTooltip(true);\r\n                        slRateTooltip(true);\r\n                        slPercentTooltip(true);\r\n                        tpAmountTooltip(true);\r\n                        tpRateTooltip(true);\r\n                        tpPercentTooltip(true);\r\n                    })\r\n                );\r\n\r\n                // ------------------------------------------------------------\r\n                // Stop Loss\r\n                // ------------------------------------------------------------\r\n                self.subscribeTo(data.enableSLLimit, function (enabled) {\r\n                    if (!enabled) {\r\n                        setLimitsViewModel.Data.stopLossRate(\"\");\r\n                        setLimitsViewModel.Data.stopLossAmount(\"\");\r\n                        setLimitsViewModel.Data.stopLossPercent(\"\");\r\n                        fieldWrappers.Data.stopLossInCustomerCcy(\"\");\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsViewModel.Data.curSlActiveTab, function (activeTab) {\r\n                    data.isSlRateActiveTab(activeTab === eSetLimitsTabs.Rate);\r\n                    data.isSlAmountActiveTab(activeTab === eSetLimitsTabs.Amount);\r\n                    data.isSlPercentActiveTab(activeTab === eSetLimitsTabs.Percent);\r\n                });\r\n\r\n                self.subscribeTo(setLimitsViewModel.Data.stopLossPercent, function (stopLossPercent) {\r\n                    data.displaySlPercentSymbol(!general.isEmptyValue(stopLossPercent) && stopLossPercent !== \"NA\");\r\n                });\r\n\r\n                self.subscribeTo(fieldWrappers.Data.stopLossInCustomerCcy, function (stopLossInCustomerCcy) {\r\n                    data.displaySlAmountCcySymbol(!general.isEmptyValue(stopLossInCustomerCcy) && stopLossInCustomerCcy !== \"NA\");\r\n                });\r\n\r\n                // ------------------------------------------------------------\r\n                // Take Profit\r\n                // ------------------------------------------------------------\r\n                self.subscribeTo(data.enableTPLimit, function (enabled) {\r\n                    if (!enabled) {\r\n                        setLimitsViewModel.Data.takeProfitRate(\"\");\r\n                        setLimitsViewModel.Data.takeProfitAmount(\"\");\r\n                        setLimitsViewModel.Data.takeProfitPercent(\"\");\r\n                        fieldWrappers.Data.takeProfitInCustomerCcy(\"\");\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(setLimitsViewModel.Data.curTpActiveTab, function (activeTab) {\r\n                    data.isTpRateActiveTab(activeTab === eSetLimitsTabs.Rate);\r\n                    data.isTpAmountActiveTab(activeTab === eSetLimitsTabs.Amount);\r\n                    data.isTpPercentActiveTab(activeTab === eSetLimitsTabs.Percent);\r\n                });\r\n\r\n                self.subscribeTo(setLimitsViewModel.Data.takeProfitPercent, function (takeProfitPercent) {\r\n                    data.displayTpPercentSymbol(!general.isEmptyValue(takeProfitPercent) && takeProfitPercent !== \"NA\");\r\n                });\r\n\r\n                self.subscribeTo(fieldWrappers.Data.takeProfitInCustomerCcy, function (takeProfitInCustomerCcy) {\r\n                    data.displayTpAmountCcySymbol(!general.isEmptyValue(takeProfitInCustomerCcy) && takeProfitInCustomerCcy !== \"NA\");\r\n                });\r\n\r\n                // Update the limits ready flag\r\n                data.limitsReady(true);\r\n                parent.setLimitTabsFromClientProfile();\r\n            };\r\n            var dispose = function () {\r\n                parent.dispose.call(self);\r\n            };\r\n\r\n            return {\r\n                init: init,\r\n                Data: data,\r\n                dispose: dispose,\r\n                IsValid: isValid\r\n            };\r\n        });\r\n\r\n        return {\r\n            ViewModel: EditLimitModule\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}