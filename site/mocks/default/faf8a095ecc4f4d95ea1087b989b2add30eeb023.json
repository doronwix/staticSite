{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/Deals/DealToolsBaseViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/Deals/DealToolsBaseViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'managers/CustomerProfileManager',\r\n        'StateObject!Transaction'\r\n    ],\r\n    function DealToolsDef(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            koComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            customerProfileManager = require('managers/CustomerProfileManager'),\r\n            stateObject = require('StateObject!Transaction');\r\n\r\n        var DealToolsViewModel = general.extendClass(koComponentViewModel, function DealToolsClass() {\r\n            var self = this,\r\n                parent = this.parent,               // inherited from KoComponentViewModel\r\n                data = this.Data,                   // inherited from KoComponentViewModel\r\n                handlers = {},\r\n                defaultToolTab,\r\n                dealData = {},\r\n                stateObjectSubscriptions = [];\r\n\r\n            function init(settings) {\r\n                parent.init.call(self, settings);   // inherited from KoComponentViewModel\r\n\r\n                setInitialObservables();\r\n\r\n                if (stateObject.set(eStateObjectTopics.ReadyForUse, false)) {\r\n                    initDelayed(settings);\r\n                } else {\r\n                    stateObjectSubscriptions.push({\r\n                        unsubscribe: stateObject.subscribe(eStateObjectTopics.ReadyForUse, function (isReady) {\r\n                            if (isReady) {\r\n                                initDelayed(settings);\r\n                            }\r\n                        })\r\n                    });\r\n                }\r\n            }\r\n\r\n            function setInitialObservables() {\r\n                data.isDataLoaded = ko.observable(false);\r\n                data.showTools = stateObject.set(\"showTools\", ko.observable(false));\r\n                data.showChartSignals = stateObject.set(\"showChartSignals\", false);\r\n                data.selectedInstrument = ko.observable(0);\r\n                data.isVisible = ko.observable(true);\r\n            }\r\n\r\n            function initDelayed(settings) {\r\n                dealData = general.extendType(dealData, stateObject.getAll());\r\n                setProperties(dealData);\r\n                setObservables(settings);\r\n                setComputables();\r\n                setSubscribers();\r\n                setHandlers();\r\n                data.isDataLoaded(true);\r\n            }\r\n\r\n            function dispose() {\r\n                handlers.chartBtnClick = null;\r\n                handlers.marketInfoBtnClick = null;\r\n                handlers.calendarBtnClick = null;\r\n                handlers.signalsBtnClick = null;\r\n                handlers.instrumentInfoBtnClick = null;\r\n                handlers.toggleToolsClick = null;\r\n\r\n                stateObject.unset('showChartSignals');\r\n\r\n                while (stateObjectSubscriptions.length > 0) {\r\n                    stateObjectSubscriptions\r\n                        .pop()\r\n                        .unsubscribe();\r\n                }\r\n\r\n                parent.dispose.call(self);  // inherited from KoComponentViewModel\r\n            }\r\n\r\n            function setProperties(settings) {\r\n                dealData.orderDir = dealData.orderDir || settings.orderDir;\r\n            }\r\n\r\n            function setObservables(settings) {\r\n                var profileCustomer = customerProfileManager.ProfileCustomer();\r\n\r\n                if (profileCustomer) {\r\n                    defaultToolTab = profileCustomer.defaultTab;\r\n                    data.showTools(profileCustomer.tools === 1);\r\n                }\r\n                else if (dealData.initialToolTab) {\r\n                    defaultToolTab = dealData.initialToolTab();\r\n                }\r\n                else {\r\n                    defaultToolTab = eNewDealTool.None;\r\n                }\r\n\r\n                if (settings.transArgs) {\r\n                    if (settings.transArgs.transactionType === eTransactionSwitcher.NewPriceAlert) {\r\n                        data.isVisible(false);\r\n                    }\r\n                    else if (settings.transArgs.tab) {\r\n                        defaultToolTab = settings.transArgs.tab;\r\n                        data.showTools(true);\r\n                    }\r\n                }\r\n\r\n                data.selectedToolTab = ko.observable(defaultToolTab);\r\n            }\r\n\r\n            function setHandlers() {\r\n                handlers.chartBtnClick = function chartBtnClick() {\r\n                    data.selectedToolTab(eNewDealTool.Chart);\r\n                };\r\n\r\n                handlers.marketInfoBtnClick = function marketInfoBtnClick() {\r\n                    data.selectedToolTab(eNewDealTool.MarketLiveInfo);\r\n                };\r\n\r\n                handlers.calendarBtnClick = function calendarBtnClick() {\r\n                    data.selectedToolTab(eNewDealTool.EconomicCalendar);\r\n                };\r\n\r\n                handlers.signalsBtnClick = function signalsBtnClick() {\r\n                    data.selectedToolTab(eNewDealTool.Signals);\r\n                };\r\n\r\n                handlers.instrumentInfoBtnClick = function instrumentInfoBtnClick() {\r\n                    data.selectedToolTab(eNewDealTool.InstrumentInfo);\r\n                };\r\n\r\n                handlers.toggleToolsClick = function toggleToolsClick() {\r\n                    data.showTools(!data.showTools());\r\n                }\r\n            }\r\n\r\n            function setComputables() {\r\n                data.isChartToolVisible = self.createComputed(function () {\r\n                    return data.selectedToolTab() == eNewDealTool.Chart && data.showTools();\r\n                });\r\n\r\n                data.isMarketInfoToolVisible = self.createComputed(function () {\r\n                    return data.selectedToolTab() == eNewDealTool.MarketLiveInfo && data.showTools();\r\n                });\r\n\r\n                data.isCalendarToolVisible = self.createComputed(function () {\r\n                    return data.selectedToolTab() == eNewDealTool.EconomicCalendar && data.showTools();\r\n                });\r\n\r\n                data.isSignalsToolVisible = self.createComputed(function () {\r\n                    return data.selectedToolTab() == eNewDealTool.Signals && data.showTools();\r\n                });\r\n\r\n                data.isInstrumentInfoToolVisible = self.createComputed(function () {\r\n                    return data.selectedToolTab() == eNewDealTool.InstrumentInfo && data.showTools();\r\n                });\r\n\r\n                data.tabName = self.createComputed(function () {\r\n                    return general.getKeyByValue(eNewDealTool, data.selectedToolTab());\r\n                });\r\n            }\r\n\r\n            function setSubscribers() {\r\n                self.subscribeTo(data.selectedToolTab, function (toolTab) {\r\n                    var profileCustomer = customerProfileManager.ProfileCustomer(),\r\n                        keyForDefaultTab = general.isNullOrUndefined(dealData.profileKeyForDefaultTab) ? 'defaultTab' : dealData.profileKeyForDefaultTab();\r\n\r\n                    profileCustomer[keyForDefaultTab] = toolTab;\r\n                    customerProfileManager.ProfileCustomer(profileCustomer);\r\n                });\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Handlers: handlers,\r\n                DealData: dealData\r\n            };\r\n        });\r\n\r\n        var createViewModel = function (params) {\r\n            var viewModel = new DealToolsViewModel();\r\n\r\n            viewModel.init(params);\r\n\r\n            return viewModel;\r\n        };\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            },\r\n            DealToolsViewModel: DealToolsViewModel\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}