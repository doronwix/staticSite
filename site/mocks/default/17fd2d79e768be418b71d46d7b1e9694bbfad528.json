{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/Payments/ConcretePaymentsViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "/* globals  eConcretePaymentCategory */\r\n\"use strict\";\r\ndefine(\r\n    'viewmodels/Payments/ConcretePaymentsViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'Q',\r\n        'dataaccess/dalDeposit',\r\n        'initdatamanagers/Customer',\r\n        'configuration/initconfiguration',\r\n        'devicemanagers/AlertsManager',\r\n        'managers/CustomerProfileManager',\r\n        'viewmodels/Payments/ConcretePaymentBehavior',\r\n        'managers/viewsmanager',\r\n        'Dictionary',\r\n        'deviceviewmodels/PaymentSelectionBehaviors',\r\n        'deposit/CreditCard/CreditCardTypesManager',\r\n        'global/UrlResolver',\r\n        'JSONHelper',\r\n        'StateObject!Deposit',\r\n        'handlers/general',\r\n        'enums/paymentsconfigsettings',\r\n        'enums/enums'\r\n    ],\r\n    function (require) {\r\n        var ko = require('knockout'),\r\n            Q = require('Q'),\r\n            dalDeposit = require('dataaccess/dalDeposit'),\r\n            customer = require('initdatamanagers/Customer'),\r\n            initConfiguration = require('configuration/initconfiguration'),\r\n            AlertsManager = require('devicemanagers/AlertsManager'),\r\n            CustomerProfileManager = require('managers/CustomerProfileManager'),\r\n            ConcretePaymentsBehavior = require('viewmodels/Payments/ConcretePaymentBehavior'),\r\n            ViewsManager = require('managers/viewsmanager'),\r\n            Dictionary = require('Dictionary'),\r\n            PaymentSelectionBehaviors = require('deviceviewmodels/PaymentSelectionBehaviors'),\r\n            creditCardTypesManager = require('deposit/CreditCard/CreditCardTypesManager'),\r\n            urlResolver = require('global/UrlResolver'),\r\n            jsonHelper = require(\"JSONHelper\"),\r\n            general = require('handlers/general'),\r\n            lastPaymentMethodCache = require('StateObject!Deposit'),\r\n            paymentsConfigSettings = require('enums/paymentsconfigsettings'),\r\n            useDeepLinkPreselectedPayment = true;\r\n\r\n        function ConcretePaymentsViewModel() {\r\n            var formObs = {\r\n                selectedCategory: ko.observable(),\r\n                selectedCountry: ko.observable()\r\n                    .extend({ rateLimit: { timeout: 500, method: \"notifyWhenChangesStop\" } }),\r\n                lastHandledCountry: ko.observable(),\r\n                paymentsConfigSettings: paymentsConfigSettings\r\n            },\r\n                infoObs = {\r\n                    payments: ko.observableArray([]),\r\n                    categories: ko.observableArray([]),\r\n                    countries: ko.observableArray([]),\r\n                    allowedCreditCards: ko.observableArray([]),\r\n                    currentPayment: ko.observable(),\r\n                    customerHasMissingInfo: ko.observable(customer.prop.hasMissingInformation),\r\n                    arePaymentsLoading: ko.observable(false),\r\n                    isLoading: ko.observable(true)\r\n                },\r\n                shouldResetPaymentsFormPosition = ko.observable(false).extend({ notify: 'always' }),\r\n                resetPaymentsFormPositionOn = ko.computed(function () {\r\n                    if (!general.isNullOrUndefined(formObs.selectedCountry()) && general.isNullOrUndefined(formObs.selectedCategory())) {\r\n                        shouldResetPaymentsFormPosition(true);\r\n                    }\r\n                }),\r\n                subscribers = [],\r\n                concretePaymentCategoryNames = ['rcmd', 'cc', 'epayment', 'bank', 'prepaid', 'last'],\r\n                supportLastPaymentCategory = initConfiguration.PaymentsConfiguration.supportLastPaymentCategory,\r\n                redirectToLastPaymentOnLoad = initConfiguration.PaymentsConfiguration.redirectToLastPaymentOnLoad,\r\n                viewTypeForExistingCC = initConfiguration.PaymentsConfiguration.viewTypeForExistingCC,\r\n                showAllowedCreditCards = initConfiguration.PaymentsConfiguration.showAllowedCreditCards,\r\n                concretePaymentsBehavior = new ConcretePaymentsBehavior();\r\n\r\n            function handleCountryChanged() {\r\n                infoObs.arePaymentsLoading(true);\r\n                formObs.lastHandledCountry(formObs.selectedCountry());\r\n\r\n                Q.all([\r\n                    dalDeposit.getConcretePayments(formObs.selectedCountry().id, parseInt(customer.prop.countryID), customer.prop.brokerID),\r\n                    dalDeposit.getUserDepositDetails(null)\r\n                ])\r\n                    .then(delayedGetPaymentsHandler)\r\n                    .then(showSuggestedPayment)\r\n                    .done();\r\n            }\r\n\r\n            function setSubscribers() {\r\n                subscribers.push(formObs.selectedCountry.subscribe(function () {\r\n                    if (formObs.selectedCountry()) {\r\n                        handleCountryChanged();\r\n                    }\r\n                }));\r\n\r\n                subscribers.push(ko.postbox.subscribeSingleton(ePostboxTopic.ReloadConcretePayments, function () {\r\n                    shouldResetPaymentsFormPosition(true);\r\n                    handleCountryChanged();\r\n                }));\r\n\r\n                subscribers.push(ko.postbox.subscribeSingleton(ePostboxTopic.MissingInfo, function (value) {\r\n                    infoObs.customerHasMissingInfo(value);\r\n                }));\r\n            }\r\n\r\n            function getDefaultCategory(currentIndex, expectedIndex, supportsLastPayment) {\r\n                if (supportsLastPayment && currentIndex === expectedIndex) {\r\n                    return eConcretePaymentCategory.LastPayment;\r\n                }\r\n\r\n                return eConcretePaymentCategory.Recommended;\r\n            }\r\n\r\n            function delayedGetPaymentsHandler(result) {\r\n                if (formObs.lastHandledCountry() !== formObs.selectedCountry()) {\r\n                    formObs.lastHandledCountry(formObs.selectedCountry());\r\n                    formObs.selectedCountry.valueHasMutated();\r\n                }\r\n                else {\r\n                    getPaymentsHandler(result);\r\n                    ko.postbox.publish(ePostboxTopic.ConcretePaymentSelectedCountry, formObs.selectedCountry());\r\n                }\r\n\r\n                infoObs.arePaymentsLoading(false);\r\n            }\r\n\r\n            function showSuggestedPayment() {\r\n                if (useDeepLinkPreselectedPayment !== true || infoObs.payments().length <= 0) {\r\n                    return;\r\n                }\r\n\r\n                useDeepLinkPreselectedPayment = false;\r\n\r\n                var viewArguments = ViewsManager.GetActiveFormViewProperties(eViewTypes.vPaymentTypes).args;\r\n\r\n                if (general.isObjectType(viewArguments) && general.isStringType(viewArguments.payment)) {\r\n\r\n                    var deepLinkPreselectedPayment = viewArguments.payment;\r\n\r\n                    var payment = infoObs.payments().find(function checkPaymentName(p) { return p.originalName === deepLinkPreselectedPayment; });\r\n\r\n                    if (!payment) {\r\n                        return;\r\n                    }\r\n\r\n                    setTimeout(goToPaymentView, 200, payment);\r\n                }\r\n            }\r\n\r\n            function getLastAvailableUserActionIndex(paymentlist, userActions) {\r\n                for (var index = userActions.length - 1; index >= 0; --index) {\r\n                    var payment = findPaymentDetailsAndIndex(paymentlist, userActions[index]);\r\n\r\n                    if (payment) {\r\n                        return index;\r\n                    }\r\n                }\r\n\r\n                return -1;\r\n            }\r\n\r\n            function findPaymentDetailsAndIndex(paymentList, userAction) {\r\n                for (var index = 0; index < paymentList.length; ++index) {\r\n                    var payment = paymentList[index];\r\n\r\n                    if (isMatchingPaymentId(payment, userAction) ||\r\n                        isMatchingCCType(payment, userAction)) {\r\n\r\n                        return {\r\n                            details: payment,\r\n                            index: index\r\n                        };\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            function isMatchingPaymentId(payment, userAction) {\r\n                return userAction.id &&\r\n                    payment.id === userAction.id;\r\n            }\r\n\r\n            function isMatchingCCType(payment, userAction) {\r\n                return !userAction.id &&\r\n                    payment.paymentType === 1 &&\r\n                    payment.paymentDataObject &&\r\n                    payment.paymentDataObject.paymentData === userAction.ccType;\r\n            }\r\n\r\n            function updateFirstVisibleCategory(payments, categories, lastPaymentCategorySupported) {\r\n                if (payments.find(function (p) { return p.isRecommended; })) {\r\n                    categories.unshift(eConcretePaymentCategory.Recommended);\r\n\r\n                    if (lastPaymentCategorySupported) {\r\n                        categories.unshift(eConcretePaymentCategory.LastPayment);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function getPaymentsHandler(result) {\r\n                var parsedPaymentResults = JSONHelper.STR2JSON(\"ConcretePaymentsViewModel:getPaymentsHandler\", result[0]);\r\n                var maxRecommended = parsedPaymentResults.maxRecommended;\r\n                var payments = parsedPaymentResults.payments;\r\n                var categories = parsedPaymentResults.categories;\r\n                var undefinedVar;\r\n                var userActions = JSONHelper.STR2JSON(\"ConcretePaymentsViewModel:getPaymentsHandler\", result[1]).actions;\r\n\r\n                payments.forEach(setPaymentDataDetails);\r\n\r\n                var lastAvailableUserActionIndex = getLastAvailableUserActionIndex(payments, userActions);\r\n                if (userActions && userActions.length > 0) {\r\n                    userActions.forEach(function (action, index) {\r\n                        if (action.id) {\r\n                            updatePaymentAsRecommended(action, payments, getDefaultCategory(index, lastAvailableUserActionIndex, supportLastPaymentCategory));\r\n                        } else {\r\n                            generatePaymentForExistingCC(action, payments, getDefaultCategory(index, lastAvailableUserActionIndex, supportLastPaymentCategory));\r\n                        }\r\n                    });\r\n                }\r\n\r\n                limitRecommendations(payments, maxRecommended);\r\n                updateFirstVisibleCategory(payments, categories, (supportLastPaymentCategory && lastAvailableUserActionIndex >= 0));\r\n\r\n                payments.forEach(function saveOriginalName(p) { p.originalName = p.name; });\r\n\r\n                infoObs.payments(payments);\r\n\r\n                categories = updateCategories(categories, payments);\r\n                infoObs.categories(categories);\r\n\r\n                if (categories) {\r\n                    if (general.isDefinedType(CustomerProfileManager.ProfileCustomer().lastSelectedCategory) && supportLastPaymentCategory) {\r\n                        changeSelectedCategory(CustomerProfileManager.ProfileCustomer().lastSelectedCategory);\r\n                        formObs.selectedCategory(CustomerProfileManager.ProfileCustomer().lastSelectedCategory);\r\n                        CustomerProfileManager.ProfileCustomer().lastSelectedCategory = undefinedVar;\r\n                    } else {\r\n                        changeSelectedCategory(categories[0]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setPaymentDataDetails(payment) {\r\n                if (!payment) {\r\n                    return;\r\n                }\r\n\r\n                var paymentData = payment.paymentData || \"\",\r\n                    data = deserializeData(paymentData),\r\n                    isGenericPayment = data && data.paymentData === \"generic\",\r\n                    ccTypeId = null;\r\n\r\n                if (!isGenericPayment && data && general.isNumber(data.paymentData)) {\r\n                    ccTypeId = Number(data.paymentData);\r\n                }\r\n\r\n                if (general.isObjectType(data)) {\r\n                    payment.paymentDataObject = data;\r\n                }\r\n\r\n                payment.isGeneric = isGenericPayment;\r\n                payment.ccTypeId = ccTypeId;\r\n            }\r\n\r\n            function generatePaymentForExistingCC(action, payments, category) {\r\n                var paymentData = JSONHelper.STR2JSON(\"ConcretePaymentsViewModel:generatePaymentForExistingCC\", action.paymentData);\r\n                paymentData.viewType = viewTypeForExistingCC;\r\n\r\n                payments.unshift({\r\n                    id: null,\r\n                    name: action.name,\r\n                    paymentType: 1,\r\n                    currencies: action.currencies,\r\n                    ccTypeId: paymentData.paymentData,\r\n                    categories: [category, eConcretePaymentCategory.CreditCard],\r\n                    paymentData: JSON.stringify(paymentData),\r\n                    textContentKey: '',\r\n                    originalPaymentName: action.paymentName,\r\n                    imageClass: action.imageClass + '_saved',\r\n                    isRecommended: true,\r\n                    isExistingCC: true,\r\n                    isGeneric: false,\r\n                    isUserAction: true,\r\n                    subtitleContentKey: action.subtitleContentKey,\r\n                    cardHolder: action.cardHolder,\r\n                    expirationDate: addFullYearToExpirationDate(action.expirationDate),\r\n                    lastUsed: action.lastUsed ? new Date(action.lastUsed) : '',\r\n                    isCcBinFromEea: action.isCcBinFromEea\r\n                });\r\n            }\r\n\r\n            function addFullYearToExpirationDate(expirationDate) {\r\n                if (general.isEmptyType(expirationDate) ||\r\n                    !general.isStringType(expirationDate)) {\r\n                    return null;\r\n                }\r\n\r\n                var expirationDateParts = expirationDate.split('/');\r\n\r\n                if (expirationDateParts.length !== 2) {\r\n                    return expirationDate;\r\n                }\r\n\r\n                var month = expirationDateParts[0],\r\n                    year = expirationDateParts[1],\r\n                    fullYear = year.length === 2 ? '20' + year : year;\r\n\r\n                return String.format('{0}/{1}', month, fullYear);\r\n            }\r\n\r\n            function updatePaymentAsRecommended(action, payments, category) {\r\n                var originalPayment = findPaymentDetailsAndIndex(payments, action);\r\n\r\n                if (originalPayment) {\r\n                    var payment = payments[originalPayment.index];\r\n\r\n                    payment.isUserAction = true;\r\n                    payment.isRecommended = true;\r\n                    payment.categories.push(category);\r\n                    payments.splice(originalPayment.index, 1);\r\n                    payments.unshift(payment);\r\n                }\r\n            }\r\n\r\n            function limitRecommendations(payments, maxRecommended) {\r\n                var foundRecommended = 0;\r\n\r\n                payments.forEach(function (payment) {\r\n                    if (payment.isRecommended) {\r\n                        if (foundRecommended < maxRecommended) {\r\n                            ++foundRecommended;\r\n                        } else {\r\n                            payment.isRecommended = false;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            function removeCategoryIfEmpty(category, currentCategoryIndex, categories, payments) {\r\n                var found = payments.find(function (payment) {\r\n                    return (category === eConcretePaymentCategory.Recommended && payment.isRecommended) ||\r\n                        (category !== eConcretePaymentCategory.Recommended && payment.categories.contains(category));\r\n                });\r\n\r\n                if (!found)\r\n                    categories.splice(currentCategoryIndex, 1);\r\n            }\r\n\r\n            function removeRecommendedIfNeeded(categories) {\r\n                var numberOfUsualCategories = categories.filter(function (category) {\r\n                    return !(category === eConcretePaymentCategory.Recommended || category === eConcretePaymentCategory.LastPayment);\r\n                }).length;\r\n\r\n                var recommendedIndex = categories.indexOf(eConcretePaymentCategory.Recommended);\r\n\r\n                if (numberOfUsualCategories === 1 && recommendedIndex >= 0) {\r\n                    categories.splice(recommendedIndex, 1);\r\n                }\r\n            }\r\n\r\n            function updateCategories(categories, payments) {\r\n                if (supportLastPaymentCategory) {\r\n                    categories.forEach(function (category, index) {\r\n                        if (category === eConcretePaymentCategory.LastPayment)\r\n                            return;\r\n                        removeCategoryIfEmpty(category, index, categories, payments);\r\n                    });\r\n                }\r\n\r\n                removeRecommendedIfNeeded(categories);\r\n\r\n                return categories;\r\n            }\r\n\r\n            function getPaymentClass(payment) {\r\n                if (payment.imageClass) {\r\n                    return payment.imageClass;\r\n                }\r\n\r\n                if (formObs.selectedCategory() === eConcretePaymentCategory.Recommended) {\r\n                    return getPaymentClassByCategory(payment.categories.find(isOtherThanRecomennded));\r\n                }\r\n\r\n                return getPaymentClassByCategory(formObs.selectedCategory());\r\n            }\r\n\r\n            function isOtherThanRecomennded(category) { return category !== eConcretePaymentCategory.Recommended }\r\n\r\n            function getPaymentClassByCategory(category) {\r\n                return 'unavailable ' + concretePaymentCategoryNames[category];\r\n            }\r\n\r\n            function getCategoryClass(category) {\r\n                var css = concretePaymentCategoryNames[category];\r\n\r\n                if (formObs.selectedCategory() === category)\r\n                    css += ' active';\r\n                return css;\r\n            }\r\n\r\n            function init() {\r\n                setSubscribers();\r\n\r\n                dalDeposit.getPaymentCountries(customer.prop.brokerID, customer.prop.countryID)\r\n                    .then(function (result) {\r\n                        var countriesResult = JSONHelper.STR2JSON(\"ConcretePaymentsViewModel:getPaymentsHandler\", result);\r\n\r\n                        var countryList = countriesResult.result.countries.map(function (countryDetails) {\r\n                            var name = fixRtlParanthesis(countryDetails.name);\r\n\r\n                            return {\r\n                                text: name,\r\n                                id: countryDetails.id,\r\n                                code: countryDetails.code.toLowerCase(),\r\n                                label: name\r\n                            };\r\n                        });\r\n\r\n                        infoObs.countries(countryList);\r\n\r\n                        var countryId = customer.prop.countryID;\r\n\r\n                        if (general.isDefinedType(CustomerProfileManager.ProfileCustomer().lastSelectedPaymentMethodCountry)) {\r\n                            countryId = CustomerProfileManager.ProfileCustomer().lastSelectedPaymentMethodCountry.id.toString();\r\n                        }\r\n\r\n                        selectDefaultCountry(countryList, countryId);\r\n                    })\r\n                    .fail(dataLoadFailCallback)\r\n                    .done();\r\n\r\n                getAllowedCreditCards();\r\n            }\r\n\r\n            function fixRtlParanthesis(text) {\r\n                var valuesToReplace = {\r\n                    '(': cTextMarks.Ltr + '(',\r\n                    '[': cTextMarks.Ltr + '[',\r\n                    ')': ')' + cTextMarks.Ltr,\r\n                    ']': ']' + cTextMarks.Ltr\r\n                };\r\n\r\n                for (var item in valuesToReplace) {\r\n                    if (!valuesToReplace.hasOwnProperty(item)) {\r\n                        continue;\r\n                    }\r\n\r\n                    text = text.replace(item, valuesToReplace[item]);\r\n                }\r\n\r\n                return text;\r\n            }\r\n\r\n            function selectDefaultCountry(countriesResult, selectedCountry) {\r\n                if (!countriesResult || countriesResult.length === 0) {\r\n                    return dataLoadFailCallback();\r\n                }\r\n\r\n                var countryDetails = countriesResult.filter(function (country) {\r\n                    return country.id.toString() === selectedCountry;\r\n                });\r\n\r\n                formObs.selectedCountry(countryDetails.length > 0 ? countryDetails[0] : countriesResult[0]);\r\n            }\r\n\r\n            function getPaymentVisibility(payment) {\r\n                if (!payment.categories) {\r\n                    return false;\r\n                }\r\n\r\n                return (payment.categories.indexOf(formObs.selectedCategory()) >= 0 && formObs.selectedCategory() !== eConcretePaymentCategory.Recommended && formObs.selectedCategory() !== eConcretePaymentCategory.LastPayment) ||\r\n                    (payment.isRecommended && formObs.selectedCategory() === eConcretePaymentCategory.Recommended);\r\n            }\r\n\r\n            function changeSelectedCategory(category) {\r\n                if (!general.isNullOrUndefined(category)) {\r\n                    formObs.selectedCategory(category);\r\n                    var redirected;\r\n\r\n                    if (supportLastPaymentCategory && category === eConcretePaymentCategory.LastPayment) {\r\n                        var payment = infoObs.payments().find(function (p) { return p.isRecommended; });\r\n                        setTimeout(showPaymentView, 200, payment);\r\n\r\n                        redirected = true;\r\n                    }\r\n                    else {\r\n                        redirected = redirectToLastPaymentIfNeeded();\r\n                    }\r\n\r\n                    if (!redirected) {\r\n                        PaymentSelectionBehaviors.Stop();\r\n                        infoObs.currentPayment(null);\r\n                        infoObs.isLoading(false);\r\n                    }\r\n                } else {\r\n                    dataLoadFailCallback();\r\n                }\r\n            }\r\n\r\n            function redirectToLastPaymentIfNeeded() {\r\n                if (!redirectToLastPaymentOnLoad) {\r\n                    return false;\r\n                }\r\n\r\n                if (shouldSkipRedirectToLastPayment()) {\r\n                    resetRedirectToLastPayment();\r\n\r\n                    return false;\r\n                } else {\r\n                    var payment = infoObs.payments().find(function (p) { return p.isRecommended && p.isUserAction; });\r\n\r\n                    if (!payment) {\r\n                        return false;\r\n                    }\r\n\r\n                    skipRedirectToLastPayment();\r\n                    setTimeout(goToPaymentView, 200, payment);\r\n\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            function skipRedirectToLastPayment() {\r\n                lastPaymentMethodCache.update('skipRedirectToLastPayment', true);\r\n            }\r\n\r\n            function resetRedirectToLastPayment() {\r\n                lastPaymentMethodCache.update('skipRedirectToLastPayment', false);\r\n            }\r\n\r\n            function shouldSkipRedirectToLastPayment() {\r\n                return lastPaymentMethodCache.get('skipRedirectToLastPayment');\r\n            }\r\n\r\n            function isSelectedCategory(category) {\r\n                return formObs.selectedCategory() === category;\r\n            }\r\n\r\n            function isSelectedPayment(payment) {\r\n                return payment === infoObs.currentPayment();\r\n            }\r\n\r\n            function showPaymentView(payment) {\r\n                infoObs.isLoading(false);\r\n\r\n                if (infoObs.arePaymentsLoading()) {\r\n                    return;\r\n                }\r\n\r\n                PaymentSelectionBehaviors.Stop();\r\n\r\n                infoObs.currentPayment(payment);\r\n\r\n\r\n                concretePaymentsBehavior.showPaymentView(payment, formObs.selectedCountry(), getPaymentClass(payment), payment.isGeneric && showAllowedCreditCards ? infoObs.allowedCreditCards() : []);\r\n                CustomerProfileManager.ProfileCustomer().lastSelectedCategory = formObs.selectedCategory();\r\n            }\r\n\r\n            function goToPaymentView(payment) {\r\n                infoObs.isLoading(false);\r\n\r\n                skipRedirectToLastPayment();\r\n\r\n                ViewsManager.SwitchViewVisible(eForms.ConcretePaymentForm, {\r\n                    payment: payment,\r\n                    country: formObs.selectedCountry(),\r\n                    imageClass: getPaymentClass(payment),\r\n                    lastChars: getLastFourCharsOfConcretePaymentName(payment),\r\n                    cardHolder: payment.cardHolder,\r\n                    expirationDate: payment.expirationDate,\r\n                    lastUsed: payment.lastUsed,\r\n                    isGeneric: payment.isGeneric,\r\n                    allowedCreditCards: infoObs.allowedCreditCards(),\r\n                    isCcBinFromEea: payment.isCcBinFromEea\r\n                });\r\n\r\n                CustomerProfileManager.ProfileCustomer().lastSelectedCategory = formObs.selectedCategory();\r\n                CustomerProfileManager.ProfileCustomer().lastSelectedPaymentMethodCountry = formObs.selectedCountry();\r\n            }\r\n\r\n            function getConcretePaymentName(payment) {\r\n                if (Dictionary.ValueIsEmpty(payment.textContentKey, 'payments_concreteNames')) {\r\n                    return payment.name;\r\n                }\r\n\r\n                payment.name = Dictionary.GetItem(payment.textContentKey, 'payments_concreteNames');\r\n\r\n                return payment.name;\r\n            }\r\n\r\n            function getConcretePaymentSubtitle(payment) {\r\n                if (!payment.subtitleContentKey || Dictionary.ValueIsEmpty(payment.subtitleContentKey)) {\r\n                    return '';\r\n                }\r\n\r\n                return Dictionary.GetItem(payment.subtitleContentKey);\r\n            }\r\n\r\n            function getLastFourCharsOfConcretePaymentName(payment) {\r\n                if (!general.isDefinedType(payment)) {\r\n                    return \"\";\r\n                }\r\n\r\n                var paymentName = getConcretePaymentName(payment);\r\n\r\n                if (general.isNullOrUndefined(paymentName)) {\r\n                    return \"\";\r\n                }\r\n\r\n                if (paymentName.length < 4) {\r\n                    return paymentName;\r\n                }\r\n\r\n                var startIndex = paymentName.length - 4;\r\n\r\n                return paymentName.substring(startIndex);\r\n            }\r\n\r\n            function getCategoryName(category) {\r\n                var categoryName = Dictionary.GetItem('ePaymentCategory_' + category, 'payments_concreteView');\r\n\r\n                if (category === eConcretePaymentCategory.LastPayment && infoObs.payments().length > 0) {\r\n                    return categoryName + ' (' + getConcretePaymentName(infoObs.payments()[0]) + ') ';\r\n                }\r\n\r\n                return categoryName;\r\n            }\r\n\r\n            function getPaymentConfigData(payment) {\r\n                try {\r\n                    return JSONHelper.STR2JSON(\"ConcretePaymentsViewModel:getPaymentConfigData\", payment.paymentData);\r\n                }\r\n                catch (e) {\r\n                    return {};\r\n                }\r\n            }\r\n\r\n            function getPaymentId(payment) {\r\n                payment = ko.utils.unwrapObservable(payment);\r\n\r\n                return !general.isNullOrUndefined(payment.id) ? ('ConcretePaymentTypeId_' + payment.id) : ('PaymentData_' + getPaymentConfigData(payment).paymentdata);\r\n            }\r\n\r\n            function getAllowedCreditCards() {\r\n                dalDeposit.getAllowedCreditCardData(customer.prop.accountNumber)\r\n                    .then(deserializeData)\r\n                    .then(processAllowedCreditCards)\r\n                    .fail(general.emptyFn)\r\n                    .done();\r\n            }\r\n\r\n            function deserializeData(data) {\r\n                if (!jsonHelper.IsValid(data)) {\r\n                    return null;\r\n                }\r\n\r\n                return jsonHelper.STR2JSON(\"ConcretePaymentsViewModel/deserializeData\", data);\r\n            }\r\n\r\n            function processAllowedCreditCards(data) {\r\n                data.CreditCards.forEach(processCreditCardData);\r\n            }\r\n\r\n            function processCreditCardData(creditCardData) {\r\n                var ccTypeIdIndex = 0,\r\n                    ccTypeId = creditCardData[ccTypeIdIndex],\r\n                    ccTypeImages = creditCardTypesManager.Images[ccTypeId];\r\n\r\n                if (!ccTypeImages) {\r\n                    return;\r\n                }\r\n\r\n                ccTypeImages.forEach(buildImagePath);\r\n            }\r\n\r\n            function buildImagePath(image) {\r\n                infoObs.allowedCreditCards.push(urlResolver.getImageSharedPath(image));\r\n            }\r\n\r\n            function dispose() {\r\n                PaymentSelectionBehaviors.CloseMissingDetailsDialog();\r\n\r\n                subscribers.forEach(function (subscriber) {\r\n                    subscriber.dispose();\r\n                });\r\n\r\n                subscribers.length = 0;\r\n            }\r\n\r\n            function removeConcretePayment(payment) {\r\n                if (!payment || !payment.isExistingCC) {\r\n                    return;\r\n                }\r\n\r\n                var removeCreditCardCallBack = function () {\r\n                    dalDeposit.removeUsedCard(payment.ccTypeId)\r\n                        .fail(general.emptyFn)\r\n                        .done();\r\n\r\n                    skipRedirectToLastPayment();\r\n                    ko.postbox.publish(ePostboxTopic.ReloadConcretePayments);\r\n                };\r\n\r\n                confirmRemoveCreditCard(removeCreditCardCallBack, payment);\r\n            }\r\n\r\n            function confirmRemoveCreditCard(removeCallback, payment) {\r\n                var removeCcProps = {\r\n                        okButtonCallback: removeCallback,\r\n                        okButtonCaption: 'depConfirmRemoveCC',\r\n                        cancelButtonCaption: 'depCancelRemoveCC'\r\n                    },\r\n                    lastChars = getLastFourCharsOfConcretePaymentName(payment),\r\n                    confirmationMessage = String.format(Dictionary.GetItem(cDepositMessageKeys.removeCCMessage), lastChars);\r\n\r\n                AlertsManager.UpdateAlert(AlertTypes.RemoveCreditCardConfirmationAlert, '', confirmationMessage, null, removeCcProps);\r\n                AlertsManager.PopAlert(AlertTypes.RemoveCreditCardConfirmationAlert);\r\n            }\r\n\r\n            function dataLoadFailCallback() {\r\n                AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, Dictionary.GetItem(\"DepositNoPaymentMethods\"), null, { redirectToView: initConfiguration.PaymentsConfiguration.missingPaymentsRedirect });\r\n                AlertsManager.PopAlert(AlertTypes.ServerResponseAlert);\r\n            }\r\n\r\n            init();\r\n\r\n            return {\r\n                Form: formObs,\r\n                Info: infoObs,\r\n                getPaymentVisibility: getPaymentVisibility,\r\n                changeSelectedCategory: changeSelectedCategory,\r\n                showPaymentView: showPaymentView,\r\n                getConcretePaymentName: getConcretePaymentName,\r\n                getConcretePaymentSubtitle: getConcretePaymentSubtitle,\r\n                getLastFourCharsOfConcretePaymentName: getLastFourCharsOfConcretePaymentName,\r\n                isSelectedCategory: isSelectedCategory,\r\n                isSelectedPayment: isSelectedPayment,\r\n                getPaymentClass: getPaymentClass,\r\n                getCategoryClass: getCategoryClass,\r\n                getCategoryName: getCategoryName,\r\n                getPaymentId: getPaymentId,\r\n                dispose: dispose,\r\n                goToPaymentView: goToPaymentView,\r\n                resetPaymentsFormPositionOn: resetPaymentsFormPositionOn,\r\n                shouldResetPaymentsFormPosition: shouldResetPaymentsFormPosition,\r\n                skipRedirectToLastPayment: skipRedirectToLastPayment,\r\n                removeConcretePayment: removeConcretePayment\r\n            };\r\n        }\r\n\r\n        return ConcretePaymentsViewModel;\r\n    }\r\n);",
  "isBase64": false
}