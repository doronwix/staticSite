{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/managers/ChartLayoutSettings.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'managers/ChartLayoutSettings',\r\n    [\r\n        'require',\r\n        'handlers/general',\r\n        'managers/ChartSettingManager',\r\n        'initdatamanagers/InstrumentsManager'\r\n    ],\r\n    function ChartLayoutSettings(require) {\r\n        var chartSettingManager = require('managers/ChartSettingManager'),\r\n            general = require('handlers/general'),\r\n            instrumentsManager = require('initdatamanagers/InstrumentsManager'),\r\n            maxTileCount = 4;\r\n\r\n        //-------------------------------------------------------\r\n        function init() {\r\n            var settingsChanged = false;\r\n\r\n            if (general.isEmptyValue(chartSettingManager.Chart().tileChartSettings)) {\r\n                chartSettingManager.Chart().tileChartSettings = buildInitialConfiguration();\r\n                settingsChanged = true;\r\n            }\r\n\r\n            if (areInstrumentsMissing()) {\r\n                chartSettingManager.Chart().tileChartSettings = replaceMissingInstruments();\r\n                settingsChanged = true;\r\n            }\r\n\r\n            if (settingsChanged) {\r\n                chartSettingManager.SaveChart();\r\n            }\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function buildInitialConfiguration() {\r\n            var instrumentIds = getValidInstrumentIds();\r\n\r\n            return [\r\n                { instrumentId: instrumentIds[0] },\r\n                { instrumentId: instrumentIds[1] },\r\n                { instrumentId: instrumentIds[2] },\r\n                { instrumentId: instrumentIds[3] }\r\n            ];\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function getValidInstrumentIds() {\r\n            var favoriteInstruments = instrumentsManager.GetFavoriteInstruments() || [],\r\n                validInstruments = favoriteInstruments.filter(isValidInstrument);\r\n\r\n            if (validInstruments.length >= maxTileCount) {\r\n                return validInstruments.map(getId);\r\n            }\r\n\r\n            var mainInstruments = instrumentsManager.GetMainMostPopularInstruments(),\r\n                validMainInstruments = mainInstruments.filter(isValidInstrument);\r\n\r\n            validInstruments = validInstruments.concat(validMainInstruments);\r\n            if (validInstruments.length >= maxTileCount) {\r\n                return validInstruments.map(getId);\r\n            }\r\n\r\n            var returnInstumetsIdsList = validInstruments.map(getId);\r\n            for (var idx = maxTileCount - validInstruments.length; idx > 0; idx--) {\r\n                returnInstumetsIdsList.push(3631);\r\n            }\r\n\r\n            return returnInstumetsIdsList;\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function isValidInstrument(instrument) {\r\n            return instrumentsManager.HasInstrumentId(instrument.id);\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function getId(instrument) {\r\n            return instrument.id;\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function getInstrumentId(settings) {\r\n            return settings.instrumentId;\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function areInstrumentsMissing() {\r\n            var tileInstruments = getTileInstruments();\r\n            var validInstruments = tileInstruments.filter(instrumentsManager.HasInstrumentId);\r\n\r\n            return validInstruments.length < tileInstruments.length;\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function replaceMissingInstruments() {\r\n            var settings = chartSettingManager.Chart().tileChartSettings,\r\n                tileInstrumentIds = getTileInstruments(),\r\n                validNotUsedInstrumentIds = getValidInstrumentIds().filter(function (id) { return !tileInstrumentIds.contains(id); }),\r\n                index = -1;\r\n\r\n            for (var i = 0; i < tileInstrumentIds.length; i++) {\r\n                var instrumentId = tileInstrumentIds[i];\r\n\r\n                if (instrumentsManager.HasInstrumentId(instrumentId)) {\r\n                    continue;\r\n                }\r\n\r\n                settings[i].instrumentId = validNotUsedInstrumentIds[++index];\r\n            }\r\n\r\n            return settings;\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function getSettings(chartId) {\r\n            if (chartId === '') {\r\n                return chartSettingManager.Chart().chartUserSettings;\r\n            } else {\r\n                return chartSettingManager.Chart().tileChartSettings[chartId];\r\n            }\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function updateSettings(chartId, chartSettings) {\r\n            if (chartId === '') {\r\n                chartSettingManager.Chart().chartUserSettings = chartSettings;\r\n            } else {\r\n                chartSettingManager.Chart().tileChartSettings[chartId] = chartSettings;\r\n            }\r\n\r\n            chartSettingManager.SaveChart();\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        function getTileInstruments() {\r\n            return chartSettingManager.Chart().tileChartSettings.map(getInstrumentId);\r\n        }\r\n\r\n        return {\r\n            Init: init,\r\n            GetSettings: getSettings,\r\n            GetTileInstruments: getTileInstruments,\r\n            UpdateSettings: updateSettings\r\n        };\r\n    }\r\n);",
  "isBase64": false
}