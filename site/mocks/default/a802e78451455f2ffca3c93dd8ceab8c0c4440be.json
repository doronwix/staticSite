{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/dataaccesslayer/dalWithdrawal.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "var TDALWithdrawal = function () {\r\n    var getWithdrawalInfo = function () {\r\n        var ajaxer = new TAjaxer();\r\n\r\n        return ajaxer.promises\r\n            .get(\"dalWithdrawal/getWithdrawalInfo\",\r\n                String.format(\"api/withdrawal/GetWithdrawalInfo/{0}?SecurityToken={1}\", $customer.prop.baseCcyId(), systemInfo.securityToken),\r\n                null)\r\n            .fail(function () { ErrorManager.onError(\"dalWithdrawal/getWithdrawalInfo\", \"\", eErrorSeverity.medium) });\r\n    };\r\n\r\n    //---------------------------------------------------\r\n    // getWithdrawalRequestById\r\n    //---------------------------------------------------\r\n\r\n    var getWithdrawalRequestById = function (withdrawalID, OnLoadComplete) {\r\n        var ajaxer = new TAjaxer();\r\n\r\n        ajaxer.get(\"dalWithdrawal/getWithdrawalRequestById\", String.format(\"api/withdrawal/GetWithdrawalRequestById/{0}/{1}?SecurityToken={2}\", $customer.prop.baseCcyId(), withdrawalID, systemInfo.securityToken),\r\n            null,\r\n            OnLoadComplete,\r\n            function () { ErrorManager.onError(\"dalWithdrawal/getWithdrawalRequestById\", \"\", eErrorSeverity.medium) },\r\n            0\r\n        );\r\n    };\r\n\r\n    //---------------------------------------------------\r\n    // getCCDeposits\r\n    //---------------------------------------------------\r\n\r\n    var getCCDeposits = function () {\r\n        var ajaxer = new TAjaxer();\r\n\r\n        return ajaxer.promises\r\n            .get(\"dalWithdrawal/getCCDeposits\",\r\n                String.format(\"api/withdrawal/GetCCDeposits?SecurityToken={0}\", systemInfo.securityToken),\r\n                null)\r\n            .fail(function () { ErrorManager.onError(\"dalWithdrawal/getCCDeposits\", \"\", eErrorSeverity.medium); });\r\n    };\r\n\r\n    //---------------------------------------------------\r\n    // saveWithdrawalRequest\r\n    //---------------------------------------------------\r\n\r\n    var saveWithdrawalRequest = function (OnLoadComplete, data) {\r\n        var ajaxer = new TAjaxer();\r\n\r\n        var sb = new StringBuilder();\r\n\r\n        sb.append(String.format(\"request={0}&\", encodeURIComponent(data)));\r\n        sb.append(String.format(\"SecurityToken={0}\", systemInfo.securityToken));\r\n\r\n        ajaxer.post(\"dalWithdrawal/saveWithdrawal\", \"api/withdrawal/SaveWithdrawal\",\r\n            sb.toString(),\r\n            OnLoadComplete,\r\n            function (error) { ErrorManager.onError(\"dalWithdrawal/saveWithdrawalRequest\", error.message, eErrorSeverity.medium) },\r\n            0);\r\n    };\r\n\r\n    //---------------------------------------------------\r\n    // saveWithdrawal\r\n    //---------------------------------------------------\r\n\r\n    var saveWithdrawalBackOfficeRequest = function (OnLoadComplete, data) {\r\n        var ajaxer = new TAjaxer();\r\n\r\n        ajaxer.promises.jsonPost(\r\n            \"dalWithdrawal/saveWithdrawal\",\r\n            \"api/backoffice/withdrawal/saveWithdrawal\",\r\n            data)\r\n            .then(function (responseText) {\r\n                var response = JSONHelper.STR2JSON(\"dalWithdrawal:saveWithdrawalBackOfficeRequest\", responseText);\r\n\r\n                if (response.Status === eOperationStatus.Success) {\r\n                    responseText = JSONHelper.STR2JSON(\"dalWithdrawal:saveWithdrawalBackOfficeRequest\", responseText);\r\n                    responseText = responseText || {};\r\n\r\n                    OnLoadComplete(JSON.stringify(responseText.Result));\r\n                } else {\r\n                    throw new Error(\"Withdrawal from BackOffice failed. Server error\");\r\n                }\r\n            }).fail(\r\n                function (error) {\r\n                    ErrorManager.onError(\"dalWithdrawal/saveWithdrawalBackOfficeRequest\", error.message, eErrorSeverity.medium);\r\n                });\r\n    };\r\n\r\n    //---------------------------------------------------\r\n    // getPendingWithdrawals - With Paging\r\n    //---------------------------------------------------\r\n\r\n    var getPendingWithdrawals = function (Page, PageSize, OnLoadComplete) {\r\n        var ajaxer = new TAjaxer();\r\n\r\n        ajaxer.get(\"dalWithdrawal/getPendingWithdrawals\", String.format(\"api/withdrawal/GetPendingWithdrawals/{0}/{1}?SecurityToken={2}\", Page, PageSize, systemInfo.securityToken),\r\n            null,\r\n            OnLoadComplete,\r\n            function () { ErrorManager.onError(\"dalWithdrawal/GetPendingWithdrawals\", \"\", eErrorSeverity.medium) },\r\n            0\r\n        );\r\n    };\r\n\r\n    //---------------------------------------------------\r\n    // getPendingWithdrawals - NO Paging\r\n    //---------------------------------------------------\r\n\r\n    var getAllPendingWithdrawalsByAccount = function (OnLoadComplete) {\r\n        var ajaxer = new TAjaxer();\r\n\r\n        ajaxer.get(\"dalWithdrawal/getAllPendingWithdrawalsByAccount\", \r\n            String.format(\"api/withdrawal/GetAllPendingWithdrawalsByAccount?SecurityToken={0}\", systemInfo.securityToken),\r\n            null,\r\n            OnLoadComplete,\r\n            function () { ErrorManager.onError(\"dalWithdrawal/getAllPendingWithdrawalsByAccount\", \"\", eErrorSeverity.medium) },\r\n            0);\r\n    };\r\n\r\n    //---------------------------------------------------\r\n    // cancelPendingWithdrawal\r\n    //---------------------------------------------------\r\n\r\n    var cancelPendingWithdrawal = function (withdrawalnfo) {\r\n        var ajaxer = new TAjaxer();\r\n        var sb = new StringBuilder();\r\n\r\n        sb.append(String.format(\"withdrawalID={0}&\", withdrawalnfo[eWithdrawalView.withdrawalID]));\r\n        sb.append(String.format(\"accountingActionId={0}&\", withdrawalnfo[eWithdrawalView.actionID]));\r\n        sb.append(String.format(\"SecurityToken={0}&\", systemInfo.securityToken));\r\n        sb.append(String.format(\"rv={0}&\", encodeURIComponent(withdrawalnfo[eWithdrawalView.rowVersion])));\r\n        sb.append(String.format(\"amrv={0}\", encodeURIComponent(withdrawalnfo[eWithdrawalView.accountMaxRowVersion])));\r\n\r\n        return ajaxer.promises.post(\r\n                \"dalWithdrawal/CancelPendingWithdrawal\",\r\n                \"api/withdrawal/CancelPendingWithdrawal\",\r\n                 sb.toString()\r\n            )\r\n            .then(function (response) {\r\n                return response;\r\n            })\r\n            .fail(function (error) {\r\n                ErrorManager.onError(\"dalWithdrawal/CancelPendingWithdrawal\", error.message, eErrorSeverity.medium);\r\n                return Q.reject();\r\n            });\r\n    };\r\n\r\n    //---------------------------------------------------\r\n    // getCreditCardCurrencies\r\n    //---------------------------------------------------\r\n\r\n    var getCreditCardCurrencies = function (cardTypeId, OnLoadComplete) {\r\n        var ajaxer = new TAjaxer();\r\n\r\n        var sb = new StringBuilder();\r\n        sb.append(String.format(\"cardTypeId={0}&\", cardTypeId));\r\n        sb.append(String.format(\"SecurityToken={0}\", systemInfo.securityToken));\r\n\r\n        ajaxer.post(\"dalWithdrawal/getCreditCardCurrencies\", \"api/withdrawal/GetCreditCardCurrencies\",\r\n            sb.toString(),\r\n            OnLoadComplete,\r\n            function () { ErrorManager.onError(\"dalWithdrawal/getCreditCardCurrencies\", \"\", eErrorSeverity.medium) },\r\n            0\r\n        );\r\n    };\r\n\r\n    return {\r\n        getWithdrawalInfo: getWithdrawalInfo,\r\n        getWithdrawalRequestById: getWithdrawalRequestById,\r\n        saveWithdrawalRequest: saveWithdrawalRequest,\r\n        saveWithdrawalBackOfficeRequest: saveWithdrawalBackOfficeRequest,\r\n        getPendingWithdrawals: getPendingWithdrawals,\r\n        getAllPendingWithdrawalsByAccount: getAllPendingWithdrawalsByAccount,\r\n        cancelPendingWithdrawal: cancelPendingWithdrawal,\r\n        getCCDeposits: getCCDeposits,\r\n        getCreditCardCurrencies: getCreditCardCurrencies\r\n    };\r\n};\r\n\r\nvar dalWithdrawal = new TDALWithdrawal();",
  "isBase64": false
}