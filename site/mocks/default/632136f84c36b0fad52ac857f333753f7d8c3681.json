{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/limits/ExpirationDateModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/limits/ExpirationDateModel',\r\n    [\r\n        'require',\r\n        'helpers/ObservableCustomExtender',\r\n        'handlers/general',\r\n        'cachemanagers/CacheManager',\r\n        'cachemanagers/activelimitsmanager',\r\n        'viewmodels/limits/ExpirationDateSelectorModel',\r\n        'viewmodels/dialogs/DialogViewModel'\r\n    ],\r\n    function (require) {\r\n        var ko = require('helpers/ObservableCustomExtender'),\r\n            general = require('handlers/general'),\r\n            CacheManager = require('cachemanagers/CacheManager'),\r\n            ActiveLimitsManager = require('cachemanagers/activelimitsmanager'),\r\n            ExpirationDateSelectorModel = require('viewmodels/limits/ExpirationDateSelectorModel'),\r\n            DialogViewModel = require('viewmodels/dialogs/DialogViewModel');\r\n\r\n        function ExpirationDateModel() {\r\n            var observableObject = {},\r\n                disposables = [],\r\n                instrumentID;\r\n\r\n            //-------------------------------------------------------\r\n            var init = function () {\r\n                observableObject.expirationDateSelector = new ExpirationDateSelectorModel();\r\n                observableObject.expirationDateSelector.Init();\r\n                setDefaultObservables();\r\n                setValidators();\r\n                setComputables();\r\n                setSubscribers();\r\n            };\r\n\r\n            //-------------------------------------------------------\r\n            var setDefaultObservables = function () {\r\n                observableObject.expirationDate = ko.observable(\"\").extend({ dirty: false });\r\n                observableObject.expirationTime = ko.observable(\"\").extend({ dirty: false });\r\n                observableObject.selectedExpirationDateTime = ko.observable(\"\").extend({ dirty: false });\r\n                observableObject.isDateTimeApplied = ko.observable(false);\r\n                observableObject.maxExpirationDate = ko.observable(\"\");\r\n                observableObject.minExpirationDate = ko.observable(\"\");\r\n                observableObject.hoursList = ko.observableArray([]);\r\n                observableObject.selectedHoursValue = ko.observable(\"\");\r\n            };\r\n\r\n            //-------------------------------------------------------\r\n            var setValidators = function () {\r\n                observableObject.expirationDate.extend({\r\n                    validation: {\r\n                        validator: isValidExpirationDateByDay\r\n                    }\r\n                });\r\n\r\n                observableObject.selectedHoursValue.extend({\r\n                    validation: {\r\n                        validator: isValidExpirationDateByDayAndHours\r\n                    }\r\n                });\r\n            };\r\n\r\n            //-------------------------------------------------------\r\n            var setComputables = function () {\r\n                observableObject.expirationDateTime = ko.computed(function () {\r\n                    return String.format(\"{0} {1}\", general.pad(this.expirationDate(), 2), general.pad(this.expirationTime(), 2));\r\n                }, observableObject);\r\n                disposables.push(observableObject.expirationDateTime);\r\n\r\n                observableObject.isDirty = ko.computed(function () {\r\n                    return observableObject.expirationDate.isDirty()\r\n                        || observableObject.expirationTime.isDirty();\r\n                });\r\n                disposables.push(observableObject.isDirty);\r\n\r\n                observableObject.isExpirationDateDirty = ko.computed(function () {\r\n                    var selectedDateTime = observableObject.selectedExpirationDateTime();\r\n                    var originalDateTime = observableObject.selectedExpirationDateTime.originalValue();\r\n                    if (!observableObject.isDateTimeApplied()) {\r\n                        return false;\r\n                    }\r\n\r\n                    return selectedDateTime !== originalDateTime;\r\n                });\r\n                disposables.push(observableObject.isExpirationDateDirty);\r\n            };\r\n\r\n            //-------------------------------------------------------\r\n            var setSubscribers = function () {\r\n                disposables.push(\r\n                    observableObject.expirationDate.subscribe(function (value) {\r\n                        if (!general.isEmptyType(value)) {\r\n                            setExpirationTime();\r\n                        }\r\n                    })\r\n                );\r\n\r\n                disposables.push(\r\n                    observableObject.selectedHoursValue.subscribe(function (value) {\r\n                        observableObject.expirationTime(value);\r\n                    })\r\n                );\r\n            };\r\n\r\n            //-------------------------------------------------------\r\n            var setOrder = function (_orderID) {\r\n                var selectedLimit = ActiveLimitsManager.limits.GetItem(_orderID);\r\n\r\n                if (selectedLimit) {\r\n                    updateMaxAndMinDate(selectedLimit.instrumentID);\r\n\r\n                    var today = computeTodayExpirationDate();\r\n                    var defaultExpirationDate = {\r\n                        date: general.SplitDateTime(today.ExtractDate()).date,\r\n                        time: today.ExtractTime()\r\n                    };\r\n\r\n                    setExpirationDate(selectedLimit, defaultExpirationDate);\r\n\r\n                    // Mark as clean\r\n                    observableObject.expirationDate.markClean();\r\n                    observableObject.expirationTime.markClean();\r\n                }\r\n            };\r\n\r\n            function setExpirationDate(selectedLimit, defaultExpirationDate) {\r\n                var expirationDateTimeString;\r\n\r\n                if (general.isEmptyValue(selectedLimit.expirationDate)) {\r\n                    observableObject.expirationDate(defaultExpirationDate.date);\r\n                    observableObject.selectedHoursValue(defaultExpirationDate.time);\r\n\r\n                    expirationDateTimeString = String.format(\"{0} {1}\", general.pad(observableObject.expirationDate(), 2), general.pad(observableObject.expirationTime(), 2));\r\n                    observableObject.selectedExpirationDateTime(expirationDateTimeString);\r\n\r\n                    observableObject.expirationDateSelector.ResetObservables();\r\n                } else {\r\n                    var expirationDateParts = general.SplitDateTime(selectedLimit.expirationDate);\r\n                    observableObject.expirationDate(expirationDateParts.date);\r\n                    observableObject.selectedHoursValue(String.format(\"{0}:{1}\", general.pad(expirationDateParts.hour, 2), general.pad(expirationDateParts.min, 2)));\r\n\r\n                    expirationDateTimeString = String.format(\"{0} {1}\", general.pad(observableObject.expirationDate(), 2), general.pad(observableObject.expirationTime(), 2));\r\n                    observableObject.selectedExpirationDateTime(expirationDateTimeString);\r\n                    observableObject.selectedExpirationDateTime.markClean();\r\n\r\n                    observableObject.expirationDateSelector.UpdateSelectedDateUI(observableObject.expirationDateTime());\r\n                }\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            var updateSelectedDateWithToday = function (instrumentId) {\r\n                observableObject.expirationDateSelector.ResetObservables();\r\n                updateMaxAndMinDate(instrumentId);\r\n\r\n                var today = computeTodayExpirationDate();\r\n\r\n                observableObject.expirationDate(general.SplitDateTime(today.ExtractDate()).date);\r\n                observableObject.selectedHoursValue(today.ExtractTime());\r\n            };\r\n\r\n            var updateMaxAndMinDate = function (instrumentId) {\r\n                var maxExpirationDateTimeObj = getMaxExpirationDate(instrumentId);\r\n                setMaxExpirationDate(maxExpirationDateTimeObj);\r\n                setMinExpirationDate();\r\n            };\r\n\r\n            var computeTodayExpirationDate = function () {\r\n                var defaultExpirationDate = new Date(CacheManager.ServerTime().getTime());\r\n                defaultExpirationDate.setHours(23);\r\n                defaultExpirationDate.setMinutes(59);\r\n                defaultExpirationDate.skipWeekendDays();\r\n\r\n                return defaultExpirationDate;\r\n            };\r\n\r\n            function setMaxExpirationDate(dateTimeObj) {\r\n                var maxExpirationDateTime = String.format(\"{0} {1}\", dateTimeObj.date, dateTimeObj.time);\r\n                observableObject.maxExpirationDate(general.str2Date(maxExpirationDateTime, \"d/m/Y H:M\"));\r\n            }\r\n\r\n            function setMinExpirationDate() {\r\n                var minExpirationDateTime = String.format(\"{0} {1}\", CacheManager.ServerTime().ExtractDate(), CacheManager.ServerTime().ExtractTime());\r\n                observableObject.minExpirationDate(general.str2Date(minExpirationDateTime, \"d/m/Y H:M\"));\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            var getMaxExpirationDate = function (_instrumentID) {\r\n                instrumentID = _instrumentID;\r\n                var instrument = $instrumentsManager.GetInstrument(instrumentID);\r\n\r\n                var serverTime = new Date(CacheManager.ServerTime().getTime());\r\n                var defaultExpirationDate = serverTime.AddYear(1);\r\n                defaultExpirationDate.setHours(23);\r\n                defaultExpirationDate.setMinutes(59);\r\n\r\n                var resultDate;\r\n\r\n                if (instrument.isFuture) {\r\n                    resultDate = general.str2Date(instrument.expirationDate, \"d/m/Y H:M\");\r\n                } else if (instrument.expirationDate) {\r\n                    resultDate = general.str2Date(instrument.expirationDate, \"d/m/Y H:M\") < defaultExpirationDate ? general.str2Date(instrument.expirationDate, \"d/m/Y H:M\") : defaultExpirationDate;\r\n                } else {\r\n                    resultDate = defaultExpirationDate;\r\n                }\r\n\r\n                if (resultDate)\r\n                    resultDate.skipWeekendDays();\r\n                else\r\n                    resultDate = defaultExpirationDate;\r\n\r\n                return {\r\n                    date: general.SplitDateTime(resultDate.ExtractDate()).date,\r\n                    time: resultDate.ExtractTime()\r\n                };\r\n            };\r\n\r\n            //-------------------------------------------------------\r\n            var setExpirationTime = function () {\r\n                var maxHour = 23,\r\n                    maxMinute = 59,\r\n                    minHour = 0;\r\n\r\n                // compute minHour based on current time\r\n                if (general.SplitDateTime(CacheManager.ServerTime().ExtractDate()).date == observableObject.expirationDate()) {\r\n                    minHour = (CacheManager.ServerTime()).getHours() + 1;\r\n                }\r\n\r\n                var instrument = $instrumentsManager.GetInstrument(instrumentID);\r\n                if (instrument && instrument.expirationDate) {\r\n                    var instrumentDate = general.SplitDateTime(instrument.expirationDate);\r\n                    if (instrumentDate.date == observableObject.expirationDate()) {\r\n                        maxHour = parseInt(instrumentDate.hour, 10);\r\n                        maxMinute = parseInt(instrumentDate.min, 10);\r\n                    }\r\n                }\r\n\r\n                var expirationTime = observableObject.selectedHoursValue(),\r\n                    expirationTimeValue = 0;\r\n\r\n                if (!general.isEmptyType(expirationTime)) {\r\n                    var timeParts = expirationTime.split(\":\");\r\n                    expirationTimeValue = parseInt(timeParts[0], 10) * 60 + parseInt(timeParts[1], 10);\r\n                }\r\n\r\n                // Change the expiration time only if it is not between the min and max\r\n                var minTimeValue = minHour * 60,\r\n                    maxTimeValue = maxHour * 60 + maxMinute;\r\n\r\n                if (expirationTimeValue < minTimeValue) {\r\n                    observableObject.selectedHoursValue(String.format(\"{0}:00\", general.pad(minHour, 2)));\r\n                } else if (expirationTimeValue > maxTimeValue) {\r\n                    observableObject.selectedHoursValue(String.format(\"{0}:{1}\", general.pad(maxHour, 2), general.pad(maxMinute, 2)));\r\n                }\r\n\r\n                var hours = [];\r\n                general.fillHoursList(hours, maxHour, maxMinute, minHour);\r\n                observableObject.hoursList(hours);\r\n            };\r\n\r\n            //-------------------------------------------------------\r\n            var isValidExpirationDateByDay = function (val) {\r\n                if (observableObject.expirationDateSelector.IsGoodTillCancelChecked()) {\r\n                    observableObject.isDateTimeApplied(true);\r\n                    observableObject.selectedExpirationDateTime(\"\");\r\n                    return true;\r\n                }\r\n\r\n                observableObject.isDateTimeApplied(false);\r\n                var expirationDateTime = getExpirationDateTime(val, observableObject.selectedHoursValue());\r\n\r\n                // Added new validation, expiration date cannot exceed max expiration date\r\n                return expirationDateTime > CacheManager.ServerTime() && expirationDateTime <= observableObject.maxExpirationDate();\r\n            };\r\n\r\n            //-------------------------------------------------------\r\n            var isValidExpirationDateByDayAndHours = function (val) {\r\n                if (observableObject.expirationDateSelector.IsGoodTillCancelChecked()) {\r\n                    observableObject.isDateTimeApplied(true);\r\n                    observableObject.selectedExpirationDateTime(\"\");\r\n                    return true;\r\n                }\r\n\r\n                observableObject.isDateTimeApplied(false);\r\n                var expirationDateTime = getExpirationDateTime(observableObject.expirationDate(), val);\r\n\r\n                // Added new validation, expiration date cannot exceed max expiration date\r\n                return expirationDateTime > CacheManager.ServerTime() && expirationDateTime <= observableObject.maxExpirationDate();\r\n            };\r\n\r\n            //-------------------------------------------------------\r\n            var getExpirationDateTime = function (expirationDate, selectedHoursValue) {\r\n                var expirationDateTimeString = expirationDate + \" \" + selectedHoursValue;\r\n                var expirationDateTime = general.str2Date(expirationDateTimeString, \"d/m/Y H:M\");\r\n                observableObject.selectedExpirationDateTime(expirationDateTimeString);\r\n\r\n                return expirationDateTime;\r\n            };\r\n\r\n            //-------------------------------------------------------\r\n            var isValid = function () {\r\n                return observableObject.selectedHoursValue.isValid() || observableObject.expirationDateSelector.IsGoodTillCancelChecked();\r\n            };\r\n\r\n            //-------------------------------------------------------\r\n            var onExpirationDateTimeSet = function () {\r\n                if (isValid()) {\r\n                    observableObject.expirationDateSelector.UpdateSelectedDateUI(observableObject.expirationDateTime());\r\n                    observableObject.isDateTimeApplied(true);\r\n                    closeDialog();\r\n                }\r\n            };\r\n\r\n            //-------------------------------------------------------\r\n            var closeDialog = function () {\r\n                if (general.isDefinedType(DialogViewModel)) {\r\n                    DialogViewModel.close();\r\n                }\r\n            };\r\n\r\n            //-------------------------------------------------------\r\n\r\n            var dispose = function () {\r\n                if (disposables.length > 0) {\r\n                    for (var i = 0; i < disposables.length; i++) {\r\n                        disposables[i].dispose();\r\n                    }\r\n                }\r\n\r\n                disposables.length = 0;\r\n            };\r\n\r\n            //-------------------------------------------------------\r\n            return {\r\n                Data: observableObject,\r\n                SetOrder: setOrder,\r\n                UpdateSelectedWithToday: updateSelectedDateWithToday,\r\n                IsValid: isValid,\r\n                Init: init,\r\n                OnExpirationDateTimeSet: onExpirationDateTimeSet,\r\n                dispose: dispose\r\n            };\r\n        }\r\n\r\n        return ExpirationDateModel;\r\n    }\r\n);",
  "isBase64": false
}