{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/managers/AdvinionChart/TradingChartsManager.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'managers/AdvinionChart/TradingChartsManager',\r\n    [\r\n        'require',\r\n        'handlers/general',\r\n        'managers/AdvinionChart/AdvinionDataAdapter',\r\n        'initdatamanagers/InstrumentsManager',\r\n        'managers/instrumentTranslationsManager',\r\n        'initdatamanagers/Customer',\r\n        'Dictionary',\r\n        'vendor/latinize'\r\n    ],\r\n    function TradingChartsManagerDef(require) {\r\n        var advinionDataAdapter = require('managers/AdvinionChart/AdvinionDataAdapter'),\r\n            general = require('handlers/general'),\r\n            instrumentsManager = require('initdatamanagers/InstrumentsManager'),\r\n            instrumentTranslationsManager = require('managers/instrumentTranslationsManager'),\r\n            customer = require('initdatamanagers/Customer'),\r\n            dictionary = require('Dictionary'),\r\n            latinize = require('vendor/latinize'),\r\n            constants = {\r\n                dialogCompares: 'dialogcompares',\r\n                comparesgrp: 'majors',\r\n                compares: 'compares',\r\n                tickTimeFrame: eChartTimeFramesIds.tick, // 1 tick\r\n                minuteTimeFrame: '1M'\r\n            };\r\n\r\n        function TradingChartsManager() {\r\n            var subscribers = {};\r\n\r\n            function subscribe(subscriberGuid) {\r\n                if (subscribers[subscriberGuid]) {\r\n                    return;\r\n                }\r\n\r\n                subscribers[subscriberGuid] = [];\r\n            }\r\n\r\n            function unsubscribe(subscriberGuid) {\r\n                if (subscribers[subscriberGuid]) {\r\n                    cleanUnused(subscriberGuid, []);\r\n                    delete subscribers[subscriberGuid];\r\n                }\r\n            }\r\n\r\n            function getRecentHistory(request) {\r\n                if (request.timeFrame === constants.tickTimeFrame) {\r\n                    return advinionDataAdapter.getHistoryTicks(request);\r\n                } else {\r\n                    return advinionDataAdapter.getHistoryRates(request);\r\n                }\r\n            }\r\n\r\n            function getMultiRTResponseData(instrumentIds, orderDir) {\r\n                var responseData = [];\r\n\r\n                for (var counter = 0; counter < instrumentIds.length; counter++) {\r\n                    var instrumentId = parseInt(instrumentIds[counter]),\r\n                        quote = advinionDataAdapter.getQuoteData(instrumentId, orderDir);\r\n\r\n                    if (quote.isInactive) {\r\n                        continue;\r\n                    }\r\n\r\n                    responseData.push(advinionDataAdapter.getMapper().mapMultiRTObject(instrumentId, quote.value));\r\n                }\r\n\r\n                return responseData;\r\n            }\r\n\r\n            function cleanUnused(chartGuid, newInstrumentsIds) {\r\n                var currentChartSubscribedInstruments = subscribers[chartGuid],\r\n                    chartKeys = Object.keys(subscribers);\r\n\r\n                subscribers[chartGuid] = newInstrumentsIds;\r\n\r\n                var subscribedInstruments = []\r\n\r\n                chartKeys.forEach(function (key) {\r\n                    subscribedInstruments = subscribedInstruments.concat(subscribers[key]);\r\n                });\r\n\r\n                var intrumentsForUnsubscribe = currentChartSubscribedInstruments.filter(function (id) {\r\n                    return subscribedInstruments.indexOf(id) < 0;\r\n                });\r\n\r\n                intrumentsForUnsubscribe.forEach(advinionDataAdapter.unsubscribeFromQuote)\r\n            }\r\n\r\n            function getMultiRT(chartGuid, instrumentIds, orderDir) {\r\n                if (!subscribers[chartGuid]) {\r\n                    return null;\r\n                }\r\n\r\n                cleanUnused(chartGuid, instrumentIds);\r\n\r\n                var responseData = getMultiRTResponseData(instrumentIds, orderDir);\r\n\r\n                if (responseData.length === 0) {\r\n                    return null;\r\n                }\r\n\r\n                return responseData;\r\n            }\r\n\r\n            function getSymbolsByGroup(strGroup, instrumentId, comparisonInstrumentsNumber, instrumentsNumber) {\r\n                var isCompareGroup = strGroup === constants.comparesgrp;\r\n                var favoriteInstruments = instrumentsManager.GetFavoriteInstruments(isCompareGroup ? comparisonInstrumentsNumber : instrumentsNumber);\r\n                var instrumentsToReturn = (favoriteInstruments.length > 0) ? favoriteInstruments : instrumentsManager.GetMainMostPopularInstruments();\r\n\r\n                instrumentsToReturn = instrumentsToReturn.filter(function (instrument) {\r\n                    return !isCompareGroup || instrument.id !== instrumentId;\r\n                });\r\n\r\n                return { data: instrumentsToReturn.map(advinionDataAdapter.getMapper().mapSymbol) }\r\n            }\r\n\r\n            function findSymbols(searchString, maxResultCount, isForCompares) {\r\n                var resultData = {\r\n                    data: [\r\n                        getAllTabForSearchResults(searchString, maxResultCount)\r\n                    ]\r\n                };\r\n\r\n                if (!isForCompares) {\r\n                    resultData.data.push(getCurrenciesTabForSearchResults(searchString, maxResultCount));\r\n                    resultData.data.push(getCommoditiesTabForSearchResults(searchString, maxResultCount));\r\n                    resultData.data.push(getCryptoTabForSearchResults(searchString, maxResultCount));\r\n\r\n                    if (customer.prop.futureStatus != eTradingPermissions.Blocked) {\r\n                        resultData.data.push(getIndicesTabForSearchResults(searchString, maxResultCount));\r\n                    }\r\n\r\n                    if (customer.prop.shareStatus != eTradingPermissions.Blocked) {\r\n                        resultData.data.push(getSharesTabForSearchResults(searchString, maxResultCount));\r\n                        resultData.data.push(getEtfTabForSearchResults(searchString, maxResultCount));\r\n                    }\r\n                }\r\n\r\n                return resultData;\r\n            }\r\n\r\n            function getAllTabForSearchResults(searchString, maxResultCount) {\r\n                return {\r\n                    categoryId: eInstrumentType.Mixed,\r\n                    categoryLabel: dictionary.GetItem(\"All\",\"contentdata\",' '),\r\n                    categoryDescription: dictionary.GetItem(\"AllInstruments\", \"contentdata\", ' '),\r\n                    symbols: getAdvinionSymbols(maxResultCount, searchString, eInstrumentType.Mixed)\r\n                };\r\n            }\r\n\r\n            function getCurrenciesTabForSearchResults(searchString, searchInstrumentsNumber) {\r\n                return {\r\n                    categoryId: eInstrumentType.Currencies,\r\n                    categoryLabel: dictionary.GetItem(\"PresetCurrenciesTab\", 'PresetsCategories', ' '),\r\n                    categoryDescription: dictionary.GetItem(\"PresetCurrenciesTab\", 'PresetsCategories', ' '),\r\n                    symbols: getAdvinionSymbols(searchInstrumentsNumber, searchString, eInstrumentType.Currencies)\r\n                };\r\n            }\r\n\r\n            function getCommoditiesTabForSearchResults(searchString, searchInstrumentsNumber) {\r\n                return {\r\n                    categoryId: eInstrumentType.Commodities,\r\n                    categoryLabel: dictionary.GetItem(\"PresetCommoditiesTab\", 'PresetsCategories', ' '),\r\n                    categoryDescription: dictionary.GetItem(\"PresetCommoditiesTab\", 'PresetsCategories', ' '),\r\n                    symbols: getAdvinionSymbols(searchInstrumentsNumber, searchString, eInstrumentType.Commodities)\r\n                };\r\n            }\r\n\r\n            function getIndicesTabForSearchResults(searchString, searchInstrumentsNumber) {\r\n                return {\r\n                    categoryId: eInstrumentType.Indices,\r\n                    categoryLabel: dictionary.GetItem(\"PresetIndicesTab\", 'PresetsCategories', ' '),\r\n                    categoryDescription: dictionary.GetItem(\"PresetIndicesTab\", 'PresetsCategories', ' '),\r\n                    symbols: getAdvinionSymbols(searchInstrumentsNumber, searchString, eInstrumentType.Indices)\r\n                };\r\n            }\r\n\r\n            function getSharesTabForSearchResults(searchString, searchInstrumentsNumber) {\r\n                return {\r\n                    categoryId: eInstrumentType.Shares,\r\n                    categoryLabel: dictionary.GetItem(\"PresetSharesTab\", 'PresetsCategories', ' '),\r\n                    categoryDescription: dictionary.GetItem(\"PresetSharesTab\", 'PresetsCategories', ' '),\r\n                    symbols: getAdvinionSymbols(searchInstrumentsNumber, searchString, eInstrumentType.Shares)\r\n                };\r\n            }\r\n\r\n            function getEtfTabForSearchResults(searchString, searchInstrumentsNumber) {\r\n                return {\r\n                    categoryId: eInstrumentType.ETF,\r\n                    categoryLabel: dictionary.GetItem(\"PresetETFTab\", 'PresetsCategories', ' '),\r\n                    categoryDescription: dictionary.GetItem(\"PresetETFTab\", 'PresetsCategories', ' '),\r\n                    symbols: getAdvinionSymbols(searchInstrumentsNumber, searchString, eInstrumentType.ETF)\r\n                };\r\n            }\r\n\r\n            function getCryptoTabForSearchResults(searchString, searchInstrumentsNumber) {\r\n                return {\r\n                    categoryId: eInstrumentType.Crypto,\r\n                    categoryLabel: dictionary.GetItem(\"PresetCryptoTab\", 'PresetsCategories', ' '),\r\n                    categoryDescription: dictionary.GetItem(\"PresetCryptoTab\", 'PresetsCategories', ' '),\r\n                    symbols: getAdvinionSymbols(searchInstrumentsNumber, searchString, eInstrumentType.Crypto)\r\n                };\r\n            }\r\n\r\n            function getDefaultInstrument(instrumentId) {\r\n                var result;\r\n\r\n                if (general.isEmptyValue(instrumentId)) {\r\n                    result = getFirstFavoriteInstrument();\r\n                } else {\r\n                    result = instrumentsManager.GetInstrument(instrumentId); // works only for currencies\r\n                }\r\n\r\n                if (!result) {\r\n                    // in case of shares - get instrument from other source\r\n                    var defaultInstrumentId = instrumentsManager.GetUserDefaultInstrumentId();\r\n                    result = instrumentsManager.GetInstrument(defaultInstrumentId);\r\n                }\r\n\r\n                return result;\r\n            }\r\n\r\n            function getFirstFavoriteInstrument() {\r\n                return instrumentsManager.GetFavoriteInstruments(1)[0];\r\n            }\r\n\r\n            function getAdvinionSymbols(maxCount, searchString, instrumentType) {\r\n                var latinizedSearchString = latinize(searchString).toLowerCase(),\r\n                    filteredSymbols = [];\r\n\r\n                instrumentsManager.ForeachInstrument(function filterSymbols(id, instrument) {\r\n                    if (isSymbolMatched(instrument, instrumentType, latinizedSearchString)) {\r\n                        filteredSymbols.push(advinionDataAdapter.getMapper().mapSymbol(instrument));\r\n                    }\r\n                });\r\n\r\n                filteredSymbols.sort(function (a, b) {\r\n                    return a.name.localeCompare(b.name);\r\n                });\r\n\r\n                return filteredSymbols.slice(0, maxCount);\r\n            }\r\n\r\n            function isSymbolMatched(instrument, instrumentType, latinizedSearchString) {\r\n                if (latinizedSearchString === String.empty) {\r\n                    return true;\r\n                }\r\n\r\n                var instrumentLatinizedDescription = instrumentTranslationsManager.GetFullTextLatinized(instrument.id).toLowerCase();\r\n\r\n                return instrumentLatinizedDescription.containsNotEmpty(latinizedSearchString) &&\r\n                    (instrumentType === eInstrumentType.Mixed || instrument.instrumentTypeId === instrumentType);\r\n            }\r\n\r\n            function getAdvinionInstrument(instrumentId) {\r\n                var current = instrumentsManager.GetInstrument(instrumentId);\r\n\r\n                return general.isEmptyType(current)\r\n                    ? advinionDataAdapter.getMapper().mapSymbolLite(instrumentId)\r\n                    : advinionDataAdapter.getMapper().mapSymbol(current);\r\n            }\r\n\r\n            return {\r\n                subscribe: subscribe,\r\n                unsubscribe: unsubscribe,\r\n                GetSymbolsByGroup: getSymbolsByGroup,\r\n                GetRecentHistory: getRecentHistory,\r\n                GetMultiRT: getMultiRT,\r\n                FindSymbols: findSymbols,\r\n                GetTimeScalesAsync: advinionDataAdapter.getTimeScalesAsync,\r\n                GetDefaultInstrument: getDefaultInstrument,\r\n                GetAdvinionInstrument: getAdvinionInstrument\r\n            };\r\n        }\r\n\r\n        return TradingChartsManager();\r\n    }\r\n);",
  "isBase64": false
}