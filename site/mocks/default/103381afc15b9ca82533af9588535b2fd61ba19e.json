{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/devices/web/uilayer/viewmodels/TransactionSwitcherViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'deviceviewmodels/TransactionSwitcherViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'Dictionary',\r\n        'managers/viewsmanager',\r\n        'initdatamanagers/InstrumentsManager',\r\n        'initdatamanagers/Customer',\r\n        'modules/BuilderForInBetweenQuote',\r\n        'StateObject!Transaction'\r\n    ],\r\n    function TransactionSwitcherDef(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            koComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            dictionary = require('Dictionary'),\r\n            viewsManager = require('managers/viewsmanager'),\r\n            instrumentsManager = require('initdatamanagers/InstrumentsManager'),\r\n            customer = require('initdatamanagers/Customer'),\r\n            BuilderForInBetweenQuote = require('modules/BuilderForInBetweenQuote'),\r\n            stateObject = require('StateObject!Transaction');\r\n\r\n        var TransactionSwitcherViewModel = general.extendClass(koComponentViewModel, function TransactionSwitcherClass() {\r\n            var self = this,\r\n                parent = self.parent,\r\n                data = this.Data || {},\r\n                usdCcy = 47,\r\n                transactionsList = [\r\n                    { transactionName: 'fx-component-new-deal-slip', transactionLabel: dictionary.GetItem('NewDeal', 'dialogsTitles', ' '), transactionType: eTransactionSwitcher.NewDeal },\r\n                    { transactionName: 'fx-component-new-limit', transactionLabel: dictionary.GetItem('NewLimit', 'dialogsTitles', ' '), transactionType: eTransactionSwitcher.NewLimit }\r\n                ],\r\n                stateObjectSubscriptions = [];\r\n\r\n            function init(customSettings) {\r\n                parent.init.call(self, customSettings);\r\n\r\n                setDefaultObservables();\r\n                setComputables();\r\n                setSubscribers();\r\n\r\n                populateInQuoteForUsdCcyToAccountCcy();\r\n\r\n                setInitialTransactionTab();\r\n            }\r\n\r\n            function setDefaultObservables() {\r\n                data.quoteForOtherCcyToAccountCcy = stateObject.set('quoteForOtherCcyToAccountCcy', ko.observable(''));\r\n                data.quoteForBaseCcyToAccountCcy = stateObject.set('quoteForBaseCcyToAccountCcy', ko.observable(''));\r\n                data.quoteForUsdCcyToAccountCcy = stateObject.set('quoteForUsdCcyToAccountCcy', ko.observable(''));\r\n                data.instrumentId = stateObject.set('selectedInstrument', ko.observable(''));\r\n                data.transactionsList = ko.observableArray(transactionsList);\r\n                data.selectedTransactionTab = ko.observable();\r\n                data.selectedTransactionTab(stateObject.update('selectedTransactionTab', {}));\r\n                data.showTransaction = stateObject.get('showTransaction') || stateObject.set('showTransaction', ko.observable(true));\r\n                stateObjectSubscriptions.push({\r\n                    unsubscribe: stateObject.subscribe('selectedTransactionTab', function (value) {\r\n                        data.selectedTransactionTab(value);\r\n                    })\r\n                });\r\n            }\r\n\r\n            function setComputables() {\r\n                data.isNewDealVisible = self.createComputed(function () {\r\n                    return data.selectedTransactionTab().transactionType === eTransactionSwitcher.NewDeal;\r\n                });\r\n\r\n                data.isNewLimitVisible = self.createComputed(function () {\r\n                    return data.selectedTransactionTab().transactionType === eTransactionSwitcher.NewLimit;\r\n                });\r\n            }\r\n\r\n            function setSubscribers() {\r\n                self.subscribeTo(data.instrumentId, function (instrumentId) {\r\n                    var instrument = instrumentsManager.GetInstrument(instrumentId);\r\n                    if (instrument) {\r\n                        populateInBetweenQuotes(instrument);\r\n                    }\r\n                });\r\n            }\r\n\r\n            function populateInBetweenQuotes(instrument) {\r\n                BuilderForInBetweenQuote\r\n                    .GetInBetweenQuote(instrument.otherSymbol, customer.prop.baseCcyId())\r\n                    .then(function (response) {\r\n                        data.quoteForOtherCcyToAccountCcy(response);\r\n                    })\r\n                    .done();\r\n\r\n                BuilderForInBetweenQuote\r\n                    .GetInBetweenQuote(instrument.baseSymbol, customer.prop.baseCcyId())\r\n                    .then(function (response) {\r\n                        data.quoteForBaseCcyToAccountCcy(response);\r\n                    })\r\n                    .done();\r\n            }\r\n\r\n            function populateInQuoteForUsdCcyToAccountCcy() {\r\n                BuilderForInBetweenQuote\r\n                    .GetInBetweenQuote(usdCcy, customer.prop.baseCcyId())\r\n                    .then(function (response) {\r\n                        data.quoteForUsdCcyToAccountCcy(response);\r\n                    })\r\n                    .done();\r\n            }\r\n\r\n            function getDefaultTransactionTab() {\r\n                var transactionType = viewsManager.GetViewArgsByKeyName(eViewTypes.vTransactionSwitcher, 'transactionType') || eTransactionSwitcher.NewDeal,\r\n                    tabToSelect = general.isDefinedType(transactionType) && general.objectContainsValue(eTransactionSwitcher, transactionType) ? transactionType : eTransactionSwitcher.NewDeal;\r\n\r\n                return getTransactionProperties(tabToSelect);\r\n            }\r\n\r\n            function setInitialTransactionTab() {\r\n                var args = viewsManager.GetViewArgs(eViewTypes.vTransactionSwitcher) || {};\r\n\r\n                if (!general.isNullOrUndefined(args.orderDir) && args.instrumentId && instrumentsManager.GetInstrument(args.instrumentId).isStock && args.orderDir === eOrderDir.Sell) {\r\n                    args.orderDir = eOrderDir.None;\r\n                }\r\n\r\n                stateObject.update('selectedTransactionTab', getDefaultTransactionTab());\r\n            }\r\n\r\n            function getTransactionProperties(transactionType) {\r\n                return ko.utils.arrayFirst(transactionsList, function (item) {\r\n                    return item.transactionType === transactionType;\r\n                });\r\n            }\r\n\r\n            function dispose() {\r\n                var selectedAmount = stateObject.get(\"selectedDealAmount\");\r\n\r\n                if (selectedAmount) {\r\n                    selectedAmount(\"\");\r\n                }\r\n\r\n                while (stateObjectSubscriptions.length > 0) {\r\n                    stateObjectSubscriptions.pop()\r\n                        .unsubscribe();\r\n                }\r\n\r\n                stateObject.clear();\r\n\r\n                parent.dispose.call(self); // inherited from KoComponentViewModel\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Data: data\r\n            };\r\n        });\r\n\r\n        var createViewModel = function (params) {\r\n            var viewModel = new TransactionSwitcherViewModel();\r\n            viewModel.init(params);\r\n\r\n            return viewModel;\r\n        };\r\n\r\n        return {\r\n            viewModel: { createViewModel: createViewModel }\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}