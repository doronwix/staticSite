{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/Limits/LimitBaseViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿/* global eStartSpinFrom */\r\ndefine(\r\n    'viewmodels/Limits/LimitBaseViewModel',\r\n    [\r\n        'require',\r\n        'Dictionary',\r\n        'helpers/ObservableCustomExtender',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'configuration/initconfiguration',\r\n        'viewmodels/limits/ExpirationDateModel',\r\n        'managers/viewsmanager',\r\n        'FxNet/LogicLayer/Deal/DealAmountLabel',\r\n        'initdatamanagers/SymbolsManager',\r\n        'cachemanagers/QuotesManager',\r\n        'deviceviewmodels/BaseOrder',\r\n        'viewmodels/limits/SetLimitsViewModel',\r\n        'viewmodels/limits/RateFieldModel',\r\n        'initdatamanagers/Customer',\r\n        'managers/CustomerProfileManager',\r\n        'initdatamanagers/InstrumentsManager',\r\n        'generalmanagers/RegistrationManager',\r\n        'modules/BuilderForInBetweenQuote',\r\n        'StateObject!Transaction',\r\n        'cachemanagers/ClientStateFlagsManager',\r\n        'calculators/LimitRangeCalculator',\r\n        'calculators/LimitValuesCalculator'\r\n    ],\r\n    function LimitBaseDef(require) {\r\n        var ko = require('helpers/ObservableCustomExtender'),\r\n            general = require('handlers/general'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            settings = require('configuration/initconfiguration').NewLimitConfiguration,\r\n            ExpirationDateModel = require('viewmodels/limits/ExpirationDateModel'),\r\n            ViewsManager = require('managers/viewsmanager'),\r\n            DealAmountLabel = require('FxNet/LogicLayer/Deal/DealAmountLabel'),\r\n            SymbolsManager = require('initdatamanagers/SymbolsManager'),\r\n            QuotesManager = require('cachemanagers/QuotesManager'),\r\n            BaseOrder = require('deviceviewmodels/BaseOrder'),\r\n            SetLimitsViewModel = require('viewmodels/limits/SetLimitsViewModel'),\r\n            RateFieldModel = require('viewmodels/limits/RateFieldModel'),\r\n            Customer = require('initdatamanagers/Customer'),\r\n            CustomerProfileManager = require('managers/CustomerProfileManager'),\r\n            InstrumentsManager = require('initdatamanagers/InstrumentsManager'),\r\n            RegistrationManager = require('generalmanagers/RegistrationManager'),\r\n            BuilderForInBetweenQuote = require('modules/BuilderForInBetweenQuote'),\r\n            stateObject = require('StateObject!Transaction'),\r\n            ClientStateFlagsManager = require(\"cachemanagers/ClientStateFlagsManager\"),\r\n            LimitRangesCalculator = require('calculators/LimitRangeCalculator');\r\n\r\n        var LimitBaseViewModel = general.extendClass(KoComponentViewModel, function LimitBaseClass() {\r\n            var self = this,\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = this.Data, // inherited from KoComponentViewModel\r\n                baseOrder = new BaseOrder(),\r\n                expirationDateModel = new ExpirationDateModel(),\r\n                setLimitsModel = new SetLimitsViewModel(),\r\n                limitLevelField = new RateFieldModel();\r\n\r\n            function init(customSettings) {\r\n                parent.init.call(self, customSettings); // inherited from KoComponentViewModel\t\t\t\r\n\r\n                baseOrder.Init({}, data);\r\n                expirationDateModel.Init();\r\n\r\n                setObservables();\r\n                setComputables();\r\n                setSubscribers();\r\n\r\n                var setlimitsConfiguration = self.getSettings().setlimitsConfiguration;\r\n                setLimitsModel.Init(data, setlimitsConfiguration);\r\n\r\n                setPropertiesFromViewArgs();\r\n            }\r\n\r\n            function setObservables() {\r\n                data.ready = ko.observable(false);\r\n\r\n                data.customerSymbolName = stateObject.set(\"customerSymbolName\", ko.observable(Customer.prop.baseCcyName()));\r\n                data.customerSymbolId = stateObject.set(\"customerSymbolId\", ko.observable(Customer.prop.baseCcyId()));\r\n                data.orderDir = stateObject.set(\"orderDir\", ko.observable(eOrderDir.None).extend({ dirty: false }));\r\n                data.selectedInstrument = stateObject.set(\"selectedInstrument\", ko.observable());\r\n                data.selectedDealAmount = stateObject.set(\"selectedDealAmount\", ko.observable());\r\n                data.selectedDealAmount.extend({ notify: 'always' });\r\n                data.selectedDealAmount.extend({ amountValidation: [] });\r\n                data.amountSymbol = stateObject.set(\"amountSymbol\", ko.observable(\"\"));\r\n                data.quoteForOtherCcyToAccountCcy = stateObject.get(\"quoteForOtherCcyToAccountCcy\");\r\n                data.quoteForBaseCcyToAccountCcy = stateObject.get(\"quoteForBaseCcyToAccountCcy\");\r\n                data.quoteForUsdCcyToAccountCcy = stateObject.get(\"quoteForUsdCcyToAccountCcy\");\r\n                data.bid = stateObject.set(\"bid\", ko.observable(\"\"));\r\n                data.ask = stateObject.set(\"ask\", ko.observable(\"\"));\r\n\r\n                data.initialToolTab = stateObject.set(\"initialToolTab\", ko.observable(\"\"));\r\n                data.showTools = stateObject.set(\"showTools\", ko.observable(CustomerProfileManager.ProfileCustomer().tools === 1));\r\n\r\n                data.bidPips = stateObject.set(\"bidPips\", ko.observable(\"\"));\r\n                data.askPips = stateObject.set(\"askPips\", ko.observable(\"\"));\r\n                data.changePips = stateObject.set(\"changePips\", ko.observable(\"\"));\r\n                data.tradeTime = stateObject.set(\"tradeTime\", ko.observable(\"\"));\r\n                data.highBid = stateObject.set(\"highBid\", ko.observable(\"\"));\r\n                data.lowAsk = stateObject.set(\"lowAsk\", ko.observable(\"\"));\r\n                data.open = stateObject.set(\"open\", ko.observable(\"\"));\r\n                data.close = stateObject.set(\"close\", ko.observable(\"\"));\r\n                data.change = stateObject.set(\"change\", ko.observable(\"\"));\r\n                data.formattedChange = stateObject.set(\"formattedChange\", ko.observable(\"\"));\r\n\r\n                data.isForex = stateObject.set(\"isForex\", ko.observable(false));\r\n                data.isFuture = stateObject.set(\"isFuture\", ko.observable(false));\r\n                data.isShare = stateObject.set(\"isShare\", ko.observable(false));\r\n                data.isStock = stateObject.set(\"isStock\", ko.observable(false));\r\n                data.isNonForex = ko.observable(true);\r\n\r\n                data.hasInstrument = ko.observable(false);\r\n                data.ccyPair = stateObject.set(\"ccyPair\", ko.observable(''));\r\n\r\n                data.activeQuote = null;\r\n                data.isActiveQuote = stateObject.set(\"isActiveQuote\", ko.observable(false));\r\n                data.activeQuoteState = ko.observable();\r\n                data.PageName = eDealPage.NewLimitViewModel;\r\n\r\n                data.dealMinMaxAmounts = ko.observableArray([]);\r\n                data.dealAmountLabel = ko.observable(\"\");\r\n                data.openLimit = stateObject.set(\"openLimit\", ko.observable(\"\").extend({ dirty: false, rate: true }));\r\n                data.limitCalc = ko.observable(\"\").extend({ dirty: false });\r\n                data.enableSLLimit = ko.observable(false);\r\n                data.enableTPLimit = ko.observable(false);\r\n                data.limitsReady = ko.observable(false);\r\n                data.enableLimitLevel = ko.observable(false);\r\n\r\n                data.lowerRangeNear = ko.observable(\"\").extend({ dirty: false });\r\n                data.higherRangeNear = ko.observable(\"\").extend({ dirty: false });\r\n                data.openLimitLowerRange = new LimitRangesCalculator.LimitRange(ko);\r\n                data.openLimitHigherRange = new LimitRangesCalculator.LimitRange(ko);\r\n                data.decimalDigit = ko.observable(0);\r\n\r\n                data.bidLabel = {\r\n                    First: ko.observable(\"\"),\r\n                    Middle: ko.observable(\"\"),\r\n                    Last: ko.observable(\"\")\r\n                };\r\n\r\n                data.askLabel = {\r\n                    First: ko.observable(\"\"),\r\n                    Middle: ko.observable(\"\"),\r\n                    Last: ko.observable(\"\")\r\n                };\r\n\r\n                data.quotesAvailable = ko.observable(false);\r\n\r\n                data.baseSymbol = ko.observable(\"\");\r\n                data.baseSymbolName = ko.observable(\"\");\r\n\r\n                data.profileKeyForDefaultTab = ko.observable(settings.profileKeyForDefaultTab);\r\n\r\n                data.isSlRateActiveTab = ko.observable(false);\r\n                data.isSlAmountActiveTab = ko.observable(false);\r\n                data.isSlPercentActiveTab = ko.observable(false);\r\n                data.isTpRateActiveTab = ko.observable(false);\r\n                data.isTpAmountActiveTab = ko.observable(false);\r\n                data.isTpPercentActiveTab = ko.observable(false);\r\n                data.displaySlPercentSymbol = ko.observable(false);\r\n                data.displayTpPercentSymbol = ko.observable(false);\r\n                data.displaySlAmountCcySymbol = ko.observable(false);\r\n                data.displayTpAmountCcySymbol = ko.observable(false);\r\n                data.isProcessing = ko.observable(false);\r\n\r\n                data.quoteForAccountCcyToOtherCcy = ko.observable(\"\");\r\n\r\n                // Functions\r\n                data.buyBtnClick = function () {\r\n                    data.enableLimitLevel(true);\r\n                    setOrderDir(eOrderDir.Buy);\r\n                };\r\n\r\n                data.sellBtnClick = function () {\r\n                    data.enableLimitLevel(true);\r\n                    setOrderDir(eOrderDir.Sell);\r\n                };\r\n\r\n                data.chartTransactionEnabled = stateObject.set('chartTransactionEnabled', ko.observable(false));\r\n            }\r\n\r\n            function setComputables() {\r\n                data.isShowBuyBox = self.createComputed(function () {\r\n                    return data.orderDir() === eOrderDir.Buy;\r\n                });\r\n\r\n                data.isShowSellBox = self.createComputed(function () {\r\n                    return data.orderDir() === eOrderDir.Sell;\r\n                });\r\n\r\n                data.ViewModelReady = self.createComputed(function () {\r\n                    if (data.ready()) {\r\n                        return true;\r\n                    }\r\n\r\n                    var hasInstrument = data.hasInstrument(),\r\n                        hasLimits = data.limitsReady();\r\n\r\n                    var isReady = hasInstrument && hasLimits;\r\n                    data.ready(isReady);\r\n\r\n                    return isReady;\r\n                });\r\n\r\n                data.ValidationRules = self.createComputed(function () {\r\n                    // range near\r\n                    if (data.lowerRangeNear() != data.higherRangeNear()) {\r\n                        data.openLimit.rules.removeAll();\r\n\r\n                        var limitRange = {}; //needed intervar : [minfar minnear] [maxnear maxfar]\r\n\r\n                        if (data.orderDir() === eOrderDir.Sell) {\r\n\r\n                            limitRange.minfar = general.toNumeric(Format.toRate(data.openLimitLowerRange.far(), true, data.selectedInstrument()));\r\n                            limitRange.minnear = general.toNumeric(Format.toRate(data.openLimitLowerRange.near(), true, data.selectedInstrument()));\r\n                            limitRange.maxnear = general.toNumeric(Format.toRate(data.openLimitHigherRange.near(), true, data.selectedInstrument()));\r\n                            limitRange.maxfar = general.toNumeric(Format.toRate(data.openLimitHigherRange.far(), true, data.selectedInstrument()));\r\n\r\n                            return {\r\n                                required: true,\r\n                                rangeInterval: limitRange,\r\n                                rate: {\r\n                                    message: Dictionary.GetItem(\"limitLevelInvalid\"),\r\n                                    params: true\r\n                                },\r\n                                toNumericLength: {\r\n                                    ranges: [{\r\n                                        from: 0, to: Number.MAX_SAFE_INTEGER, decimalDigits: data.decimalDigit()\r\n                                    }]\r\n                                }\r\n                            };\r\n                        } else {\r\n                            limitRange.minfar = general.toNumeric(Format.toRate(data.openLimitHigherRange.far(), true, data.selectedInstrument()));\r\n                            limitRange.minnear = general.toNumeric(Format.toRate(data.openLimitHigherRange.near(), true, data.selectedInstrument()));\r\n                            limitRange.maxnear = general.toNumeric(Format.toRate(data.openLimitLowerRange.near(), true, data.selectedInstrument()));\r\n                            limitRange.maxfar = general.toNumeric(Format.toRate(data.openLimitLowerRange.far(), true, data.selectedInstrument()));\r\n\r\n                            return {\r\n                                required: true,\r\n                                rangeInterval: limitRange,\r\n                                rate: {\r\n                                    message: Dictionary.GetItem(\"limitLevelInvalid\"),\r\n                                    params: true\r\n                                },\r\n                                toNumericLength: {\r\n                                    ranges: [{\r\n                                        from: 0, to: Number.MAX_SAFE_INTEGER, decimalDigits: data.decimalDigit()\r\n                                    }]\r\n                                }\r\n                            };\r\n                        }\r\n                    } else {\r\n                        return data.openLimit.rules;\r\n                    }\r\n\r\n                }).extend({ notify: 'always' });\r\n\r\n                data.isUp = ko.pureComputed(function () {\r\n                    return data.activeQuoteState() === eQuoteStates.Up;\r\n                });\r\n\r\n                data.isDown = ko.pureComputed(function () {\r\n                    return data.activeQuoteState() === eQuoteStates.Down;\r\n                });\r\n            }\r\n\r\n            function setSubscribers() {\r\n                self.subscribeAndNotify(data.ask, function (rate) {\r\n                    var splitRate = Format.tenthOfPipSplitRate(rate, data.selectedInstrument());\r\n\r\n                    data.askLabel.First(splitRate.button.first);\r\n                    data.askLabel.Middle(splitRate.button.middle);\r\n                    data.askLabel.Last(splitRate.button.last);\r\n                });\r\n\r\n                self.subscribeAndNotify(data.bid, function (rate) {\r\n                    var splitRate = Format.tenthOfPipSplitRate(rate, data.selectedInstrument());\r\n\r\n                    data.bidLabel.First(splitRate.button.first);\r\n                    data.bidLabel.Middle(splitRate.button.middle);\r\n                    data.bidLabel.Last(splitRate.button.last);\r\n                });\r\n\r\n                self.subscribeChanged(data.selectedInstrument, function (instrumentId, prevInstrumentId) {\r\n                    if (prevInstrumentId && instrumentId !== prevInstrumentId) {\r\n                        data.selectedDealAmount(\"\");\r\n\r\n                        if (!(stateObject.containsKey('skipReset') && stateObject.get(\"skipReset\"))) {\r\n                            data.orderDir(eOrderDir.None);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(data.selectedInstrument, function (instrumentId) {\r\n                    var instrument = InstrumentsManager.GetInstrument(instrumentId),\r\n                        roundMinMaxAmounts = function (amount) {\r\n                            return [Math.ceil(amount[0]), Math.floor(amount[1])]\r\n                        },\r\n                        roundDefaultSize = function (defaultSize, minMaxAmounts) {\r\n                            var up = Math.ceil(defaultSize);\r\n                            return up < minMaxAmounts[1] ? up : Math.floor(defaultSize);\r\n                        };\r\n\r\n                    if (instrument) {\r\n                        data.quotesAvailable(false);\r\n                        data.dealMinMaxAmounts([]);\r\n\r\n                        //order matters because of valueAllowUnset param from select in View  \r\n                        InstrumentsManager.GetUpdatedInstrumentWithDealMinMaxAmounts(instrumentId).then(function (response) {\r\n                            var dealMinMaxAmounts = instrument.isStock && response.dealMinMaxAmounts && response.dealMinMaxAmounts.length > 1 ?\r\n                                roundMinMaxAmounts(response.dealMinMaxAmounts) : response.dealMinMaxAmounts,\r\n                                defaultSize = instrument.isStock && dealMinMaxAmounts && dealMinMaxAmounts.length > 1 ?\r\n                                    roundDefaultSize(response.defaultDealSize, dealMinMaxAmounts) : response.defaultDealSize;\r\n                            data.dealMinMaxAmounts(dealMinMaxAmounts);\r\n                            data.selectedDealAmount.extend({ amountValidation: dealMinMaxAmounts });\r\n                            data.selectedDealAmount(data.selectedDealAmount() || defaultSize);\r\n                        }).done();\r\n\r\n                        data.ccyPair(instrument.ccyPair);\r\n                        data.amountSymbol(instrument.otherSymbol);\r\n                        data.baseSymbol(instrument.baseSymbol);\r\n                        data.baseSymbolName(SymbolsManager.GetTranslatedSymbolById(instrument.baseSymbol));\r\n                        data.isForex(instrument.isForex);\r\n                        data.isShare(instrument.isShare);\r\n                        data.isFuture(instrument.isFuture);\r\n                        data.isStock(instrument.isStock);\r\n                        data.isNonForex(instrument.instrumentTypeId !== eInstrumentType.Currencies);\r\n                        data.decimalDigit(instrument.DecimalDigit);\r\n                        limitLevelField.precision(instrument.DecimalDigit);\r\n\r\n                        if (!(stateObject.containsKey('skipReset') && stateObject.get(\"skipReset\"))) {\r\n                            data.enableSLLimit(false);\r\n                            data.enableTPLimit(false);\r\n                            data.enableLimitLevel(false);\r\n\r\n                            data.openLimit(\"\");\r\n                            data.openLimit.markClean();\r\n                            data.openLimit.isModified(false);\r\n                        }\r\n\r\n                        var result = DealAmountLabel.Translate(instrument);\r\n                        data.dealAmountLabel(result.label);\r\n\r\n                        registerInstruments(instrumentId);\r\n                        updateQuoteValues();\r\n\r\n                        expirationDateModel.UpdateSelectedWithToday(instrumentId);\r\n\r\n                        BuilderForInBetweenQuote.GetInBetweenQuote(Customer.prop.baseCcyId(), instrument.otherSymbol)\r\n                            .then(function (response) {\r\n                                data.quoteForAccountCcyToOtherCcy(response);\r\n                            }).done();\r\n\r\n                        data.hasInstrument(true);\r\n\r\n                        updateTransactionViewArgs(instrumentId);\r\n                    } else {\r\n                        data.hasInstrument(false);\r\n                    }\r\n                });\r\n\r\n                self.subscribeTo(data.openLimit, function (value) {\r\n                    data.limitCalc(value);\r\n                });\r\n\r\n                self.subscribeTo(data.ValidationRules, function (value) {\r\n                    data.openLimit.extend(value);\r\n                });\r\n            }\r\n\r\n            /**\r\n             * Get Transaction Switcher view args, \r\n             * if the view is not visible then return false\r\n             * @returns {Object|False} \r\n             */\r\n            function getTransactionViewArgs() {\r\n                var transactionView = ViewsManager.GetActiveFormViewProperties(eViewTypes.vTransactionSwitcher);\r\n                var priceAlertView = ViewsManager.GetActiveFormViewProperties(eViewTypes.vNewPriceAlert);\r\n\r\n                if (transactionView && transactionView.visible()) {\r\n                    return transactionView.args || {};\r\n                } else if (priceAlertView && priceAlertView.visible()) {\r\n                    return priceAlertView.args || {};\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            function updateTransactionViewArgs(instrumentId) {\r\n                var args = getTransactionViewArgs();\r\n\r\n                if (!general.isNullOrUndefined(args) && args !== false) {\r\n                    args.instrumentId = instrumentId;\r\n                    var transactionView = ViewsManager.GetActiveFormViewProperties(eViewTypes.vTransactionSwitcher);\r\n                    var priceAlertView = ViewsManager.GetActiveFormViewProperties(eViewTypes.vNewPriceAlert);\r\n                    if (transactionView && transactionView.visible()) {\r\n                        ViewsManager.ChangeViewState(eViewTypes.vTransactionSwitcher, eViewState.Update, args);\r\n                    } else if (priceAlertView && priceAlertView.visible()) {\r\n                        ViewsManager.ChangeViewState(eViewTypes.vNewPriceAlert, eViewState.Update, args);\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            function setPropertiesFromViewArgs() {\r\n                var args = getTransactionViewArgs() || {},\r\n                    toolTab = args.tab,\r\n                    prevInstrumentId = data.selectedInstrument(),\r\n                    instrumentId = args.instrumentId\r\n                        || data.selectedInstrument()\r\n                        || InstrumentsManager.GetUserDefaultInstrumentId();\r\n\r\n                data.selectedInstrument(instrumentId);\r\n\r\n                if (prevInstrumentId === instrumentId) {\r\n                    data.selectedInstrument.notifySubscribers(instrumentId);\r\n                }\r\n\r\n                if (general.isInt(args.orderDir)) {\r\n                    setOrderDir(args.orderDir);\r\n                }\r\n\r\n                if (args.selectedDealAmount) {\r\n                    data.selectedDealAmount(args.selectedDealAmount);\r\n                }\r\n\r\n                data.initialToolTab((general.isDefinedType(toolTab) && general.isDefinedType(eNewDealTool[toolTab])) ? eNewDealTool[toolTab] : CustomerProfileManager.ProfileCustomer()[settings.profileKeyForDefaultTab] || eNewDealTool.Chart);\r\n            }\r\n\r\n            function setLimitTabsFromClientProfile() {\r\n                var profileCustomer = CustomerProfileManager.ProfileCustomer();\r\n\r\n                if (profileCustomer.defaultSlOrderTab) {\r\n                    setLimitsModel.SetSlActiveTab(profileCustomer.defaultSlOrderTab);\r\n                } else {\r\n                    setLimitsModel.SetSlActiveTab(eSetLimitsTabs.Amount);\r\n                }\r\n\r\n                if (profileCustomer.defaultTpOrderTab) {\r\n                    setLimitsModel.SetTpActiveTab(profileCustomer.defaultTpOrderTab);\r\n                } else {\r\n                    setLimitsModel.SetTpActiveTab(eSetLimitsTabs.Amount);\r\n                }\r\n            }\r\n\r\n            function setOrderDir(orderDir) {\r\n                if (orderDir != eOrderDir.Buy && orderDir != eOrderDir.Sell && orderDir != eOrderDir.None) {\r\n                    orderDir = eOrderDir.None;\r\n                }\r\n\r\n                data.orderDir(orderDir);\r\n\r\n                if (data.activeQuote) {\r\n                    self.updateDistances();\r\n                }\r\n            }\r\n\r\n            function updateQuoteValues() {\r\n                data.activeQuote = QuotesManager.Quotes.GetItem(data.selectedInstrument());\r\n\r\n                if (data.activeQuote) {\r\n                    data.isActiveQuote(data.activeQuote.isActive());\r\n                    data.bid(data.activeQuote.bid);\r\n                    data.ask(data.activeQuote.ask);\r\n                    data.open(data.activeQuote.open);\r\n                    data.close(data.activeQuote.close);\r\n                    data.change(Format.toPercent(data.activeQuote.change));\r\n                    data.formattedChange(Format.toSignedPercent(data.activeQuote.change, ''));\r\n                    data.changePips(data.activeQuote.changePips);\r\n                    data.highBid(data.activeQuote.highBid);\r\n                    data.lowAsk(data.activeQuote.lowAsk);\r\n                    data.tradeTime(data.activeQuote.tradeTime);\r\n                    data.quotesAvailable(true);\r\n                    data.activeQuoteState(data.activeQuote.state);\r\n                    self.updateDistances();\r\n                }\r\n            }\r\n\r\n            function registerInstruments(instrumentId) {\r\n                RegistrationManager.Update(eRegistrationListName.SingleQuote, instrumentId);\r\n            }\r\n\r\n            function registerToDispatcher() {\r\n                QuotesManager.OnChange.Add(updateQuoteValues);\r\n            }\r\n\r\n            function unRegisterFromDispatcher() {\r\n                QuotesManager.OnChange.Remove(updateQuoteValues);\r\n            }\r\n            // overridable\r\n            self.updateDistances = function () {\r\n                var orderDir = data.orderDir() === eOrderDir.None ? eOrderDir.Buy : data.orderDir(),\r\n                    instrument = InstrumentsManager.GetInstrument(data.selectedInstrument());\r\n\r\n                if (!instrument) {\r\n                    return;\r\n                }\r\n\r\n                LimitRangesCalculator.CalculateOpeningRanges(data.bid(), data.ask(), orderDir, data.openLimitLowerRange, data.openLimitHigherRange, instrument, ClientStateFlagsManager.CSFlags.limitMultiplier);\r\n                var openLimitLowerRange = orderDir === eOrderDir.Sell ? data.openLimitLowerRange.near() : data.openLimitHigherRange.near();\r\n                data.lowerRangeNear(Format.toRate(openLimitLowerRange, true, data.selectedInstrument()));\r\n\r\n                var openLimitHigherRange = orderDir === eOrderDir.Sell ? data.openLimitHigherRange.near() : data.openLimitLowerRange.near();\r\n                data.higherRangeNear(Format.toRate(openLimitHigherRange, true, data.selectedInstrument()));\r\n\r\n                var min1 = data.orderDir() === eOrderDir.Sell ? data.openLimitLowerRange.far() : data.openLimitHigherRange.far();\r\n                var max1 = Math.min(data.openLimitHigherRange.near(), data.openLimitLowerRange.near());\r\n\r\n                var min2 = Math.max(data.openLimitHigherRange.near(), data.openLimitLowerRange.near());\r\n                var max2 = data.orderDir() === eOrderDir.Sell ? data.openLimitHigherRange.far() : data.openLimitLowerRange.far();\r\n\r\n                limitLevelField.pipDigit(instrument.PipDigit);\r\n                limitLevelField.precision(instrument.DecimalDigit);\r\n\r\n                limitLevelField.min1(min1);\r\n                limitLevelField.max1(max1);\r\n\r\n                limitLevelField.min2(min2);\r\n                limitLevelField.max2(max2);\r\n            }\r\n\r\n            function onOpenLimit(result, callerId, instrumentid, requestData) {\r\n                data.hasInstrument(true);\r\n                data.isProcessing(false);\r\n\r\n                var instrument = InstrumentsManager.GetInstrument(instrumentid),\r\n                    redirectToView = self.getSettings().onSuccessRedirectTo;\r\n\r\n                if (instrument) {\r\n                    if (baseOrder.ResultStatusSuccess(result)) {\r\n                        InstrumentsManager.SetInstrumentDealAmount(instrumentid, requestData.amount);\r\n                        ko.postbox.publish('new-limit-success', { instrument: data.ccyPair() });\r\n                        saveDefaultLimitTab();\r\n                        resetDealValues();\r\n                    }\r\n\r\n                    if (redirectToView) {\r\n                        baseOrder.OnActionReturn(result, callerId, instrument, { redirectToView: redirectToView, requestData: requestData });\r\n                    } else {\r\n                        baseOrder.RaiseErrorEvent(result, 'new-limit-error-details', {});\r\n                        baseOrder.OnActionReturn(result, callerId, instrument, { requestData: requestData });\r\n                    }\r\n                }\r\n            }\r\n\r\n            function resetDealValues() {\r\n                data.openLimit(String.empty);\r\n                setOrderDir(eOrderDir.None);\r\n\r\n                setLimitsModel.Data.stopLossRate(String.empty);\r\n                setLimitsModel.Data.takeProfitRate(String.empty);\r\n\r\n                data.enableSLLimit(false);\r\n                data.enableTPLimit(false);\r\n            }\r\n\r\n            function fillData(newLimit) {\r\n                newLimit.positionNumber = 0;\r\n                newLimit.instrumentID = data.selectedInstrument();\r\n                newLimit.amount = data.selectedDealAmount();\r\n                newLimit.orderDir = data.orderDir();\r\n                newLimit.limitRate = data.openLimit();\r\n                newLimit.ifDoneSLRate = 0;\r\n                newLimit.ifDoneTPRate = 0;\r\n\r\n                if (data.enableSLLimit()) {\r\n                    newLimit.ifDoneSLRate = setLimitsModel.Data.stopLossRate() === \"\" ? 0 : setLimitsModel.Data.stopLossRate();\r\n                }\r\n\r\n                if (data.enableTPLimit()) {\r\n                    newLimit.ifDoneTPRate = setLimitsModel.Data.takeProfitRate() === \"\" ? 0 : setLimitsModel.Data.takeProfitRate();\r\n                }\r\n\r\n                if (expirationDateModel.Data.expirationDateSelector.IsGoodTillCancelChecked()) {\r\n                    newLimit.expirationDate = null;\r\n                } else {\r\n                    newLimit.expirationDate = expirationDateModel.Data.expirationDate();\r\n                    var selectedHoursValue = expirationDateModel.Data.selectedHoursValue();\r\n\r\n                    if (general.isObjectType(selectedHoursValue) && general.isEmptyType(selectedHoursValue)) {\r\n                        newLimit.expirationDate += \"  \" + selectedHoursValue.value;\r\n                    } else if (general.isStringType(selectedHoursValue) && !general.isEmptyType(selectedHoursValue)) {\r\n                        newLimit.expirationDate += \"  \" + selectedHoursValue;\r\n                    } else {\r\n                        newLimit.expirationDate += \"  00:00\";\r\n                    }\r\n                }\r\n\r\n                newLimit.mode = eLimitMode.OpenDeal;\r\n                newLimit.type = eLimitType.None;\r\n            }\r\n\r\n            function saveDefaultLimitTab() {\r\n                var profileCustomer = CustomerProfileManager.ProfileCustomer();\r\n                profileCustomer.defaultSlOrderTab = setLimitsModel.Data.curSlActiveTab();\r\n                profileCustomer.defaultTpOrderTab = setLimitsModel.Data.curTpActiveTab();\r\n                CustomerProfileManager.ProfileCustomer(profileCustomer);\r\n            }\r\n\r\n            function dispose() {\r\n                unRegisterFromDispatcher();\r\n\r\n                data.selectedDealAmount.extend({ amountValidation: false });\r\n                stateObject.unset('cachedOvernightFinancing');\r\n\r\n                parent.dispose.call(self);\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Data: data,\r\n                BaseOrder: baseOrder,\r\n                SetLimitsModel: setLimitsModel,\r\n                ExpirationDate: expirationDateModel,\r\n                LimitLevelField: limitLevelField,\r\n                fillData: fillData,\r\n                onOpenLimit: onOpenLimit,\r\n                unRegisterFromDispatcher: unRegisterFromDispatcher,\r\n                registerToDispatcher: registerToDispatcher,\r\n                setLimitTabsFromClientProfile: setLimitTabsFromClientProfile\r\n            };\r\n        });\r\n\r\n        return LimitBaseViewModel;\r\n    }\r\n);\r\n",
  "isBase64": false
}