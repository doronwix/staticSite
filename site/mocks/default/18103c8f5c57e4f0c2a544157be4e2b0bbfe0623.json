{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/AccessRequestViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/AccessRequestViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'dataaccess/dalCompliance',\r\n        'managers/viewsmanager',\r\n        'StateObject!RequestAccess',\r\n        'managers/historymanager',\r\n        'Dictionary',\r\n        'devicemanagers/AlertsManager',\r\n        'modules/permissionsmodule'\r\n    ],\r\n    function (require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            dalCompliance = require('dataaccess/dalCompliance'),\r\n            ViewsManager = require('managers/viewsmanager'),\r\n            HistoryManager = require('managers/historymanager'),\r\n            stateRequestAccess = require('StateObject!RequestAccess'),\r\n            alertsManager = require('devicemanagers/AlertsManager'),\r\n            dictionary = require(\"Dictionary\"),\r\n            permissionsModule = require('modules/permissionsmodule');\r\n\r\n        var AccessRequestViewModel = general.extendClass(KoComponentViewModel, function (params) {\r\n            var self = this,\r\n                parent = this.parent,\r\n                data = this.Data,\r\n                requestAccessType = params.requestAccessType,\r\n                cachedKey;\r\n\r\n            function init(settings) {\r\n                parent.init.call(self, settings);\r\n\r\n                setObservables();\r\n                setInitialStatus();\r\n            }\r\n\r\n            function setObservables() {\r\n                data.currentStatus = ko.observable(eAccessRequestStatus.RequestNotSubmitted);\r\n\r\n                data.isRequestNotSubmitted = ko.computed(function () {\r\n                    return data.currentStatus() === eAccessRequestStatus.RequestNotSubmitted;\r\n                }, data);\r\n\r\n                data.isRequestSubmitted = ko.computed(function () {\r\n                    return data.currentStatus() === eAccessRequestStatus.RequestSubmitted;\r\n                }, data);\r\n\r\n                data.isExtensionNotSubmitted = ko.computed(function () {\r\n                    return data.currentStatus() === eAccessRequestStatus.ExtensionNotSubmitted;\r\n                }, data);\r\n\r\n                data.isExtensionSubmitted = ko.computed(function () {\r\n                    return data.currentStatus() === eAccessRequestStatus.ExtensionSubmitted;\r\n                }, data);\r\n            }\r\n\r\n            function getCachedKey() {\r\n                var key = '';\r\n\r\n                switch (requestAccessType) {\r\n                    case eRequestAccessType.Signals:\r\n                        key = eStateObjectAccessRequest.Signals;\r\n                        break;\r\n\r\n                    case eRequestAccessType.VideoLessons:\r\n                        key = eStateObjectAccessRequest.VideoLessons;\r\n                        break;\r\n\r\n                    case eRequestAccessType.Tutorials:\r\n                        key = eStateObjectAccessRequest.Tutorials;\r\n                        break;\r\n                }\r\n\r\n                return key;\r\n            }\r\n\r\n            function setInitialStatus() {\r\n                var status;\r\n\r\n                cachedKey = getCachedKey();\r\n\r\n                if (!stateRequestAccess.containsKey(cachedKey)) {\r\n                    if (params.isAllowedAccess) {\r\n                        status = eAccessRequestStatus.ExtensionNotSubmitted;\r\n                    }\r\n                    else {\r\n                        status = eAccessRequestStatus.RequestNotSubmitted;\r\n                    }\r\n                    stateRequestAccess.set(cachedKey, status);\r\n                }\r\n                else {\r\n                    status = stateRequestAccess.get(cachedKey);\r\n                }\r\n\r\n                data.currentStatus(status);\r\n            }\r\n\r\n            function setCurrentStatus(status) {\r\n                data.currentStatus(status);\r\n                stateRequestAccess.update(cachedKey, status);\r\n            }\r\n\r\n            function handleRequestOnSuccess() {\r\n                if (data.isRequestNotSubmitted()) {\r\n                    setCurrentStatus(eAccessRequestStatus.RequestSubmitted);\r\n                }\r\n                else if (data.isExtensionNotSubmitted()) {\r\n                    setCurrentStatus(eAccessRequestStatus.ExtensionSubmitted);\r\n                }\r\n            }\r\n\r\n            function onClickSubmitRequest() {\r\n                if (!permissionsModule.CheckPermissions(\"requestTradingSignalsAccess\")) {\r\n                    alertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, dictionary.GetItem('Forbidden'), null);\r\n                    alertsManager.PopAlert(AlertTypes.ServerResponseAlert);\r\n\r\n                    return;\r\n                }\r\n\r\n                dalCompliance\r\n                    .sendRequestAccess(requestAccessType)\r\n                    .then(function (status) {\r\n                        if (status === eOperationStatus.Success) {\r\n                            handleRequestOnSuccess();\r\n                        }\r\n                    });\r\n            }\r\n\r\n            function onCloseClick() {\r\n                var viewToReturn = ViewsManager.Activeform().args ? ViewsManager.Activeform().args['returnTo'] : null;\r\n\r\n                if (viewToReturn) {\r\n                    ViewsManager.SwitchViewVisible(viewToReturn);\r\n                }\r\n                else {\r\n                    HistoryManager.Back();\r\n                }\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                Data: data,\r\n                OnClickSubmitRequest: onClickSubmitRequest,\r\n                OnCloseClick: onCloseClick\r\n            };\r\n        });\r\n\r\n        var createViewModel = function (_params) {\r\n            var params = _params || {};\r\n\r\n            var viewModel = new AccessRequestViewModel(params);\r\n            viewModel.init();\r\n\r\n            return viewModel;\r\n        };\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            }\r\n        };\r\n    }\r\n);",
  "isBase64": false
}