{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/Withdrawal/Wizard/BaseWithdrawalSetAmountViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/Withdrawal/Wizard/BaseWithdrawalSetAmountViewModel',\r\n    [\r\n        'require',\r\n        'helpers/ObservableCustomExtender',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'Dictionary',\r\n        'initdatamanagers/Customer',\r\n        'devicemanagers/StatesManager',\r\n        'devicemanagers/AlertsManager',\r\n        'JSONHelper',\r\n        'initdatamanagers/SymbolsManager',\r\n        'dataaccess/dalWithdrawal',\r\n        'dataaccess/dalCompliance',\r\n        'FxNet/LogicLayer/Withdrawals/LastWithdrawalRequest',\r\n        'modules/systeminfo',\r\n        'configuration/initconfiguration',\r\n        'modules/WithdrawalCommon',\r\n        'viewmodels/UploadDocumentsComponentViewModel',\r\n        'StateObject!wizardState',\r\n        'StateObject!withdrawal',\r\n        'StateObject!withdrawalCCDeposits'\r\n    ],\r\n    function (require) {\r\n        var ko = require('helpers/ObservableCustomExtender'),\r\n            general = require('handlers/general'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            JSONHelper = require('JSONHelper'),\r\n            dalWithdrawal = require('dataaccess/dalWithdrawal'),\r\n            dalCompliance = require('dataaccess/dalCompliance'),\r\n            customer = require('initdatamanagers/Customer'),\r\n            symbolsManager = require('initdatamanagers/SymbolsManager'),\r\n            statesManager = require('devicemanagers/StatesManager'),\r\n            Dictionary = require('Dictionary'),\r\n            AlertsManager = require('devicemanagers/AlertsManager'),\r\n            initConfiguration = require('configuration/initconfiguration'),\r\n            withdrawalCommon = require('modules/WithdrawalCommon'),\r\n            UploadDocumentsComponentViewModel = require('viewmodels/UploadDocumentsComponentViewModel'),\r\n            wizardState = require('StateObject!wizardState'),\r\n            withdrawalState = require('StateObject!withdrawal'),\r\n            withdrawalCCDeposits = require('StateObject!withdrawalCCDeposits');\r\n\r\n        var BaseWithdrawalSetAmountViewModel = general.extendClass(KoComponentViewModel, function (params) {\r\n            var self = this,\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = this.Data, // inherited from KoComponentViewModel\r\n                stepData = wizardState.get('stepData'),\r\n                wizardActive = wizardState.get('wizardActive'),\r\n                withdrawalData = withdrawalState.get('withdrawal'),\r\n                dcUploadMessages = params.dcUploadMessages || {},\r\n                dcHandlers = {};\r\n\r\n            data.withdrawalInfo = {};\r\n            data.withdrawalForm = {};\r\n\r\n            function init() {\r\n                setwithdrawalObject();\r\n                setComputables();\r\n                setSubscribers();\r\n                setUploadContext();\r\n                start();\r\n                buildWizardStep();\r\n            }\r\n\r\n            function setwithdrawalObject() {\r\n                data.notAllowedMsg = ko.observable(!customer.prop.isPending ? 'msg_notAllowed' : 'msg_notAllowedPending');\r\n                data.hasCcWithdrawal = false;\r\n                data.lastBankWithdrawal = null;\r\n                data.isLoading = ko.observable(true);\r\n                data.checkedForDc = false;\r\n                data.dcRequired = false;\r\n                data.dcUploadErrorMsg = '';\r\n                data.withdrawalOptions = ko.observableArray([]);\r\n                data.depositCurrencies = ko.observableArray([]);\r\n                data.baseSymbol = ko.observable();\r\n\r\n                Object.assign(data.withdrawalInfo, {\r\n                    hasAmount: ko.observable(false),\r\n                    MaxWithdrawalAmount: ko.observable(),\r\n                    defaultCcy: customer.prop.defaultCcy(),\r\n                    defaultCcyId: customer.prop.baseCcyId()\r\n                });\r\n\r\n                Object.assign(data.withdrawalForm, {\r\n                    ccyList: ko.observableArray([]),\r\n                    SymbolId: ko.observable(),\r\n                    Details: ko.observable(''),\r\n                    enableValidation: ko.observable(false)\r\n                });\r\n\r\n                data.withdrawalForm.Amount = ko.observable().extend({\r\n                    dirty: false,\r\n                    positiveInteger: { params: { rejectDecimals: true }, message: Dictionary.GetItem(\"wRequest_InvalidAmount\") },\r\n                    required: { value: true, message: Dictionary.GetItem(\"wRequest_reqAmount\") },\r\n                    min: { params: 0.99999999, message: Dictionary.GetItem(\"wRequest_InvalidAmount\") },\r\n                    max: { params: 1000000000, message: Dictionary.GetItem(\"wRequest_InvalidAmount\") }\r\n                });\r\n            }\r\n\r\n            function setComputables() {\r\n                data.withdrawalInfo.canWithdrawal = self.createComputed(function () {\r\n                    return (!statesManager.States.IsPortfolioInactive() || initConfiguration.WithdrawalConfiguration.overrideCanWithdrawal === true) && data.withdrawalInfo.hasAmount();\r\n                }, self, false);\r\n\r\n                data.isValidStep = self.createComputed(function () {\r\n                    return !general.isEmptyValue(data.withdrawalForm.Amount()) && !isNaN(data.withdrawalForm.Amount()) && (\r\n                        data.withdrawalForm.SymbolId() === data.withdrawalInfo.defaultCcyId ?\r\n                            parseFloat(data.withdrawalForm.Amount()) <= parseFloat(data.withdrawalInfo.MaxWithdrawalAmount()) && (\r\n                                data.withdrawalForm.Amount().indexOf(\".\") == -1)\r\n                            : true\r\n                    );\r\n                }, self, false);\r\n            }\r\n\r\n            function setSubscribers() {\r\n                self.subscribeTo(data.withdrawalInfo.canWithdrawal, function (value) {\r\n                    stepData.nextStep.visible = value;\r\n                    wizardState.update('stepData', stepData);\r\n                });\r\n\r\n                self.subscribeTo(data.isValidStep, function (value) {\r\n                    stepData.nextStep.valid = value;\r\n                    wizardState.update('stepData', stepData);\r\n                });\r\n            }\r\n\r\n            function loadSharedData() {\r\n                if (general.isEmptyValue(wizardActive)) {\r\n                    wizardState.set('wizardActive', true);\r\n                    return withdrawalState.update('withdrawal', null);\r\n                }\r\n\r\n                if (withdrawalData) {\r\n                    data.withdrawalForm.Amount(withdrawalData.amount);\r\n                    data.withdrawalForm.SymbolId(withdrawalData.currency);\r\n                    data.withdrawalForm.Details(withdrawalData.details);\r\n                }\r\n            }\r\n\r\n            function setUploadContext() {\r\n                data.uploadVm = UploadDocumentsComponentViewModel.viewModel.createViewModel({\r\n                    recordType: eUploadDocumentType.DepositConfirmation,\r\n                    autoUpload: true,\r\n                    id: 'upload',\r\n                    hashTag: 1,\r\n                    customSuccessMessage: dcUploadMessages.additionalSuccess,\r\n                    uploadResponseCallback: function () { dcUploadHandler(); }\r\n                });\r\n            }\r\n\r\n            function dcUploadHandler() {\r\n                var files = data.uploadVm.Form.files(),\r\n                    fileErrorTypes = ['noFileToUpload', 'uploadError', 'fileTypeError', 'fileNumberError',\r\n                        'invalidFileName', 'maxSize'];\r\n\r\n                if (files.length) {\r\n                    if (fileErrorTypes.contains(files[0].errorType)) {\r\n                        AlertsManager.UpdateAlert(AlertTypes.GeneralOkAlert, '', dcUploadMessages.fail, null, null);\r\n                        AlertsManager.PopAlert(AlertTypes.GeneralOkAlert);\r\n                    } else {\r\n                        dcHandlers.dcUploadSuccess();\r\n                    }\r\n                }\r\n            }\r\n\r\n            function start() {\r\n                if (customer.prop.isDemo) {\r\n                    data.notAllowedMsg = ko.observable('msg_notAllowedDemo');\r\n                    withdrawalCommon.goToDefaultPage();\r\n                    return;\r\n                }\r\n\r\n                updateWithrawal();\r\n\r\n                ko.postbox.publish('trading-event', 'witdrawal-view');\r\n            }\r\n\r\n            function updateWithrawal() {\r\n                Q.all([dalWithdrawal.getWithdrawalInfo(), dalWithdrawal.getCCDeposits()])\r\n                    .then(processData)\r\n                    .then(hideSpinner)\r\n                    .done();\r\n            }\r\n\r\n            function hideSpinner() {\r\n                data.isLoading(false);\r\n            }\r\n\r\n            function processData(response) {\r\n                var withdrawalResponseText = response[0],\r\n                    ccDepositsResponseText = response[1];\r\n\r\n                onLoadWithdrawalInfoComplete(withdrawalResponseText);\r\n                onLoadCCDepositsComplete(ccDepositsResponseText);\r\n            }\r\n\r\n            function onLoadWithdrawalInfoComplete(responseText) {\r\n                var response = JSONHelper.STR2JSON('WithdrawalViewModel/onLoadWithdrawalInfoComplete', responseText, eErrorSeverity.medium) || {};\r\n\r\n                if (response.status === 'ServerError' || response.result === 'SecurityError') {\r\n                    AlertsManager.ShowAlert(\r\n                        AlertTypes.ServerResponseAlert,\r\n                        Dictionary.GetItem('GenericAlert', 'dialogsTitles', ' '),\r\n                        Dictionary.GetItem('ServerError'),\r\n                        null\r\n                    );\r\n\r\n                    return;\r\n                }\r\n\r\n                data.lastBankWithdrawal = response.LastBankWithdrawal;\r\n                data.withdrawalOptions(response.WithdrawalTiles);\r\n\r\n                var allowedWithdrawalInfo = response.AllowedWithdrawalInfo || {};\r\n\r\n                if (!general.isNullOrUndefined(allowedWithdrawalInfo.AllowedWithdrawalAmount)) {\r\n                    data.withdrawalInfo.MaxWithdrawalAmount(allowedWithdrawalInfo.AllowedWithdrawalAmount);\r\n                    data.withdrawalInfo.hasAmount(allowedWithdrawalInfo.AllowedWithdrawalAmount.sign() > 0);\r\n                }\r\n\r\n                var symbolsList = allowedWithdrawalInfo.Symbols;\r\n                var currencyIndex;\r\n\r\n                if (symbolsList) {\r\n                    translateSymbolNames(symbolsList);\r\n                    populateCcyListFrom(symbolsList);\r\n                    currencyIndex = getCustomerCcyIndexFromSymbolList(symbolsList);\r\n\r\n                    if (currencyIndex !== -1) {\r\n                        data.baseSymbol(data.depositCurrencies()[currencyIndex]);\r\n                    }\r\n\r\n                    data.withdrawalForm.SymbolId(withdrawalCommon.getSymbolIdOrDefault(getSelectedSymbolId(), data.depositCurrencies()));\r\n                }\r\n\r\n                loadSharedData();\r\n            }\r\n\r\n            function getSelectedSymbolId() {\r\n                var lastWithdrawal = data.lastBankWithdrawal;\r\n                var symbolId = '';\r\n\r\n                if (!general.isNullOrUndefined(lastWithdrawal) && lastWithdrawal.SymbolID) {\r\n                    symbolId = lastWithdrawal.SymbolID;\r\n                } else {\r\n                    symbolId = general.isNullOrUndefined(data.baseSymbol()) ? '' : data.baseSymbol().SymbolID.toString();\r\n                }\r\n\r\n                return symbolId;\r\n            }\r\n\r\n            function onLoadCCDepositsComplete(responseText) {\r\n                var ccDepositsResponse = JSONHelper.STR2JSON(\"ViewAndPrintWithdrawalViewModel/onLoadCCDepositsComplete\", responseText, eErrorSeverity.medium);\r\n\r\n                withdrawalCCDeposits.set('ccDeposits', ccDepositsResponse);\r\n            }\r\n\r\n            function buildWizardStep() {\r\n                params.setStepActions(continueAction, general.emptyFn);\r\n            }\r\n\r\n            function continueAction() {\r\n                withdrawalCommon\r\n                    .getConvertedAmmount(\r\n                        data.withdrawalForm.Amount(),\r\n                        data.withdrawalInfo.MaxWithdrawalAmount(),\r\n                        data.withdrawalInfo.defaultCcyId,\r\n                        data.withdrawalForm.SymbolId()\r\n                    )\r\n                    .then(function (convertedAmount) {\r\n                        if (!convertedAmount) return;\r\n                        if (convertedAmount.amount && convertedAmount.amount <= parseFloat(data.withdrawalInfo.MaxWithdrawalAmount())) {\r\n                            continueWithWithdrawal();\r\n                        } else {\r\n                            preventContinueAlert(convertedAmount.maxAmount);\r\n                        }\r\n                    })\r\n                    .finally(function () {\r\n                        data.isLoading(false);\r\n                    })\r\n                    .done();\r\n            }\r\n\r\n            function continueWithWithdrawal() {\r\n                if (withdrawalCommon.isBackOffice() || (data.checkedForDc && !data.dcRequired)) {\r\n                    return updateNextStep();\r\n                }\r\n\r\n                if (data.checkedForDc) {\r\n                    return continueWithDc();\r\n                }\r\n\r\n                dalCompliance.getwithdrawalrequeststatus(handleDcStatus);\r\n            }\r\n\r\n            function handleDcStatus(response) {\r\n                var requiredDcStatuses = [eUploadDocumentStatus.AwaitingSignature];\r\n\r\n                data.checkedForDc = true;\r\n                data.dcRequired = requiredDcStatuses.contains(response.DocumentStatus);\r\n                continueWithDc();\r\n            }\r\n\r\n            function continueWithDc() {\r\n                var ccDepositsState = withdrawalCCDeposits.get('ccDeposits') || {},\r\n                    deposits = ccDepositsState.Deposits || [],\r\n                    hasCCDeposits = deposits.length > 0,\r\n                    continueCallBack = (data.dcRequired && hasCCDeposits) ? dcHandlers.dcShowAlert : updateNextStep;\r\n\r\n                return continueCallBack();\r\n            }\r\n\r\n            function updateNextStep() {\r\n                var ccOptionAvailable = data.withdrawalOptions().find(function (opt) { return !general.isEmptyValue(opt.CCId); }),\r\n                    hasCcWithdrawal = data.withdrawalInfo.canWithdrawal() && !general.isEmptyValue(ccOptionAvailable),\r\n                    nextStep = hasCcWithdrawal ? eWithdrawalSteps.setMethod : eWithdrawalSteps.setBankDetails;\r\n\r\n                if (!general.isEmptyValue(withdrawalData) && withdrawalData.gotoApproval) {\r\n                    nextStep = eWithdrawalSteps.setApproval;\r\n                }\r\n\r\n                updateSharedState(hasCcWithdrawal);\r\n                wizardState.update('step', nextStep);\r\n            }\r\n\r\n            function getSelectedCurrency() {\r\n                return data.depositCurrencies().find(function (currency) {\r\n                    return currency.SymbolID === data.withdrawalForm.SymbolId();\r\n                });\r\n            }\r\n\r\n            function updateSharedState(hasCcWithdrawal) {\r\n                var stateData = withdrawalState.get('withdrawal') || {},\r\n                    selectedCurrency = getSelectedCurrency(),\r\n                    newData = {\r\n                        gotoApproval: false,\r\n                        hasCcWithdrawal: hasCcWithdrawal,\r\n                        lastBankWithdrawal: data.lastBankWithdrawal,\r\n                        withdrawalOptions: data.withdrawalOptions(),\r\n                        currency: data.withdrawalForm.SymbolId(),\r\n                        currencyLabel: selectedCurrency && selectedCurrency.SymbolName,\r\n                        amount: data.withdrawalForm.Amount(),\r\n                        details: data.withdrawalForm.Details()\r\n                    };\r\n\r\n                withdrawalState.update('withdrawal', Object.assign(stateData, newData));\r\n            }\r\n\r\n            function preventContinueAlert(maxAmountConverted) {\r\n                var selectedCurrency = getSelectedCurrency();\r\n                var alertMessage = Dictionary.GetItem('withdAmountLimit') + \" \" + general.formatRoundM(maxAmountConverted.toString()) + ' ' + (selectedCurrency && selectedCurrency.SymbolName);\r\n\r\n                AlertsManager.UpdateAlert(AlertTypes.ServerResponseAlert, null, null, [alertMessage]);\r\n                AlertsManager.PopAlert(AlertTypes.ServerResponseAlert);\r\n            }\r\n\r\n            function translateSymbolNames(ccyList) {\r\n                for (var i = 0; i < ccyList.length; i++) {\r\n                    ccyList[i].SymbolName = symbolsManager.GetTranslatedSymbolById(ccyList[i].SymbolID);\r\n                }\r\n\r\n                return ccyList;\r\n            }\r\n\r\n            function populateCcyListFrom(symbolsList) {\r\n                data.depositCurrencies.removeAll();\r\n                ko.utils.arrayPushAll(data.depositCurrencies, symbolsList);\r\n            }\r\n\r\n            function getCustomerCcyIndexFromSymbolList(ccyList) {\r\n                for (var i = 0; i < ccyList.length; i++) {\r\n                    if (ccyList[i].SymbolID === customer.prop.selectedCcyId()) {\r\n                        return i;\r\n                    }\r\n                }\r\n\r\n                return -1;\r\n            }\r\n\r\n            function dispose() {\r\n                data.uploadVm.dispose();\r\n                withdrawalCCDeposits.clear();\r\n\r\n                parent.dispose.call(self); // inherited from KoComponentViewModel\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                WithdrawalInfo: data.withdrawalInfo,\r\n                Data: data,\r\n                UpdateNextStep: updateNextStep,\r\n                DcHandlers: dcHandlers\r\n            };\r\n        });\r\n\r\n        return BaseWithdrawalSetAmountViewModel;\r\n    }\r\n);\r\n",
  "isBase64": false
}