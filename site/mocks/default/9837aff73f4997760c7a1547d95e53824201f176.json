{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/FxNet/LogicLayer/Deal/DealAmountLabel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'FxNet/LogicLayer/Deal/DealAmountLabel',\r\n    [\r\n        'require',\r\n        'handlers/general',\r\n        'Dictionary',\r\n        'configuration/initconfiguration',\r\n        'initdatamanagers/SymbolsManager',\r\n        'LoadDictionaryContent!dealAmountLabel'\r\n    ],\r\n    function (require) {\r\n        var general = require('handlers/general'),\r\n            Dictionary = require('Dictionary'),\r\n            newDealConfiguration = require('configuration/initconfiguration').NewDealConfiguration,\r\n            SymbolsManager = require('initdatamanagers/SymbolsManager');\r\n\r\n        function translate(instrument, prefixKey) {\r\n            if (!instrument) {\r\n                return;\r\n            }\r\n\r\n            var shouldIncludeBaseSymbolName = false,\r\n                prefix = general.isNullOrUndefined(prefixKey) ? newDealConfiguration.dealAmountPrefixKey : prefixKey,\r\n                contentKey = prefix + instrument.id,\r\n                labelValue;\r\n\r\n            if (Dictionary.ValueIsEmpty(contentKey, 'dealAmountLabel')) {\r\n                if (instrument.isFuture) {\r\n                    contentKey = prefix + 'future';\r\n                }\r\n                else if (instrument.isShare) {\r\n                    contentKey = prefix + 'share';\r\n                }\r\n                else {\r\n                    contentKey = prefix + 'default';\r\n                    shouldIncludeBaseSymbolName = true;\r\n                }\r\n            }\r\n\r\n            labelValue = Dictionary.GetItem(contentKey, 'dealAmountLabel');\r\n\r\n            if (shouldIncludeBaseSymbolName) {\r\n                labelValue += (' ' + SymbolsManager.GetTranslatedSymbolById(instrument.baseSymbol));\r\n            }\r\n\r\n            return {\r\n                label: labelValue\r\n            };\r\n        }\r\n\r\n        return {\r\n            Translate: translate\r\n        };\r\n    }\r\n);\r\n",
  "isBase64": false
}