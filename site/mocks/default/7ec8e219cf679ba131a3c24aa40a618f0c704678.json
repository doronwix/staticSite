{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/LogicLayer/LimitCalculator/LimitRangeCalculator.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "define(\r\n    'calculators/LimitRangeCalculator',\r\n    [\r\n        'require',\r\n        'handlers/general',\r\n        'enums/enums'\r\n    ],\r\n    function (require) {\r\n        var general = require('handlers/general');\r\n\r\n        //------------------------------------------------------------\r\n        // LimitRangesCalculator\r\n        //------------------------------------------------------------\r\n        var LimitRangesCalculator = {\r\n            LimitRange: function LimitRange(ko) {\r\n                this.near = ko.observable(\"\");\r\n                this.far = ko.observable(\"\");\r\n            },\r\n\r\n            CalculateOpeningRanges: function (bid, ask, orderDir, lowerRange, higherRange, instrument, limitMultiplier) {\r\n                this.CalculateLimitRanges(bid, ask, eLimitMode.OpenDeal, orderDir, lowerRange, higherRange, instrument, limitMultiplier);\r\n            },\r\n\r\n            //------------------------------------------------------\r\n\r\n            CalculateClosingRanges: function (bid, ask, orderDir, lowerRange, higherRange, instrument, limitMultiplier) {\r\n                this.CalculateLimitRanges(bid, ask, eLimitMode.CloseDeal, orderDir, lowerRange, higherRange, instrument, limitMultiplier);\r\n            },\r\n\r\n            //------------------------------------------------------\r\n\r\n            CalculateIfDoneRanges: function (bid, ask, orderDir, lowerRange, higherRange, limitLevel, instrument, limitMultiplier) {\r\n                switch (orderDir) {\r\n                    case eOrderDir.Sell:\r\n                        this.CalculateIfDoneShortLimits(bid, ask, instrument, Number(limitLevel), lowerRange, higherRange, limitMultiplier);\r\n                        break;\r\n\r\n                    default:\r\n                        this.CalculateIfDoneLongLimits(bid, ask, instrument, Number(limitLevel), lowerRange, higherRange, limitMultiplier);\r\n                        break;\r\n                }\r\n            },\r\n\r\n            //------------------------------------------------------\r\n\r\n            CalculateLimitRanges: function (bid, ask, limitmode, orderDir, lowerRange, higherRange, instrument, limitMultiplier) {\r\n                switch (limitmode) {\r\n                    case eLimitMode.OpenDeal:\r\n                        switch (orderDir) {\r\n                            case eOrderDir.Sell:\r\n                                this.CalculateOpenShortLimits(bid, ask, instrument, lowerRange, higherRange, limitMultiplier);\r\n                                break;\r\n\r\n                            default:\r\n                                this.CalculateOpenLongLimits(bid, ask, instrument, lowerRange, higherRange, limitMultiplier);\r\n                                break;\r\n                        }\r\n                        break;\r\n\r\n                    case eLimitMode.CloseDeal:\r\n                        switch (orderDir) {\r\n                            case eOrderDir.Sell:\r\n                                this.CalculateCloseShortLimits(bid, ask, instrument, lowerRange, higherRange, limitMultiplier);\r\n                                break;\r\n\r\n                            default:\r\n                                this.CalculateCloseLongLimits(bid, ask, instrument, lowerRange, higherRange, limitMultiplier);\r\n                                break;\r\n                        }\r\n                        break;\r\n                }\r\n            },\r\n\r\n            //------------------------------------------------------\r\n\r\n            CalculateOpenLongLimits: function (bid, ask, instrument, lowerRange, higherRange, limitMultiplier) {\r\n                if (lowerRange) {\r\n                    lowerRange.near(this.CalculateNearLimit(ask, instrument.SLMinDistance, limitMultiplier, Operation.Add, instrument.PipDigit));\r\n                    lowerRange.far(this.CalculateFarLimit(ask, systemInfo.config.MaxOpenLimitDist, Operation.Add));\r\n                }\r\n\r\n                if (higherRange) {\r\n                    higherRange.near(this.CalculateNearLimit(bid, instrument.TPMinDistance, limitMultiplier, Operation.Substruct, instrument.PipDigit));\r\n                    higherRange.far(this.CalculateFarLimit(bid, systemInfo.config.MaxOpenLimitDist, Operation.Substruct));\r\n                }\r\n            },\r\n\r\n            //------------------------------------------------------\r\n\r\n            CalculateOpenShortLimits: function (bid, ask, instrument, lowerRange, higherRange, limitMultiplier) {\r\n                if (lowerRange) {\r\n                    lowerRange.near(this.CalculateNearLimit(bid, instrument.SLMinDistance, limitMultiplier, Operation.Substruct, instrument.PipDigit));\r\n                    lowerRange.far(this.CalculateFarLimit(bid, systemInfo.config.MaxOpenLimitDist, Operation.Substruct));\r\n                }\r\n\r\n                if (higherRange) {\r\n                    higherRange.near(this.CalculateNearLimit(ask, instrument.TPMinDistance, limitMultiplier, Operation.Add, instrument.PipDigit));\r\n                    higherRange.far(this.CalculateFarLimit(ask, systemInfo.config.MaxOpenLimitDist, Operation.Add));\r\n                }\r\n            },\r\n\r\n            //------------------------------------------------------\r\n\r\n            CalculateCloseLongLimits: function (bid, ask, instrument, lowerRange, higherRange, limitMultiplier) {\r\n                if (lowerRange) {\r\n                    lowerRange.near(this.CalculateNearLimit(bid, instrument.SLMinDistance, limitMultiplier, Operation.Substruct, instrument.PipDigit));\r\n                    lowerRange.far(this.CalculateFarLimit(bid, systemInfo.config.MaxCloseLimitDist, Operation.Substruct));\r\n                }\r\n\r\n                if (higherRange) {\r\n                    higherRange.near(this.CalculateNearLimit(ask, instrument.TPMinDistance, limitMultiplier, Operation.Add, instrument.PipDigit));\r\n                    higherRange.far(this.CalculateFarLimit(ask, systemInfo.config.MaxCloseLimitDist, Operation.Add));\r\n                }\r\n            },\r\n\r\n            //------------------------------------------------------\r\n\r\n            CalculateCloseShortLimits: function (bid, ask, instrument, lowerRange, higherRange, limitMultiplier) {\r\n                if (lowerRange) {\r\n                    lowerRange.near(this.CalculateNearLimit(ask, instrument.SLMinDistance, limitMultiplier, Operation.Add, instrument.PipDigit));\r\n                    lowerRange.far(this.CalculateFarLimit(ask, systemInfo.config.MaxCloseLimitDist, Operation.Add));\r\n                }\r\n\r\n                if (higherRange) {\r\n                    higherRange.near(this.CalculateNearLimit(bid, instrument.TPMinDistance, limitMultiplier, Operation.Substruct, instrument.PipDigit));\r\n                    higherRange.far(this.CalculateFarLimit(bid, systemInfo.config.MaxCloseLimitDist, Operation.Substruct));\r\n                }\r\n            },\r\n\r\n            //------------------------------------------------------\r\n\r\n            CalculateIfDoneShortLimits: function (bid, ask, instrument, limitLevel, lowerRange, higherRange, limitMultiplier) {\r\n                if (lowerRange) {\r\n                    lowerRange.near(this.CalculateNearLimit(limitLevel + (ask - bid), instrument.SLMinDistance, limitMultiplier, Operation.Add, instrument.PipDigit));\r\n                    lowerRange.far(this.CalculateFarLimit(limitLevel + (ask - bid), systemInfo.config.MaxCloseLimitDist, Operation.Add));\r\n                }\r\n\r\n                if (higherRange) {\r\n                    higherRange.near(this.CalculateNearLimit(limitLevel, instrument.TPMinDistance, limitMultiplier, Operation.Substruct, instrument.PipDigit));\r\n                    higherRange.far(this.CalculateFarLimit(limitLevel, systemInfo.config.MaxCloseLimitDist, Operation.Substruct));\r\n                }\r\n            },\r\n\r\n            CalculateIfDoneLongLimits: function (bid, ask, instrument, limitLevel, lowerRange, higherRange, limitMultiplier) {\r\n                if (lowerRange) {\r\n                    lowerRange.near(this.CalculateNearLimit(limitLevel - (ask - bid), instrument.SLMinDistance, limitMultiplier, Operation.Substruct, instrument.PipDigit));\r\n                    lowerRange.far(this.CalculateFarLimit(limitLevel - (ask - bid), systemInfo.config.MaxCloseLimitDist, Operation.Substruct));\r\n                }\r\n\r\n                if (higherRange) {\r\n                    higherRange.near(this.CalculateNearLimit(limitLevel, instrument.TPMinDistance, limitMultiplier, Operation.Add, instrument.PipDigit));\r\n                    higherRange.far(this.CalculateFarLimit(limitLevel, systemInfo.config.MaxCloseLimitDist, Operation.Add));\r\n                }\r\n            },\r\n\r\n            CalculateNearLimit: function (rate, minDistance, limitMultiplier, operation, pipDigit) {\r\n                limitMultiplier = limitMultiplier || 1;\r\n                var rawDistance;\r\n                if (pipDigit >= 0)\r\n                    rawDistance = (minDistance * limitMultiplier) / general.pow10cache[pipDigit];\r\n                else\r\n                    rawDistance = minDistance * limitMultiplier * general.pow10cache[pipDigit * (-1)];\r\n\r\n                switch (operation) {\r\n                    case Operation.Add:\r\n                        return Number(rate) + rawDistance;\r\n\r\n                    case Operation.Substruct:\r\n                        return Number(rate) - rawDistance;\r\n\r\n                    default:\r\n                        throw new RangeError(\"unknown operation\");\r\n                }\r\n            },\r\n\r\n            CalculateFarLimit: function (rate, maxDistance, operation) {\r\n                var maxDistanceDivider = 100,\r\n                    adjustedMaxDistance;\r\n\r\n                switch (operation) {\r\n                    case Operation.Add:\r\n                        adjustedMaxDistance = maxDistanceDivider + maxDistance;\r\n                        break;\r\n\r\n                    case Operation.Substruct:\r\n                        adjustedMaxDistance = maxDistanceDivider - maxDistance;\r\n                        break;\r\n\r\n                    default:\r\n                        throw new RangeError(\"unknown operation\");\r\n                }\r\n\r\n                return Number(rate) * adjustedMaxDistance / maxDistanceDivider;\r\n            }\r\n        };\r\n\r\n        return LimitRangesCalculator;\r\n    }\r\n);",
  "isBase64": false
}