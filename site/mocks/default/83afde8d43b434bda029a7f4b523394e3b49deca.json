{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/uilayer/viewmodels/Deals/ScheduleGroupViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿define(\r\n    'viewmodels/Deals/ScheduleGroupViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'helpers/KoComponentViewModel',\r\n        'StateObject!ScheduleGroup'\r\n    ],\r\n    function (require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            KoComponentViewModel = require('helpers/KoComponentViewModel'),\r\n            scheduleGroupStateObject = require('StateObject!ScheduleGroup');\r\n\r\n        var ScheduleGroupViewModel = general.extendClass(KoComponentViewModel, function () {\r\n            var self = this,\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = this.Data, // inherited from KoComponentViewModel\r\n                scheduleGroupStateObjectUnsubscribe;\r\n\r\n            function init(settings) {\r\n                parent.init.call(self, settings);   // inherited from KoComponentViewModel\r\n\r\n                setObservables();\r\n                setSubscribers();\r\n                setInitialData();\r\n            }\r\n\r\n            function setObservables() {\r\n                data.scheduleGroup = ko.observable();\r\n                data.hasOneTradingHour = ko.observable();\r\n                data.hasMultipleTradingHours = ko.observable();\r\n            }\r\n\r\n            function setSubscribers() {\r\n                if (!scheduleGroupStateObject.get(\"ScheduleGroupData\")) {\r\n                    scheduleGroupStateObject.set(\"ScheduleGroupData\", null);\r\n                }\r\n\r\n                scheduleGroupStateObjectUnsubscribe = scheduleGroupStateObject.subscribe(\"ScheduleGroupData\", updateScheduleGroup);\r\n            }\r\n\r\n            function setInitialData() {\r\n                var scheduleGroup = scheduleGroupStateObject.get(\"ScheduleGroupData\");\r\n\r\n                updateScheduleGroup(scheduleGroup);\r\n            }\r\n\r\n            function updateScheduleGroup(scheduleGroup) {\r\n                data.scheduleGroup(scheduleGroup);\r\n\r\n                if (!general.isNullOrUndefined(scheduleGroup)) {\r\n                    data.hasOneTradingHour(!general.isEmpty(scheduleGroup.TradingBreak1_GMT) && general.isEmpty(scheduleGroup.TradingBreak2_GMT));\r\n                    data.hasMultipleTradingHours(!general.isEmpty(scheduleGroup.TradingBreak1_GMT) && !general.isEmpty(scheduleGroup.TradingBreak2_GMT));\r\n                }\r\n            }\r\n\r\n            function dispose() {\r\n                if (scheduleGroupStateObjectUnsubscribe) {\r\n                    scheduleGroupStateObjectUnsubscribe();\r\n                }\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Data: data\r\n            };\r\n        });\r\n\r\n        var createViewModel = function () {\r\n            var viewModel = new ScheduleGroupViewModel();\r\n            viewModel.init();\r\n\r\n            return viewModel;\r\n        };\r\n\r\n        return {\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            }\r\n        };\r\n    }\r\n);",
  "isBase64": false
}