{
  "requestUrl": "/webpl3/assets/20201230110628/js/scripts/fxnet/devices/web/uilayer/viewmodels/ChartToolViewModel.js?v=20201230110628",
  "contentType": "application/javascript",
  "method": "GET",
  "statusCode": 200,
  "data": "ï»¿/* globals eChartInstanceType, eChartRateType */\r\ndefine(\r\n    'deviceviewmodels/ChartToolViewModel',\r\n    [\r\n        'require',\r\n        'knockout',\r\n        'handlers/general',\r\n        'managers/historymanager',\r\n        'viewmodels/dialogs/DialogViewModel',\r\n        'managers/AdvinionChart/DealSlipChart',\r\n        'StateObject!Transaction'\r\n    ],\r\n    function ChartToolDef(require) {\r\n        var ko = require('knockout'),\r\n            general = require('handlers/general'),\r\n            historyManager = require('managers/historymanager'),\r\n            chart = require('managers/AdvinionChart/DealSlipChart'),\r\n            stateObject = require('StateObject!Transaction');\r\n\r\n        var ChartToolViewModel = general.extendClass(chart, function ChartToolClass() {\r\n            var self = this,\r\n                parent = this.parent, // inherited from KoComponentViewModel\r\n                data = parent.Data, // inherited from KoComponentViewModel\r\n                dealData = stateObject.getAll(),\r\n                disposables = [];\r\n\r\n            //-------------------------------------------------------\r\n            function init(settings) {\r\n                var chartDeffer = stateObject.containsKey(\"stateObjectIsReadyDefer\") ?\r\n                    stateObject.get('stateObjectIsReadyDefer') :\r\n                    stateObject.set('stateObjectIsReadyDefer', Q.defer());\r\n\r\n                setObservables();\r\n\r\n                chartDeffer.promise\r\n                    .then(function () {\r\n                        startComponent(settings);\r\n                    })\r\n                    .done();\r\n            }\r\n\r\n            function startComponent(settings) {\r\n                dealData = stateObject.getAll();\r\n                settings = general.extendType(settings, getAdditionalSettings());\r\n                parent.init.call(self, settings); // inherited from KoComponentViewModel\r\n\r\n                setSubscribers();\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setObservables() {\r\n                data.isChartReady = ko.observable(false);\r\n                data.isLoadingData = ko.observable(false);\r\n                data.isFullScreen = stateObject.set('isFullScreen', ko.observable(false));\r\n                data.tcChartSignals = stateObject.set('tc-chart-signals', ko.observable({\r\n                    disabled: true,\r\n                    active: false\r\n                }));\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function setSubscribers() {\r\n                var subscriber = self.subscribeTo(data.isLoadingData, function setIsChartReady(isLoadingData) {\r\n                    if (isLoadingData) {\r\n                        return;\r\n                    }\r\n\r\n                    data.isChartReady(true);\r\n                    subscriber.dispose();\r\n                });\r\n\r\n                var stateData = stateObject.getAll();\r\n\r\n                self.subscribeTo(stateData.selectedInstrument, function (instrumentId) {\r\n                    parent.ChangeSymbol(instrumentId, getChartOrderDir(stateData.orderDir()));\r\n                });\r\n\r\n                if (stateData.orderDir) {\r\n                    self.subscribeTo(stateData.orderDir, function (newOrderDir) {\r\n                        if (general.isFunctionType(stateData.switchToRate)) {\r\n                            stateData.switchToRate();\r\n                        }\r\n\r\n                        if (ko.isObservable(stateData.stopLossRate) && stateData.stopLossRate()) {\r\n                            stateData.stopLossRate(\"\");\r\n                        }\r\n\r\n                        if (ko.isObservable(stateData.takeProfitRate) && stateData.takeProfitRate()) {\r\n                            stateData.takeProfitRate(\"\");\r\n                        }\r\n\r\n                        parent.ChangeSymbol(stateData.selectedInstrument(), getChartOrderDir(newOrderDir));\r\n                    });\r\n                }\r\n\r\n                if (stateObject.containsKey('transactionType')) {\r\n                    self.subscribeAndNotify(stateData.transactionType, subscribeToPriceLineChanges);\r\n                } else {\r\n                    subscribeToPriceLineChanges();\r\n                }\r\n\r\n                self.subscribeTo(data.isFullScreen, parent.ChangeMode);\r\n\r\n                historyManager.OnStateChanged.Add(onHistoryStateChanged);\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function subscribeToPriceLineChanges() {\r\n                var stateData = stateObject.getAll();\r\n\r\n                for (var i = 0; i < disposables.length; i++) {\r\n                    disposables[i].dispose();\r\n                }\r\n\r\n                disposables.length = 0;\r\n\r\n                if (stateData.stopLossRate && ko.isObservable(stateData.stopLossRate)) {\r\n                    disposables.push(self.subscribeAndNotify(stateData.stopLossRate, function (slRate) {\r\n                        parent.DrawPriceLine(eChartPriceLineType.StopLoss, slRate, stateData.chart.keys.stopLoss);\r\n                    }));\r\n                }\r\n\r\n                if (stateData.takeProfitRate && ko.isObservable(stateData.takeProfitRate)) {\r\n                    disposables.push(self.subscribeAndNotify(stateData.takeProfitRate, function (tpRate) {\r\n                        parent.DrawPriceLine(eChartPriceLineType.TakeProfit, tpRate, stateData.chart.keys.takeProfit);\r\n                    }));\r\n                }\r\n\r\n                if (stateData.dealRate) {\r\n                    parent.DrawPriceLine(eChartPriceLineType.OpenRate, stateData.dealRate, stateData.chart.keys.openRate);\r\n                }\r\n\r\n                if (stateData.openLimit && ko.isObservable(stateData.openLimit)) {\r\n                    disposables.push(self.subscribeAndNotify(stateData.openLimit, function (openLimitRate) {\r\n                        var lineType = stateData.chart.parentType === eChartParentType.NewPriceAlert ?\r\n                            eChartPriceLineType.PriceAlertRate : eChartPriceLineType.LimitLevel,\r\n                            rateLabel = stateData.chart.parentType === eChartParentType.NewPriceAlert ?\r\n                                stateData.chart.keys.priceAlertRate : stateData.chart.keys.limitLevel;\r\n\r\n                        parent.DrawPriceLine(lineType, openLimitRate, rateLabel);\r\n                    }));\r\n                }\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function onHistoryStateChanged(state) {\r\n                if (state.type === eHistoryStateType.ExitFullscren ||\r\n                    state.type === eHistoryStateType.CloseDialog) {\r\n                    data.isFullScreen(false);\r\n                }\r\n\r\n                if (state.type === eHistoryStateType.EnterFullscren) {\r\n                    data.isFullScreen(true);\r\n                }\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function getChartOrderDir(orderDirValue) {\r\n                var orderDir = orderDirValue === eOrderDir.None ? eOrderDir.Buy : orderDirValue;\r\n\r\n                if (dealData.chart.direction === eChartDirection.Opposite) {\r\n                    orderDir = orderDir === eOrderDir.Sell ? eOrderDir.Buy : eOrderDir.Sell;\r\n                }\r\n\r\n                return orderDir;\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function onPriceUpdated(priceLineType, newRate) {\r\n                var stateData = stateObject.getAll();\r\n\r\n                if (stateData.switchToRate && general.isFunctionType(stateData.switchToRate)) {\r\n                    stateData.switchToRate();\r\n                }\r\n\r\n                switch (priceLineType) {\r\n                    case eChartPriceLineType.LimitLevel:\r\n                        if (stateData.openLimit && ko.isObservable(stateData.openLimit)) {\r\n                            stateData.openLimit(newRate);\r\n                        }\r\n                        break;\r\n\r\n                    case eChartPriceLineType.StopLoss:\r\n                        if (stateData.stopLossRate && ko.isObservable(stateData.stopLossRate)) {\r\n                            stateData.stopLossRate(newRate);\r\n                        }\r\n                        break;\r\n\r\n                    case eChartPriceLineType.TakeProfit:\r\n                        if (stateData.takeProfitRate && ko.isObservable(stateData.takeProfitRate)) {\r\n                            stateData.takeProfitRate(newRate);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function getAdditionalSettings() {\r\n                var orderDir = getChartOrderDir(dealData.orderDir());\r\n\r\n                return {\r\n                    additionalStartArgs: {\r\n                        instrumentId: dealData.selectedInstrument(),\r\n                        orderDir: orderDir,\r\n                        currentRateKey: dealData.chart.keys.currentRate,\r\n                        instanceType: eChartInstanceType.newDealSlip,\r\n                        containerSuffix: String.empty,\r\n                        isLoadingData: data.isLoadingData,\r\n                        toggleDealSlipViewCallback: toggleDealSlipView,\r\n                        isExpandedMode: data.isFullScreen(),\r\n                        isFullScreen: data.isFullScreen(),\r\n                        tracking: {\r\n                            eventName: 'deal-slip-chart-interaction'\r\n                        },\r\n                        onPriceLineDragged: onPriceUpdated,\r\n                        allowDragLine: dealData.chart.allowDragLine\r\n                    }\r\n                };\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function toggleDealSlipView() {\r\n                data.isFullScreen(!data.isFullScreen());\r\n\r\n                if (data.isFullScreen()) {\r\n                    historyManager.PushPopupState(ePopupType.Dialog, eFullScreenControl.TransactionSwitcher);\r\n                }\r\n            }\r\n\r\n            //-------------------------------------------------------\r\n            function dispose() {\r\n                data.isFullScreen(false);\r\n                historyManager.OnStateChanged.Remove(onHistoryStateChanged);\r\n\r\n                parent.dispose.call(self);          // inherited from KoComponentViewModel\r\n            }\r\n\r\n            return {\r\n                init: init,\r\n                dispose: dispose,\r\n                Data: data,\r\n                NewDealData: dealData,\r\n                ToggleDealSlipView: toggleDealSlipView\r\n            };\r\n        });\r\n\r\n        function createViewModel(params) {\r\n            var viewModel = new ChartToolViewModel();\r\n\r\n            viewModel.init(params);\r\n\r\n            return viewModel;\r\n        }\r\n\r\n        return {\r\n            ChartToolViewModel: ChartToolViewModel,\r\n            viewModel: {\r\n                createViewModel: createViewModel\r\n            }\r\n        };\r\n    }\r\n);",
  "isBase64": false
}